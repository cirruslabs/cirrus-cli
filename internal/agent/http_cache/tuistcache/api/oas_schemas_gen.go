// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// The URL to download an artifact.
// Ref: #/components/schemas/ArtifactDownloadURL
type ArtifactDownloadURL struct {
	// The UNIX timestamp when the URL expires.
	ExpiresAt int `json:"expires_at"`
	// The URL to download the artifact.
	URL string `json:"url"`
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *ArtifactDownloadURL) GetExpiresAt() int {
	return s.ExpiresAt
}

// GetURL returns the value of URL.
func (s *ArtifactDownloadURL) GetURL() string {
	return s.URL
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *ArtifactDownloadURL) SetExpiresAt(val int) {
	s.ExpiresAt = val
}

// SetURL sets the value of URL.
func (s *ArtifactDownloadURL) SetURL(val string) {
	s.URL = val
}

func (*ArtifactDownloadURL) downloadPreviewRes() {}

type ArtifactMultipartUploadPart jx.Raw

// It represents a part that has been uploaded using multipart uploads. The part is identified by its
// number and the etag.
// Ref: #/components/schemas/ArtifactMultipartUploadParts
type ArtifactMultipartUploadParts struct {
	Parts []ArtifactMultipartUploadPartsPartsItem `json:"parts"`
	// The upload ID.
	UploadID string `json:"upload_id"`
}

// GetParts returns the value of Parts.
func (s *ArtifactMultipartUploadParts) GetParts() []ArtifactMultipartUploadPartsPartsItem {
	return s.Parts
}

// GetUploadID returns the value of UploadID.
func (s *ArtifactMultipartUploadParts) GetUploadID() string {
	return s.UploadID
}

// SetParts sets the value of Parts.
func (s *ArtifactMultipartUploadParts) SetParts(val []ArtifactMultipartUploadPartsPartsItem) {
	s.Parts = val
}

// SetUploadID sets the value of UploadID.
func (s *ArtifactMultipartUploadParts) SetUploadID(val string) {
	s.UploadID = val
}

type ArtifactMultipartUploadPartsPartsItem struct {
	// The ETag of the part.
	Etag string `json:"etag"`
	// The part number.
	PartNumber int `json:"part_number"`
}

// GetEtag returns the value of Etag.
func (s *ArtifactMultipartUploadPartsPartsItem) GetEtag() string {
	return s.Etag
}

// GetPartNumber returns the value of PartNumber.
func (s *ArtifactMultipartUploadPartsPartsItem) GetPartNumber() int {
	return s.PartNumber
}

// SetEtag sets the value of Etag.
func (s *ArtifactMultipartUploadPartsPartsItem) SetEtag(val string) {
	s.Etag = val
}

// SetPartNumber sets the value of PartNumber.
func (s *ArtifactMultipartUploadPartsPartsItem) SetPartNumber(val int) {
	s.PartNumber = val
}

// The URL to upload a multipart part.
// Ref: #/components/schemas/ArtifactMultipartUploadURL
type ArtifactMultipartUploadURL struct {
	Data   ArtifactMultipartUploadURLData   `json:"data"`
	Status ArtifactMultipartUploadURLStatus `json:"status"`
}

// GetData returns the value of Data.
func (s *ArtifactMultipartUploadURL) GetData() ArtifactMultipartUploadURLData {
	return s.Data
}

// GetStatus returns the value of Status.
func (s *ArtifactMultipartUploadURL) GetStatus() ArtifactMultipartUploadURLStatus {
	return s.Status
}

// SetData sets the value of Data.
func (s *ArtifactMultipartUploadURL) SetData(val ArtifactMultipartUploadURLData) {
	s.Data = val
}

// SetStatus sets the value of Status.
func (s *ArtifactMultipartUploadURL) SetStatus(val ArtifactMultipartUploadURLStatus) {
	s.Status = val
}

func (*ArtifactMultipartUploadURL) generateAnalyticsArtifactMultipartUploadURLRes() {}
func (*ArtifactMultipartUploadURL) generateCacheArtifactMultipartUploadURLRes()     {}
func (*ArtifactMultipartUploadURL) generatePreviewsMultipartUploadURLRes()          {}

type ArtifactMultipartUploadURLData struct {
	// The URL to upload the part.
	URL string `json:"url"`
}

// GetURL returns the value of URL.
func (s *ArtifactMultipartUploadURLData) GetURL() string {
	return s.URL
}

// SetURL sets the value of URL.
func (s *ArtifactMultipartUploadURLData) SetURL(val string) {
	s.URL = val
}

type ArtifactMultipartUploadURLStatus string

const (
	ArtifactMultipartUploadURLStatusSuccess ArtifactMultipartUploadURLStatus = "success"
)

// AllValues returns all ArtifactMultipartUploadURLStatus values.
func (ArtifactMultipartUploadURLStatus) AllValues() []ArtifactMultipartUploadURLStatus {
	return []ArtifactMultipartUploadURLStatus{
		ArtifactMultipartUploadURLStatusSuccess,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ArtifactMultipartUploadURLStatus) MarshalText() ([]byte, error) {
	switch s {
	case ArtifactMultipartUploadURLStatusSuccess:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ArtifactMultipartUploadURLStatus) UnmarshalText(data []byte) error {
	switch ArtifactMultipartUploadURLStatus(data) {
	case ArtifactMultipartUploadURLStatusSuccess:
		*s = ArtifactMultipartUploadURLStatusSuccess
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The upload has been initiated and a ID is returned to upload the various parts using multi-part
// uploads.
// Ref: #/components/schemas/ArtifactUploadID
type ArtifactUploadID struct {
	// Data that contains ID that's associated with the multipart upload to use when uploading parts.
	Data   ArtifactUploadIDData   `json:"data"`
	Status ArtifactUploadIDStatus `json:"status"`
}

// GetData returns the value of Data.
func (s *ArtifactUploadID) GetData() ArtifactUploadIDData {
	return s.Data
}

// GetStatus returns the value of Status.
func (s *ArtifactUploadID) GetStatus() ArtifactUploadIDStatus {
	return s.Status
}

// SetData sets the value of Data.
func (s *ArtifactUploadID) SetData(val ArtifactUploadIDData) {
	s.Data = val
}

// SetStatus sets the value of Status.
func (s *ArtifactUploadID) SetStatus(val ArtifactUploadIDStatus) {
	s.Status = val
}

func (*ArtifactUploadID) startAnalyticsArtifactMultipartUploadRes() {}
func (*ArtifactUploadID) startCacheArtifactMultipartUploadRes()     {}

// Data that contains ID that's associated with the multipart upload to use when uploading parts.
type ArtifactUploadIDData struct {
	// The upload ID.
	UploadID string `json:"upload_id"`
}

// GetUploadID returns the value of UploadID.
func (s *ArtifactUploadIDData) GetUploadID() string {
	return s.UploadID
}

// SetUploadID sets the value of UploadID.
func (s *ArtifactUploadIDData) SetUploadID(val string) {
	s.UploadID = val
}

type ArtifactUploadIDStatus string

const (
	ArtifactUploadIDStatusSuccess ArtifactUploadIDStatus = "success"
)

// AllValues returns all ArtifactUploadIDStatus values.
func (ArtifactUploadIDStatus) AllValues() []ArtifactUploadIDStatus {
	return []ArtifactUploadIDStatus{
		ArtifactUploadIDStatusSuccess,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ArtifactUploadIDStatus) MarshalText() ([]byte, error) {
	switch s {
	case ArtifactUploadIDStatusSuccess:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ArtifactUploadIDStatus) UnmarshalText(data []byte) error {
	switch ArtifactUploadIDStatus(data) {
	case ArtifactUploadIDStatusSuccess:
		*s = ArtifactUploadIDStatusSuccess
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type AuthenticateReq struct {
	// The email to authenticate with.
	Email string `json:"email"`
	// The password to authenticate with.
	Password string `json:"password"`
}

// GetEmail returns the value of Email.
func (s *AuthenticateReq) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *AuthenticateReq) GetPassword() string {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *AuthenticateReq) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *AuthenticateReq) SetPassword(val string) {
	s.Password = val
}

// A pair of access token to authenticate requests and refresh token to generate new access tokens
// when they expire.
// Ref: #/components/schemas/AuthenticationTokens
type AuthenticationTokens struct {
	// API access token.
	AccessToken string `json:"access_token"`
	// A token to generate new API access tokens when they expire.
	RefreshToken string `json:"refresh_token"`
}

// GetAccessToken returns the value of AccessToken.
func (s *AuthenticationTokens) GetAccessToken() string {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *AuthenticationTokens) GetRefreshToken() string {
	return s.RefreshToken
}

// SetAccessToken sets the value of AccessToken.
func (s *AuthenticationTokens) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *AuthenticationTokens) SetRefreshToken(val string) {
	s.RefreshToken = val
}

func (*AuthenticationTokens) authenticateRes() {}
func (*AuthenticationTokens) refreshTokenRes() {}

type Authorization struct {
	Token string
}

// GetToken returns the value of Token.
func (s *Authorization) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *Authorization) SetToken(val string) {
	s.Token = val
}

// Represents an action item stored in the cache.
// Ref: #/components/schemas/CacheActionItem
type CacheActionItem struct {
	// The hash that uniquely identifies the artifact in the cache.
	Hash string `json:"hash"`
}

// GetHash returns the value of Hash.
func (s *CacheActionItem) GetHash() string {
	return s.Hash
}

// SetHash sets the value of Hash.
func (s *CacheActionItem) SetHash(val string) {
	s.Hash = val
}

func (*CacheActionItem) getCacheActionItemRes() {}

// The URL to download the artifact from the cache.
// Ref: #/components/schemas/CacheArtifactDownloadURL
type CacheArtifactDownloadURL struct {
	Data   CacheArtifactDownloadURLData   `json:"data"`
	Status CacheArtifactDownloadURLStatus `json:"status"`
}

// GetData returns the value of Data.
func (s *CacheArtifactDownloadURL) GetData() CacheArtifactDownloadURLData {
	return s.Data
}

// GetStatus returns the value of Status.
func (s *CacheArtifactDownloadURL) GetStatus() CacheArtifactDownloadURLStatus {
	return s.Status
}

// SetData sets the value of Data.
func (s *CacheArtifactDownloadURL) SetData(val CacheArtifactDownloadURLData) {
	s.Data = val
}

// SetStatus sets the value of Status.
func (s *CacheArtifactDownloadURL) SetStatus(val CacheArtifactDownloadURLStatus) {
	s.Status = val
}

func (*CacheArtifactDownloadURL) downloadCacheArtifactRes() {}

type CacheArtifactDownloadURLData struct {
	// The UNIX timestamp when the URL expires.
	ExpiresAt int `json:"expires_at"`
	// The URL to download the artifact from the cache.
	URL string `json:"url"`
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *CacheArtifactDownloadURLData) GetExpiresAt() int {
	return s.ExpiresAt
}

// GetURL returns the value of URL.
func (s *CacheArtifactDownloadURLData) GetURL() string {
	return s.URL
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *CacheArtifactDownloadURLData) SetExpiresAt(val int) {
	s.ExpiresAt = val
}

// SetURL sets the value of URL.
func (s *CacheArtifactDownloadURLData) SetURL(val string) {
	s.URL = val
}

type CacheArtifactDownloadURLStatus string

const (
	CacheArtifactDownloadURLStatusSuccess CacheArtifactDownloadURLStatus = "success"
)

// AllValues returns all CacheArtifactDownloadURLStatus values.
func (CacheArtifactDownloadURLStatus) AllValues() []CacheArtifactDownloadURLStatus {
	return []CacheArtifactDownloadURLStatus{
		CacheArtifactDownloadURLStatusSuccess,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CacheArtifactDownloadURLStatus) MarshalText() ([]byte, error) {
	switch s {
	case CacheArtifactDownloadURLStatusSuccess:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CacheArtifactDownloadURLStatus) UnmarshalText(data []byte) error {
	switch CacheArtifactDownloadURLStatus(data) {
	case CacheArtifactDownloadURLStatusSuccess:
		*s = CacheArtifactDownloadURLStatusSuccess
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CacheArtifactExistsForbidden Error

func (*CacheArtifactExistsForbidden) cacheArtifactExistsRes() {}

type CacheArtifactExistsNotFound struct {
	Error []CacheArtifactExistsNotFoundErrorItem `json:"error"`
}

// GetError returns the value of Error.
func (s *CacheArtifactExistsNotFound) GetError() []CacheArtifactExistsNotFoundErrorItem {
	return s.Error
}

// SetError sets the value of Error.
func (s *CacheArtifactExistsNotFound) SetError(val []CacheArtifactExistsNotFoundErrorItem) {
	s.Error = val
}

func (*CacheArtifactExistsNotFound) cacheArtifactExistsRes() {}

type CacheArtifactExistsNotFoundErrorItem struct {
	Code    OptString `json:"code"`
	Message OptString `json:"message"`
}

// GetCode returns the value of Code.
func (s *CacheArtifactExistsNotFoundErrorItem) GetCode() OptString {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *CacheArtifactExistsNotFoundErrorItem) GetMessage() OptString {
	return s.Message
}

// SetCode sets the value of Code.
func (s *CacheArtifactExistsNotFoundErrorItem) SetCode(val OptString) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *CacheArtifactExistsNotFoundErrorItem) SetMessage(val OptString) {
	s.Message = val
}

// The artifact exists in the cache and can be downloaded.
type CacheArtifactExistsOK struct {
	Data   *CacheArtifactExistsOKData     `json:"data"`
	Status OptCacheArtifactExistsOKStatus `json:"status"`
}

// GetData returns the value of Data.
func (s *CacheArtifactExistsOK) GetData() *CacheArtifactExistsOKData {
	return s.Data
}

// GetStatus returns the value of Status.
func (s *CacheArtifactExistsOK) GetStatus() OptCacheArtifactExistsOKStatus {
	return s.Status
}

// SetData sets the value of Data.
func (s *CacheArtifactExistsOK) SetData(val *CacheArtifactExistsOKData) {
	s.Data = val
}

// SetStatus sets the value of Status.
func (s *CacheArtifactExistsOK) SetStatus(val OptCacheArtifactExistsOKStatus) {
	s.Status = val
}

func (*CacheArtifactExistsOK) cacheArtifactExistsRes() {}

type CacheArtifactExistsOKData struct{}

type CacheArtifactExistsOKStatus string

const (
	CacheArtifactExistsOKStatusSuccess CacheArtifactExistsOKStatus = "success"
)

// AllValues returns all CacheArtifactExistsOKStatus values.
func (CacheArtifactExistsOKStatus) AllValues() []CacheArtifactExistsOKStatus {
	return []CacheArtifactExistsOKStatus{
		CacheArtifactExistsOKStatusSuccess,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CacheArtifactExistsOKStatus) MarshalText() ([]byte, error) {
	switch s {
	case CacheArtifactExistsOKStatusSuccess:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CacheArtifactExistsOKStatus) UnmarshalText(data []byte) error {
	switch CacheArtifactExistsOKStatus(data) {
	case CacheArtifactExistsOKStatusSuccess:
		*s = CacheArtifactExistsOKStatusSuccess
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CacheArtifactExistsPaymentRequired Error

func (*CacheArtifactExistsPaymentRequired) cacheArtifactExistsRes() {}

type CacheArtifactExistsUnauthorized Error

func (*CacheArtifactExistsUnauthorized) cacheArtifactExistsRes() {}

// The category of the cache.
// Ref: #/components/schemas/CacheCategory
type CacheCategory string

const (
	CacheCategoryTests  CacheCategory = "tests"
	CacheCategoryBuilds CacheCategory = "builds"
)

// AllValues returns all CacheCategory values.
func (CacheCategory) AllValues() []CacheCategory {
	return []CacheCategory{
		CacheCategoryTests,
		CacheCategoryBuilds,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CacheCategory) MarshalText() ([]byte, error) {
	switch s {
	case CacheCategoryTests:
		return []byte(s), nil
	case CacheCategoryBuilds:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CacheCategory) UnmarshalText(data []byte) error {
	switch CacheCategory(data) {
	case CacheCategoryTests:
		*s = CacheCategoryTests
		return nil
	case CacheCategoryBuilds:
		*s = CacheCategoryBuilds
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CleanCacheForbidden Error

func (*CleanCacheForbidden) cleanCacheRes() {}

// CleanCacheNoContent is response for CleanCache operation.
type CleanCacheNoContent struct{}

func (*CleanCacheNoContent) cleanCacheRes() {}

type CleanCacheNotFound Error

func (*CleanCacheNotFound) cleanCacheRes() {}

type CleanCacheUnauthorized Error

func (*CleanCacheUnauthorized) cleanCacheRes() {}

// The schema for the command analytics event.
// Ref: #/components/schemas/CommandEvent
type CommandEvent struct {
	// ID of the command event.
	ID float64 `json:"id"`
	// Name of the command.
	Name string `json:"name"`
	// URL to the command event.
	URL string `json:"url"`
}

// GetID returns the value of ID.
func (s *CommandEvent) GetID() float64 {
	return s.ID
}

// GetName returns the value of Name.
func (s *CommandEvent) GetName() string {
	return s.Name
}

// GetURL returns the value of URL.
func (s *CommandEvent) GetURL() string {
	return s.URL
}

// SetID sets the value of ID.
func (s *CommandEvent) SetID(val float64) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CommandEvent) SetName(val string) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *CommandEvent) SetURL(val string) {
	s.URL = val
}

func (*CommandEvent) createCommandEventRes() {}

type CommandEventArtifact jx.Raw

type CompleteAnalyticsArtifactMultipartUploadForbidden Error

func (*CompleteAnalyticsArtifactMultipartUploadForbidden) completeAnalyticsArtifactMultipartUploadRes() {
}

type CompleteAnalyticsArtifactMultipartUploadInternalServerError Error

func (*CompleteAnalyticsArtifactMultipartUploadInternalServerError) completeAnalyticsArtifactMultipartUploadRes() {
}

// CompleteAnalyticsArtifactMultipartUploadNoContent is response for CompleteAnalyticsArtifactMultipartUpload operation.
type CompleteAnalyticsArtifactMultipartUploadNoContent struct{}

func (*CompleteAnalyticsArtifactMultipartUploadNoContent) completeAnalyticsArtifactMultipartUploadRes() {
}

type CompleteAnalyticsArtifactMultipartUploadNotFound Error

func (*CompleteAnalyticsArtifactMultipartUploadNotFound) completeAnalyticsArtifactMultipartUploadRes() {
}

type CompleteAnalyticsArtifactMultipartUploadReq struct {
	CommandEventArtifact CommandEventArtifact         `json:"command_event_artifact"`
	MultipartUploadParts ArtifactMultipartUploadParts `json:"multipart_upload_parts"`
}

// GetCommandEventArtifact returns the value of CommandEventArtifact.
func (s *CompleteAnalyticsArtifactMultipartUploadReq) GetCommandEventArtifact() CommandEventArtifact {
	return s.CommandEventArtifact
}

// GetMultipartUploadParts returns the value of MultipartUploadParts.
func (s *CompleteAnalyticsArtifactMultipartUploadReq) GetMultipartUploadParts() ArtifactMultipartUploadParts {
	return s.MultipartUploadParts
}

// SetCommandEventArtifact sets the value of CommandEventArtifact.
func (s *CompleteAnalyticsArtifactMultipartUploadReq) SetCommandEventArtifact(val CommandEventArtifact) {
	s.CommandEventArtifact = val
}

// SetMultipartUploadParts sets the value of MultipartUploadParts.
func (s *CompleteAnalyticsArtifactMultipartUploadReq) SetMultipartUploadParts(val ArtifactMultipartUploadParts) {
	s.MultipartUploadParts = val
}

type CompleteAnalyticsArtifactMultipartUploadUnauthorized Error

func (*CompleteAnalyticsArtifactMultipartUploadUnauthorized) completeAnalyticsArtifactMultipartUploadRes() {
}

type CompleteAnalyticsArtifactsUploadsForbidden Error

func (*CompleteAnalyticsArtifactsUploadsForbidden) completeAnalyticsArtifactsUploadsRes() {}

// CompleteAnalyticsArtifactsUploadsNoContent is response for CompleteAnalyticsArtifactsUploads operation.
type CompleteAnalyticsArtifactsUploadsNoContent struct{}

func (*CompleteAnalyticsArtifactsUploadsNoContent) completeAnalyticsArtifactsUploadsRes() {}

type CompleteAnalyticsArtifactsUploadsNotFound Error

func (*CompleteAnalyticsArtifactsUploadsNotFound) completeAnalyticsArtifactsUploadsRes() {}

type CompleteAnalyticsArtifactsUploadsReq struct {
	// A list of modules with their metadata.
	Modules []Module `json:"modules"`
}

// GetModules returns the value of Modules.
func (s *CompleteAnalyticsArtifactsUploadsReq) GetModules() []Module {
	return s.Modules
}

// SetModules sets the value of Modules.
func (s *CompleteAnalyticsArtifactsUploadsReq) SetModules(val []Module) {
	s.Modules = val
}

type CompleteAnalyticsArtifactsUploadsUnauthorized Error

func (*CompleteAnalyticsArtifactsUploadsUnauthorized) completeAnalyticsArtifactsUploadsRes() {}

type CompleteCacheArtifactMultipartUploadForbidden Error

func (*CompleteCacheArtifactMultipartUploadForbidden) completeCacheArtifactMultipartUploadRes() {}

type CompleteCacheArtifactMultipartUploadNotFound Error

func (*CompleteCacheArtifactMultipartUploadNotFound) completeCacheArtifactMultipartUploadRes() {}

// This response confirms that the upload has been completed successfully. The cache will now be able
// to serve the artifact.
type CompleteCacheArtifactMultipartUploadOK struct {
	Data   *CompleteCacheArtifactMultipartUploadOKData     `json:"data"`
	Status OptCompleteCacheArtifactMultipartUploadOKStatus `json:"status"`
}

// GetData returns the value of Data.
func (s *CompleteCacheArtifactMultipartUploadOK) GetData() *CompleteCacheArtifactMultipartUploadOKData {
	return s.Data
}

// GetStatus returns the value of Status.
func (s *CompleteCacheArtifactMultipartUploadOK) GetStatus() OptCompleteCacheArtifactMultipartUploadOKStatus {
	return s.Status
}

// SetData sets the value of Data.
func (s *CompleteCacheArtifactMultipartUploadOK) SetData(val *CompleteCacheArtifactMultipartUploadOKData) {
	s.Data = val
}

// SetStatus sets the value of Status.
func (s *CompleteCacheArtifactMultipartUploadOK) SetStatus(val OptCompleteCacheArtifactMultipartUploadOKStatus) {
	s.Status = val
}

func (*CompleteCacheArtifactMultipartUploadOK) completeCacheArtifactMultipartUploadRes() {}

type CompleteCacheArtifactMultipartUploadOKData struct{}

type CompleteCacheArtifactMultipartUploadOKStatus string

const (
	CompleteCacheArtifactMultipartUploadOKStatusSuccess CompleteCacheArtifactMultipartUploadOKStatus = "success"
)

// AllValues returns all CompleteCacheArtifactMultipartUploadOKStatus values.
func (CompleteCacheArtifactMultipartUploadOKStatus) AllValues() []CompleteCacheArtifactMultipartUploadOKStatus {
	return []CompleteCacheArtifactMultipartUploadOKStatus{
		CompleteCacheArtifactMultipartUploadOKStatusSuccess,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CompleteCacheArtifactMultipartUploadOKStatus) MarshalText() ([]byte, error) {
	switch s {
	case CompleteCacheArtifactMultipartUploadOKStatusSuccess:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CompleteCacheArtifactMultipartUploadOKStatus) UnmarshalText(data []byte) error {
	switch CompleteCacheArtifactMultipartUploadOKStatus(data) {
	case CompleteCacheArtifactMultipartUploadOKStatusSuccess:
		*s = CompleteCacheArtifactMultipartUploadOKStatusSuccess
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CompleteCacheArtifactMultipartUploadPaymentRequired Error

func (*CompleteCacheArtifactMultipartUploadPaymentRequired) completeCacheArtifactMultipartUploadRes() {
}

type CompleteCacheArtifactMultipartUploadReq struct {
	Parts []CompleteCacheArtifactMultipartUploadReqPartsItem `json:"parts"`
}

// GetParts returns the value of Parts.
func (s *CompleteCacheArtifactMultipartUploadReq) GetParts() []CompleteCacheArtifactMultipartUploadReqPartsItem {
	return s.Parts
}

// SetParts sets the value of Parts.
func (s *CompleteCacheArtifactMultipartUploadReq) SetParts(val []CompleteCacheArtifactMultipartUploadReqPartsItem) {
	s.Parts = val
}

type CompleteCacheArtifactMultipartUploadReqPartsItem struct {
	// The ETag of the part.
	Etag OptString `json:"etag"`
	// The part number.
	PartNumber OptInt `json:"part_number"`
}

// GetEtag returns the value of Etag.
func (s *CompleteCacheArtifactMultipartUploadReqPartsItem) GetEtag() OptString {
	return s.Etag
}

// GetPartNumber returns the value of PartNumber.
func (s *CompleteCacheArtifactMultipartUploadReqPartsItem) GetPartNumber() OptInt {
	return s.PartNumber
}

// SetEtag sets the value of Etag.
func (s *CompleteCacheArtifactMultipartUploadReqPartsItem) SetEtag(val OptString) {
	s.Etag = val
}

// SetPartNumber sets the value of PartNumber.
func (s *CompleteCacheArtifactMultipartUploadReqPartsItem) SetPartNumber(val OptInt) {
	s.PartNumber = val
}

type CompleteCacheArtifactMultipartUploadUnauthorized Error

func (*CompleteCacheArtifactMultipartUploadUnauthorized) completeCacheArtifactMultipartUploadRes() {}

type CompletePreviewsMultipartUploadForbidden Error

func (*CompletePreviewsMultipartUploadForbidden) completePreviewsMultipartUploadRes() {}

type CompletePreviewsMultipartUploadNotFound Error

func (*CompletePreviewsMultipartUploadNotFound) completePreviewsMultipartUploadRes() {}

// The preview multipart upload has been completed.
type CompletePreviewsMultipartUploadOK struct {
	// The URL to download the preview.
	URL string `json:"url"`
}

// GetURL returns the value of URL.
func (s *CompletePreviewsMultipartUploadOK) GetURL() string {
	return s.URL
}

// SetURL sets the value of URL.
func (s *CompletePreviewsMultipartUploadOK) SetURL(val string) {
	s.URL = val
}

func (*CompletePreviewsMultipartUploadOK) completePreviewsMultipartUploadRes() {}

// The request body to complete the multipart upload of a preview.
type CompletePreviewsMultipartUploadReq struct {
	MultipartUploadParts ArtifactMultipartUploadParts `json:"multipart_upload_parts"`
	// The id of the preview.
	PreviewID string `json:"preview_id"`
}

// GetMultipartUploadParts returns the value of MultipartUploadParts.
func (s *CompletePreviewsMultipartUploadReq) GetMultipartUploadParts() ArtifactMultipartUploadParts {
	return s.MultipartUploadParts
}

// GetPreviewID returns the value of PreviewID.
func (s *CompletePreviewsMultipartUploadReq) GetPreviewID() string {
	return s.PreviewID
}

// SetMultipartUploadParts sets the value of MultipartUploadParts.
func (s *CompletePreviewsMultipartUploadReq) SetMultipartUploadParts(val ArtifactMultipartUploadParts) {
	s.MultipartUploadParts = val
}

// SetPreviewID sets the value of PreviewID.
func (s *CompletePreviewsMultipartUploadReq) SetPreviewID(val string) {
	s.PreviewID = val
}

type CompletePreviewsMultipartUploadUnauthorized Error

func (*CompletePreviewsMultipartUploadUnauthorized) completePreviewsMultipartUploadRes() {}

type Cookie struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *Cookie) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *Cookie) SetAPIKey(val string) {
	s.APIKey = val
}

type CreateCommandEventForbidden Error

func (*CreateCommandEventForbidden) createCommandEventRes() {}

type CreateCommandEventReq struct {
	// The client id of the command.
	ClientID string `json:"client_id"`
	// The arguments of the command.
	CommandArguments []string `json:"command_arguments"`
	// The duration of the command.
	Duration float64 `json:"duration"`
	// The error message of the command.
	ErrorMessage OptString `json:"error_message"`
	// The commit SHA.
	GitCommitSha OptString `json:"git_commit_sha"`
	// The git ref. When on CI, the value can be equal to remote reference such as `refs/pull/1234/merge`.
	GitRef OptString `json:"git_ref"`
	// The git remote URL origin.
	GitRemoteURLOrigin OptString `json:"git_remote_url_origin"`
	// Whether the command was run in a CI environment.
	IsCi bool `json:"is_ci"`
	// The version of macOS that ran the command.
	MacosVersion string `json:"macos_version"`
	// The name of the command.
	Name string `json:"name"`
	// Extra parameters.
	Params OptCreateCommandEventReqParams `json:"params"`
	// The preview identifier.
	PreviewID OptString `json:"preview_id"`
	// The status of the command.
	Status OptCreateCommandEventReqStatus `json:"status"`
	// The subcommand of the command.
	Subcommand OptString `json:"subcommand"`
	// The version of Swift that ran the command.
	SwiftVersion string `json:"swift_version"`
	// The version of Tuist that ran the command.
	TuistVersion string `json:"tuist_version"`
}

// GetClientID returns the value of ClientID.
func (s *CreateCommandEventReq) GetClientID() string {
	return s.ClientID
}

// GetCommandArguments returns the value of CommandArguments.
func (s *CreateCommandEventReq) GetCommandArguments() []string {
	return s.CommandArguments
}

// GetDuration returns the value of Duration.
func (s *CreateCommandEventReq) GetDuration() float64 {
	return s.Duration
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *CreateCommandEventReq) GetErrorMessage() OptString {
	return s.ErrorMessage
}

// GetGitCommitSha returns the value of GitCommitSha.
func (s *CreateCommandEventReq) GetGitCommitSha() OptString {
	return s.GitCommitSha
}

// GetGitRef returns the value of GitRef.
func (s *CreateCommandEventReq) GetGitRef() OptString {
	return s.GitRef
}

// GetGitRemoteURLOrigin returns the value of GitRemoteURLOrigin.
func (s *CreateCommandEventReq) GetGitRemoteURLOrigin() OptString {
	return s.GitRemoteURLOrigin
}

// GetIsCi returns the value of IsCi.
func (s *CreateCommandEventReq) GetIsCi() bool {
	return s.IsCi
}

// GetMacosVersion returns the value of MacosVersion.
func (s *CreateCommandEventReq) GetMacosVersion() string {
	return s.MacosVersion
}

// GetName returns the value of Name.
func (s *CreateCommandEventReq) GetName() string {
	return s.Name
}

// GetParams returns the value of Params.
func (s *CreateCommandEventReq) GetParams() OptCreateCommandEventReqParams {
	return s.Params
}

// GetPreviewID returns the value of PreviewID.
func (s *CreateCommandEventReq) GetPreviewID() OptString {
	return s.PreviewID
}

// GetStatus returns the value of Status.
func (s *CreateCommandEventReq) GetStatus() OptCreateCommandEventReqStatus {
	return s.Status
}

// GetSubcommand returns the value of Subcommand.
func (s *CreateCommandEventReq) GetSubcommand() OptString {
	return s.Subcommand
}

// GetSwiftVersion returns the value of SwiftVersion.
func (s *CreateCommandEventReq) GetSwiftVersion() string {
	return s.SwiftVersion
}

// GetTuistVersion returns the value of TuistVersion.
func (s *CreateCommandEventReq) GetTuistVersion() string {
	return s.TuistVersion
}

// SetClientID sets the value of ClientID.
func (s *CreateCommandEventReq) SetClientID(val string) {
	s.ClientID = val
}

// SetCommandArguments sets the value of CommandArguments.
func (s *CreateCommandEventReq) SetCommandArguments(val []string) {
	s.CommandArguments = val
}

// SetDuration sets the value of Duration.
func (s *CreateCommandEventReq) SetDuration(val float64) {
	s.Duration = val
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *CreateCommandEventReq) SetErrorMessage(val OptString) {
	s.ErrorMessage = val
}

// SetGitCommitSha sets the value of GitCommitSha.
func (s *CreateCommandEventReq) SetGitCommitSha(val OptString) {
	s.GitCommitSha = val
}

// SetGitRef sets the value of GitRef.
func (s *CreateCommandEventReq) SetGitRef(val OptString) {
	s.GitRef = val
}

// SetGitRemoteURLOrigin sets the value of GitRemoteURLOrigin.
func (s *CreateCommandEventReq) SetGitRemoteURLOrigin(val OptString) {
	s.GitRemoteURLOrigin = val
}

// SetIsCi sets the value of IsCi.
func (s *CreateCommandEventReq) SetIsCi(val bool) {
	s.IsCi = val
}

// SetMacosVersion sets the value of MacosVersion.
func (s *CreateCommandEventReq) SetMacosVersion(val string) {
	s.MacosVersion = val
}

// SetName sets the value of Name.
func (s *CreateCommandEventReq) SetName(val string) {
	s.Name = val
}

// SetParams sets the value of Params.
func (s *CreateCommandEventReq) SetParams(val OptCreateCommandEventReqParams) {
	s.Params = val
}

// SetPreviewID sets the value of PreviewID.
func (s *CreateCommandEventReq) SetPreviewID(val OptString) {
	s.PreviewID = val
}

// SetStatus sets the value of Status.
func (s *CreateCommandEventReq) SetStatus(val OptCreateCommandEventReqStatus) {
	s.Status = val
}

// SetSubcommand sets the value of Subcommand.
func (s *CreateCommandEventReq) SetSubcommand(val OptString) {
	s.Subcommand = val
}

// SetSwiftVersion sets the value of SwiftVersion.
func (s *CreateCommandEventReq) SetSwiftVersion(val string) {
	s.SwiftVersion = val
}

// SetTuistVersion sets the value of TuistVersion.
func (s *CreateCommandEventReq) SetTuistVersion(val string) {
	s.TuistVersion = val
}

// Extra parameters.
type CreateCommandEventReqParams struct {
	// A list of cacheable targets.
	CacheableTargets []string `json:"cacheable_targets"`
	// A list of local cache target hits.
	LocalCacheTargetHits []string `json:"local_cache_target_hits"`
	// A list of local targets whose tests were skipped.
	LocalTestTargetHits []string `json:"local_test_target_hits"`
	// A list of remote cache target hits.
	RemoteCacheTargetHits []string `json:"remote_cache_target_hits"`
	// A list of remote targets whose tests were skipped.
	RemoteTestTargetHits []string `json:"remote_test_target_hits"`
	// The list of targets that were tested.
	TestTargets []string `json:"test_targets"`
}

// GetCacheableTargets returns the value of CacheableTargets.
func (s *CreateCommandEventReqParams) GetCacheableTargets() []string {
	return s.CacheableTargets
}

// GetLocalCacheTargetHits returns the value of LocalCacheTargetHits.
func (s *CreateCommandEventReqParams) GetLocalCacheTargetHits() []string {
	return s.LocalCacheTargetHits
}

// GetLocalTestTargetHits returns the value of LocalTestTargetHits.
func (s *CreateCommandEventReqParams) GetLocalTestTargetHits() []string {
	return s.LocalTestTargetHits
}

// GetRemoteCacheTargetHits returns the value of RemoteCacheTargetHits.
func (s *CreateCommandEventReqParams) GetRemoteCacheTargetHits() []string {
	return s.RemoteCacheTargetHits
}

// GetRemoteTestTargetHits returns the value of RemoteTestTargetHits.
func (s *CreateCommandEventReqParams) GetRemoteTestTargetHits() []string {
	return s.RemoteTestTargetHits
}

// GetTestTargets returns the value of TestTargets.
func (s *CreateCommandEventReqParams) GetTestTargets() []string {
	return s.TestTargets
}

// SetCacheableTargets sets the value of CacheableTargets.
func (s *CreateCommandEventReqParams) SetCacheableTargets(val []string) {
	s.CacheableTargets = val
}

// SetLocalCacheTargetHits sets the value of LocalCacheTargetHits.
func (s *CreateCommandEventReqParams) SetLocalCacheTargetHits(val []string) {
	s.LocalCacheTargetHits = val
}

// SetLocalTestTargetHits sets the value of LocalTestTargetHits.
func (s *CreateCommandEventReqParams) SetLocalTestTargetHits(val []string) {
	s.LocalTestTargetHits = val
}

// SetRemoteCacheTargetHits sets the value of RemoteCacheTargetHits.
func (s *CreateCommandEventReqParams) SetRemoteCacheTargetHits(val []string) {
	s.RemoteCacheTargetHits = val
}

// SetRemoteTestTargetHits sets the value of RemoteTestTargetHits.
func (s *CreateCommandEventReqParams) SetRemoteTestTargetHits(val []string) {
	s.RemoteTestTargetHits = val
}

// SetTestTargets sets the value of TestTargets.
func (s *CreateCommandEventReqParams) SetTestTargets(val []string) {
	s.TestTargets = val
}

// The status of the command.
type CreateCommandEventReqStatus string

const (
	CreateCommandEventReqStatusSuccess CreateCommandEventReqStatus = "success"
	CreateCommandEventReqStatusFailure CreateCommandEventReqStatus = "failure"
)

// AllValues returns all CreateCommandEventReqStatus values.
func (CreateCommandEventReqStatus) AllValues() []CreateCommandEventReqStatus {
	return []CreateCommandEventReqStatus{
		CreateCommandEventReqStatusSuccess,
		CreateCommandEventReqStatusFailure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateCommandEventReqStatus) MarshalText() ([]byte, error) {
	switch s {
	case CreateCommandEventReqStatusSuccess:
		return []byte(s), nil
	case CreateCommandEventReqStatusFailure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateCommandEventReqStatus) UnmarshalText(data []byte) error {
	switch CreateCommandEventReqStatus(data) {
	case CreateCommandEventReqStatusSuccess:
		*s = CreateCommandEventReqStatusSuccess
		return nil
	case CreateCommandEventReqStatusFailure:
		*s = CreateCommandEventReqStatusFailure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateCommandEventUnauthorized Error

func (*CreateCommandEventUnauthorized) createCommandEventRes() {}

type CreateInvitationBadRequest Error

func (*CreateInvitationBadRequest) createInvitationRes() {}

type CreateInvitationForbidden Error

func (*CreateInvitationForbidden) createInvitationRes() {}

type CreateInvitationNotFound Error

func (*CreateInvitationNotFound) createInvitationRes() {}

type CreateInvitationReq struct {
	// The email of the invitee.
	InviteeEmail string `json:"invitee_email"`
}

// GetInviteeEmail returns the value of InviteeEmail.
func (s *CreateInvitationReq) GetInviteeEmail() string {
	return s.InviteeEmail
}

// SetInviteeEmail sets the value of InviteeEmail.
func (s *CreateInvitationReq) SetInviteeEmail(val string) {
	s.InviteeEmail = val
}

type CreateInvitationUnauthorized Error

func (*CreateInvitationUnauthorized) createInvitationRes() {}

type CreateOrganizationReq struct {
	// The name of the organization that should be created.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *CreateOrganizationReq) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *CreateOrganizationReq) SetName(val string) {
	s.Name = val
}

type CreateProjectBadRequest Error

func (*CreateProjectBadRequest) createProjectRes() {}

type CreateProjectForbidden Error

func (*CreateProjectForbidden) createProjectRes() {}

type CreateProjectReq struct {
	// The full handle of the project that should be created.
	FullHandle OptString `json:"full_handle"`
	// The name of the project that should be created.
	//
	// Deprecated: schema marks this property as deprecated.
	Name OptString `json:"name"`
	// Organization to create the project with. If not specified, the project will be created with the
	// current user's personal account.
	//
	// Deprecated: schema marks this property as deprecated.
	Organization OptString `json:"organization"`
}

// GetFullHandle returns the value of FullHandle.
func (s *CreateProjectReq) GetFullHandle() OptString {
	return s.FullHandle
}

// GetName returns the value of Name.
func (s *CreateProjectReq) GetName() OptString {
	return s.Name
}

// GetOrganization returns the value of Organization.
func (s *CreateProjectReq) GetOrganization() OptString {
	return s.Organization
}

// SetFullHandle sets the value of FullHandle.
func (s *CreateProjectReq) SetFullHandle(val OptString) {
	s.FullHandle = val
}

// SetName sets the value of Name.
func (s *CreateProjectReq) SetName(val OptString) {
	s.Name = val
}

// SetOrganization sets the value of Organization.
func (s *CreateProjectReq) SetOrganization(val OptString) {
	s.Organization = val
}

type CreateProjectTokenForbidden Error

func (*CreateProjectTokenForbidden) createProjectTokenRes() {}

type CreateProjectTokenNotFound Error

func (*CreateProjectTokenNotFound) createProjectTokenRes() {}

// A new project token.
type CreateProjectTokenOK struct {
	// The generated project token.
	Token string `json:"token"`
}

// GetToken returns the value of Token.
func (s *CreateProjectTokenOK) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *CreateProjectTokenOK) SetToken(val string) {
	s.Token = val
}

func (*CreateProjectTokenOK) createProjectTokenRes() {}

type CreateProjectTokenUnauthorized Error

func (*CreateProjectTokenUnauthorized) createProjectTokenRes() {}

type CreateProjectUnauthorized Error

func (*CreateProjectUnauthorized) createProjectRes() {}

type DeleteOrganizationForbidden Error

func (*DeleteOrganizationForbidden) deleteOrganizationRes() {}

// DeleteOrganizationNoContent is response for DeleteOrganization operation.
type DeleteOrganizationNoContent struct{}

func (*DeleteOrganizationNoContent) deleteOrganizationRes() {}

type DeleteOrganizationNotFound Error

func (*DeleteOrganizationNotFound) deleteOrganizationRes() {}

type DeleteOrganizationUnauthorized Error

func (*DeleteOrganizationUnauthorized) deleteOrganizationRes() {}

type DeleteProjectForbidden Error

func (*DeleteProjectForbidden) deleteProjectRes() {}

// DeleteProjectNoContent is response for DeleteProject operation.
type DeleteProjectNoContent struct{}

func (*DeleteProjectNoContent) deleteProjectRes() {}

type DeleteProjectNotFound Error

func (*DeleteProjectNotFound) deleteProjectRes() {}

type DeleteProjectUnauthorized Error

func (*DeleteProjectUnauthorized) deleteProjectRes() {}

type DownloadCacheArtifactForbidden Error

func (*DownloadCacheArtifactForbidden) downloadCacheArtifactRes() {}

type DownloadCacheArtifactNotFound Error

func (*DownloadCacheArtifactNotFound) downloadCacheArtifactRes() {}

type DownloadCacheArtifactPaymentRequired Error

func (*DownloadCacheArtifactPaymentRequired) downloadCacheArtifactRes() {}

type DownloadCacheArtifactUnauthorized Error

func (*DownloadCacheArtifactUnauthorized) downloadCacheArtifactRes() {}

type DownloadPreviewForbidden Error

func (*DownloadPreviewForbidden) downloadPreviewRes() {}

type DownloadPreviewNotFound Error

func (*DownloadPreviewNotFound) downloadPreviewRes() {}

type DownloadPreviewUnauthorized Error

func (*DownloadPreviewUnauthorized) downloadPreviewRes() {}

// Ref: #/components/schemas/Error
type Error struct {
	// The error message.
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

func (*Error) authenticateRes()       {}
func (*Error) createOrganizationRes() {}
func (*Error) getDeviceCodeRes()      {}
func (*Error) listProjectsRes()       {}
func (*Error) refreshTokenRes()       {}

type GenerateAnalyticsArtifactMultipartUploadURLForbidden Error

func (*GenerateAnalyticsArtifactMultipartUploadURLForbidden) generateAnalyticsArtifactMultipartUploadURLRes() {
}

type GenerateAnalyticsArtifactMultipartUploadURLNotFound Error

func (*GenerateAnalyticsArtifactMultipartUploadURLNotFound) generateAnalyticsArtifactMultipartUploadURLRes() {
}

type GenerateAnalyticsArtifactMultipartUploadURLReq struct {
	CommandEventArtifact CommandEventArtifact        `json:"command_event_artifact"`
	MultipartUploadPart  ArtifactMultipartUploadPart `json:"multipart_upload_part"`
}

// GetCommandEventArtifact returns the value of CommandEventArtifact.
func (s *GenerateAnalyticsArtifactMultipartUploadURLReq) GetCommandEventArtifact() CommandEventArtifact {
	return s.CommandEventArtifact
}

// GetMultipartUploadPart returns the value of MultipartUploadPart.
func (s *GenerateAnalyticsArtifactMultipartUploadURLReq) GetMultipartUploadPart() ArtifactMultipartUploadPart {
	return s.MultipartUploadPart
}

// SetCommandEventArtifact sets the value of CommandEventArtifact.
func (s *GenerateAnalyticsArtifactMultipartUploadURLReq) SetCommandEventArtifact(val CommandEventArtifact) {
	s.CommandEventArtifact = val
}

// SetMultipartUploadPart sets the value of MultipartUploadPart.
func (s *GenerateAnalyticsArtifactMultipartUploadURLReq) SetMultipartUploadPart(val ArtifactMultipartUploadPart) {
	s.MultipartUploadPart = val
}

type GenerateAnalyticsArtifactMultipartUploadURLUnauthorized Error

func (*GenerateAnalyticsArtifactMultipartUploadURLUnauthorized) generateAnalyticsArtifactMultipartUploadURLRes() {
}

type GenerateCacheArtifactMultipartUploadURLForbidden Error

func (*GenerateCacheArtifactMultipartUploadURLForbidden) generateCacheArtifactMultipartUploadURLRes() {
}

type GenerateCacheArtifactMultipartUploadURLNotFound Error

func (*GenerateCacheArtifactMultipartUploadURLNotFound) generateCacheArtifactMultipartUploadURLRes() {
}

type GenerateCacheArtifactMultipartUploadURLPaymentRequired Error

func (*GenerateCacheArtifactMultipartUploadURLPaymentRequired) generateCacheArtifactMultipartUploadURLRes() {
}

type GenerateCacheArtifactMultipartUploadURLUnauthorized Error

func (*GenerateCacheArtifactMultipartUploadURLUnauthorized) generateCacheArtifactMultipartUploadURLRes() {
}

type GeneratePreviewsMultipartUploadURLForbidden Error

func (*GeneratePreviewsMultipartUploadURLForbidden) generatePreviewsMultipartUploadURLRes() {}

type GeneratePreviewsMultipartUploadURLNotFound Error

func (*GeneratePreviewsMultipartUploadURLNotFound) generatePreviewsMultipartUploadURLRes() {}

type GeneratePreviewsMultipartUploadURLReq struct {
	MultipartUploadPart ArtifactMultipartUploadPart `json:"multipart_upload_part"`
	// The id of the preview.
	PreviewID string `json:"preview_id"`
}

// GetMultipartUploadPart returns the value of MultipartUploadPart.
func (s *GeneratePreviewsMultipartUploadURLReq) GetMultipartUploadPart() ArtifactMultipartUploadPart {
	return s.MultipartUploadPart
}

// GetPreviewID returns the value of PreviewID.
func (s *GeneratePreviewsMultipartUploadURLReq) GetPreviewID() string {
	return s.PreviewID
}

// SetMultipartUploadPart sets the value of MultipartUploadPart.
func (s *GeneratePreviewsMultipartUploadURLReq) SetMultipartUploadPart(val ArtifactMultipartUploadPart) {
	s.MultipartUploadPart = val
}

// SetPreviewID sets the value of PreviewID.
func (s *GeneratePreviewsMultipartUploadURLReq) SetPreviewID(val string) {
	s.PreviewID = val
}

type GeneratePreviewsMultipartUploadURLUnauthorized Error

func (*GeneratePreviewsMultipartUploadURLUnauthorized) generatePreviewsMultipartUploadURLRes() {}

type GetCacheActionItemForbidden Error

func (*GetCacheActionItemForbidden) getCacheActionItemRes() {}

type GetCacheActionItemNotFound Error

func (*GetCacheActionItemNotFound) getCacheActionItemRes() {}

type GetCacheActionItemPaymentRequired Error

func (*GetCacheActionItemPaymentRequired) getCacheActionItemRes() {}

type GetCacheActionItemUnauthorized Error

func (*GetCacheActionItemUnauthorized) getCacheActionItemRes() {}

type GetDeviceCodeAccepted struct{}

func (*GetDeviceCodeAccepted) getDeviceCodeRes() {}

// Token to authenticate the user with.
type GetDeviceCodeOK struct {
	// A short-lived token to authenticate API requests as user.
	AccessToken OptString `json:"access_token"`
	// A token to generate new access tokens when they expire.
	RefreshToken OptString `json:"refresh_token"`
	// User authentication token.
	//
	// Deprecated: schema marks this property as deprecated.
	Token OptString `json:"token"`
}

// GetAccessToken returns the value of AccessToken.
func (s *GetDeviceCodeOK) GetAccessToken() OptString {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *GetDeviceCodeOK) GetRefreshToken() OptString {
	return s.RefreshToken
}

// GetToken returns the value of Token.
func (s *GetDeviceCodeOK) GetToken() OptString {
	return s.Token
}

// SetAccessToken sets the value of AccessToken.
func (s *GetDeviceCodeOK) SetAccessToken(val OptString) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *GetDeviceCodeOK) SetRefreshToken(val OptString) {
	s.RefreshToken = val
}

// SetToken sets the value of Token.
func (s *GetDeviceCodeOK) SetToken(val OptString) {
	s.Token = val
}

func (*GetDeviceCodeOK) getDeviceCodeRes() {}

// Ref: #/components/schemas/Invitation
type Invitation struct {
	// The invitation's unique identifier.
	ID float64 `json:"id"`
	// The email of the invitee.
	InviteeEmail string `json:"invitee_email"`
	Inviter      User   `json:"inviter"`
	// The id of the organization the invitee is invited to.
	OrganizationID float64 `json:"organization_id"`
	// The token to accept the invitation.
	Token string `json:"token"`
}

// GetID returns the value of ID.
func (s *Invitation) GetID() float64 {
	return s.ID
}

// GetInviteeEmail returns the value of InviteeEmail.
func (s *Invitation) GetInviteeEmail() string {
	return s.InviteeEmail
}

// GetInviter returns the value of Inviter.
func (s *Invitation) GetInviter() User {
	return s.Inviter
}

// GetOrganizationID returns the value of OrganizationID.
func (s *Invitation) GetOrganizationID() float64 {
	return s.OrganizationID
}

// GetToken returns the value of Token.
func (s *Invitation) GetToken() string {
	return s.Token
}

// SetID sets the value of ID.
func (s *Invitation) SetID(val float64) {
	s.ID = val
}

// SetInviteeEmail sets the value of InviteeEmail.
func (s *Invitation) SetInviteeEmail(val string) {
	s.InviteeEmail = val
}

// SetInviter sets the value of Inviter.
func (s *Invitation) SetInviter(val User) {
	s.Inviter = val
}

// SetOrganizationID sets the value of OrganizationID.
func (s *Invitation) SetOrganizationID(val float64) {
	s.OrganizationID = val
}

// SetToken sets the value of Token.
func (s *Invitation) SetToken(val string) {
	s.Token = val
}

func (*Invitation) createInvitationRes() {}

type ListOrganizationsForbidden Error

func (*ListOrganizationsForbidden) listOrganizationsRes() {}

// The list of organizations the authenticated subject is part of.
type ListOrganizationsOK struct {
	Organizations []Organization `json:"organizations"`
}

// GetOrganizations returns the value of Organizations.
func (s *ListOrganizationsOK) GetOrganizations() []Organization {
	return s.Organizations
}

// SetOrganizations sets the value of Organizations.
func (s *ListOrganizationsOK) SetOrganizations(val []Organization) {
	s.Organizations = val
}

func (*ListOrganizationsOK) listOrganizationsRes() {}

type ListOrganizationsUnauthorized Error

func (*ListOrganizationsUnauthorized) listOrganizationsRes() {}

type ListProjectTokensForbidden Error

func (*ListProjectTokensForbidden) listProjectTokensRes() {}

type ListProjectTokensNotFound Error

func (*ListProjectTokensNotFound) listProjectTokensRes() {}

// A list of project tokens.
type ListProjectTokensOK struct {
	Tokens []ProjectToken `json:"tokens"`
}

// GetTokens returns the value of Tokens.
func (s *ListProjectTokensOK) GetTokens() []ProjectToken {
	return s.Tokens
}

// SetTokens sets the value of Tokens.
func (s *ListProjectTokensOK) SetTokens(val []ProjectToken) {
	s.Tokens = val
}

func (*ListProjectTokensOK) listProjectTokensRes() {}

type ListProjectTokensUnauthorized Error

func (*ListProjectTokensUnauthorized) listProjectTokensRes() {}

type ListProjectsOK struct {
	Projects []Project `json:"projects"`
}

// GetProjects returns the value of Projects.
func (s *ListProjectsOK) GetProjects() []Project {
	return s.Projects
}

// SetProjects sets the value of Projects.
func (s *ListProjectsOK) SetProjects(val []Project) {
	s.Projects = val
}

func (*ListProjectsOK) listProjectsRes() {}

// Ref: #/components/schemas/Module
type Module struct {
	// A hash that represents the module.
	Hash string `json:"hash"`
	// A name of the module.
	Name string `json:"name"`
	// Project's relative path from the root of the repository.
	ProjectIdentifier string `json:"project_identifier"`
}

// GetHash returns the value of Hash.
func (s *Module) GetHash() string {
	return s.Hash
}

// GetName returns the value of Name.
func (s *Module) GetName() string {
	return s.Name
}

// GetProjectIdentifier returns the value of ProjectIdentifier.
func (s *Module) GetProjectIdentifier() string {
	return s.ProjectIdentifier
}

// SetHash sets the value of Hash.
func (s *Module) SetHash(val string) {
	s.Hash = val
}

// SetName sets the value of Name.
func (s *Module) SetName(val string) {
	s.Name = val
}

// SetProjectIdentifier sets the value of ProjectIdentifier.
func (s *Module) SetProjectIdentifier(val string) {
	s.ProjectIdentifier = val
}

// NewOptAuthenticateReq returns new OptAuthenticateReq with value set to v.
func NewOptAuthenticateReq(v AuthenticateReq) OptAuthenticateReq {
	return OptAuthenticateReq{
		Value: v,
		Set:   true,
	}
}

// OptAuthenticateReq is optional AuthenticateReq.
type OptAuthenticateReq struct {
	Value AuthenticateReq
	Set   bool
}

// IsSet returns true if OptAuthenticateReq was set.
func (o OptAuthenticateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthenticateReq) Reset() {
	var v AuthenticateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthenticateReq) SetTo(v AuthenticateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthenticateReq) Get() (v AuthenticateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthenticateReq) Or(d AuthenticateReq) AuthenticateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCacheArtifactExistsOKStatus returns new OptCacheArtifactExistsOKStatus with value set to v.
func NewOptCacheArtifactExistsOKStatus(v CacheArtifactExistsOKStatus) OptCacheArtifactExistsOKStatus {
	return OptCacheArtifactExistsOKStatus{
		Value: v,
		Set:   true,
	}
}

// OptCacheArtifactExistsOKStatus is optional CacheArtifactExistsOKStatus.
type OptCacheArtifactExistsOKStatus struct {
	Value CacheArtifactExistsOKStatus
	Set   bool
}

// IsSet returns true if OptCacheArtifactExistsOKStatus was set.
func (o OptCacheArtifactExistsOKStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCacheArtifactExistsOKStatus) Reset() {
	var v CacheArtifactExistsOKStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCacheArtifactExistsOKStatus) SetTo(v CacheArtifactExistsOKStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCacheArtifactExistsOKStatus) Get() (v CacheArtifactExistsOKStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCacheArtifactExistsOKStatus) Or(d CacheArtifactExistsOKStatus) CacheArtifactExistsOKStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCacheCategory returns new OptCacheCategory with value set to v.
func NewOptCacheCategory(v CacheCategory) OptCacheCategory {
	return OptCacheCategory{
		Value: v,
		Set:   true,
	}
}

// OptCacheCategory is optional CacheCategory.
type OptCacheCategory struct {
	Value CacheCategory
	Set   bool
}

// IsSet returns true if OptCacheCategory was set.
func (o OptCacheCategory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCacheCategory) Reset() {
	var v CacheCategory
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCacheCategory) SetTo(v CacheCategory) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCacheCategory) Get() (v CacheCategory, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCacheCategory) Or(d CacheCategory) CacheCategory {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCompleteAnalyticsArtifactMultipartUploadReq returns new OptCompleteAnalyticsArtifactMultipartUploadReq with value set to v.
func NewOptCompleteAnalyticsArtifactMultipartUploadReq(v CompleteAnalyticsArtifactMultipartUploadReq) OptCompleteAnalyticsArtifactMultipartUploadReq {
	return OptCompleteAnalyticsArtifactMultipartUploadReq{
		Value: v,
		Set:   true,
	}
}

// OptCompleteAnalyticsArtifactMultipartUploadReq is optional CompleteAnalyticsArtifactMultipartUploadReq.
type OptCompleteAnalyticsArtifactMultipartUploadReq struct {
	Value CompleteAnalyticsArtifactMultipartUploadReq
	Set   bool
}

// IsSet returns true if OptCompleteAnalyticsArtifactMultipartUploadReq was set.
func (o OptCompleteAnalyticsArtifactMultipartUploadReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCompleteAnalyticsArtifactMultipartUploadReq) Reset() {
	var v CompleteAnalyticsArtifactMultipartUploadReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCompleteAnalyticsArtifactMultipartUploadReq) SetTo(v CompleteAnalyticsArtifactMultipartUploadReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCompleteAnalyticsArtifactMultipartUploadReq) Get() (v CompleteAnalyticsArtifactMultipartUploadReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCompleteAnalyticsArtifactMultipartUploadReq) Or(d CompleteAnalyticsArtifactMultipartUploadReq) CompleteAnalyticsArtifactMultipartUploadReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCompleteAnalyticsArtifactsUploadsReq returns new OptCompleteAnalyticsArtifactsUploadsReq with value set to v.
func NewOptCompleteAnalyticsArtifactsUploadsReq(v CompleteAnalyticsArtifactsUploadsReq) OptCompleteAnalyticsArtifactsUploadsReq {
	return OptCompleteAnalyticsArtifactsUploadsReq{
		Value: v,
		Set:   true,
	}
}

// OptCompleteAnalyticsArtifactsUploadsReq is optional CompleteAnalyticsArtifactsUploadsReq.
type OptCompleteAnalyticsArtifactsUploadsReq struct {
	Value CompleteAnalyticsArtifactsUploadsReq
	Set   bool
}

// IsSet returns true if OptCompleteAnalyticsArtifactsUploadsReq was set.
func (o OptCompleteAnalyticsArtifactsUploadsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCompleteAnalyticsArtifactsUploadsReq) Reset() {
	var v CompleteAnalyticsArtifactsUploadsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCompleteAnalyticsArtifactsUploadsReq) SetTo(v CompleteAnalyticsArtifactsUploadsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCompleteAnalyticsArtifactsUploadsReq) Get() (v CompleteAnalyticsArtifactsUploadsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCompleteAnalyticsArtifactsUploadsReq) Or(d CompleteAnalyticsArtifactsUploadsReq) CompleteAnalyticsArtifactsUploadsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCompleteCacheArtifactMultipartUploadOKStatus returns new OptCompleteCacheArtifactMultipartUploadOKStatus with value set to v.
func NewOptCompleteCacheArtifactMultipartUploadOKStatus(v CompleteCacheArtifactMultipartUploadOKStatus) OptCompleteCacheArtifactMultipartUploadOKStatus {
	return OptCompleteCacheArtifactMultipartUploadOKStatus{
		Value: v,
		Set:   true,
	}
}

// OptCompleteCacheArtifactMultipartUploadOKStatus is optional CompleteCacheArtifactMultipartUploadOKStatus.
type OptCompleteCacheArtifactMultipartUploadOKStatus struct {
	Value CompleteCacheArtifactMultipartUploadOKStatus
	Set   bool
}

// IsSet returns true if OptCompleteCacheArtifactMultipartUploadOKStatus was set.
func (o OptCompleteCacheArtifactMultipartUploadOKStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCompleteCacheArtifactMultipartUploadOKStatus) Reset() {
	var v CompleteCacheArtifactMultipartUploadOKStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCompleteCacheArtifactMultipartUploadOKStatus) SetTo(v CompleteCacheArtifactMultipartUploadOKStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCompleteCacheArtifactMultipartUploadOKStatus) Get() (v CompleteCacheArtifactMultipartUploadOKStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCompleteCacheArtifactMultipartUploadOKStatus) Or(d CompleteCacheArtifactMultipartUploadOKStatus) CompleteCacheArtifactMultipartUploadOKStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCompleteCacheArtifactMultipartUploadReq returns new OptCompleteCacheArtifactMultipartUploadReq with value set to v.
func NewOptCompleteCacheArtifactMultipartUploadReq(v CompleteCacheArtifactMultipartUploadReq) OptCompleteCacheArtifactMultipartUploadReq {
	return OptCompleteCacheArtifactMultipartUploadReq{
		Value: v,
		Set:   true,
	}
}

// OptCompleteCacheArtifactMultipartUploadReq is optional CompleteCacheArtifactMultipartUploadReq.
type OptCompleteCacheArtifactMultipartUploadReq struct {
	Value CompleteCacheArtifactMultipartUploadReq
	Set   bool
}

// IsSet returns true if OptCompleteCacheArtifactMultipartUploadReq was set.
func (o OptCompleteCacheArtifactMultipartUploadReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCompleteCacheArtifactMultipartUploadReq) Reset() {
	var v CompleteCacheArtifactMultipartUploadReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCompleteCacheArtifactMultipartUploadReq) SetTo(v CompleteCacheArtifactMultipartUploadReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCompleteCacheArtifactMultipartUploadReq) Get() (v CompleteCacheArtifactMultipartUploadReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCompleteCacheArtifactMultipartUploadReq) Or(d CompleteCacheArtifactMultipartUploadReq) CompleteCacheArtifactMultipartUploadReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCompletePreviewsMultipartUploadReq returns new OptCompletePreviewsMultipartUploadReq with value set to v.
func NewOptCompletePreviewsMultipartUploadReq(v CompletePreviewsMultipartUploadReq) OptCompletePreviewsMultipartUploadReq {
	return OptCompletePreviewsMultipartUploadReq{
		Value: v,
		Set:   true,
	}
}

// OptCompletePreviewsMultipartUploadReq is optional CompletePreviewsMultipartUploadReq.
type OptCompletePreviewsMultipartUploadReq struct {
	Value CompletePreviewsMultipartUploadReq
	Set   bool
}

// IsSet returns true if OptCompletePreviewsMultipartUploadReq was set.
func (o OptCompletePreviewsMultipartUploadReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCompletePreviewsMultipartUploadReq) Reset() {
	var v CompletePreviewsMultipartUploadReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCompletePreviewsMultipartUploadReq) SetTo(v CompletePreviewsMultipartUploadReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCompletePreviewsMultipartUploadReq) Get() (v CompletePreviewsMultipartUploadReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCompletePreviewsMultipartUploadReq) Or(d CompletePreviewsMultipartUploadReq) CompletePreviewsMultipartUploadReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateCommandEventReq returns new OptCreateCommandEventReq with value set to v.
func NewOptCreateCommandEventReq(v CreateCommandEventReq) OptCreateCommandEventReq {
	return OptCreateCommandEventReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateCommandEventReq is optional CreateCommandEventReq.
type OptCreateCommandEventReq struct {
	Value CreateCommandEventReq
	Set   bool
}

// IsSet returns true if OptCreateCommandEventReq was set.
func (o OptCreateCommandEventReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateCommandEventReq) Reset() {
	var v CreateCommandEventReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateCommandEventReq) SetTo(v CreateCommandEventReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateCommandEventReq) Get() (v CreateCommandEventReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateCommandEventReq) Or(d CreateCommandEventReq) CreateCommandEventReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateCommandEventReqParams returns new OptCreateCommandEventReqParams with value set to v.
func NewOptCreateCommandEventReqParams(v CreateCommandEventReqParams) OptCreateCommandEventReqParams {
	return OptCreateCommandEventReqParams{
		Value: v,
		Set:   true,
	}
}

// OptCreateCommandEventReqParams is optional CreateCommandEventReqParams.
type OptCreateCommandEventReqParams struct {
	Value CreateCommandEventReqParams
	Set   bool
}

// IsSet returns true if OptCreateCommandEventReqParams was set.
func (o OptCreateCommandEventReqParams) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateCommandEventReqParams) Reset() {
	var v CreateCommandEventReqParams
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateCommandEventReqParams) SetTo(v CreateCommandEventReqParams) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateCommandEventReqParams) Get() (v CreateCommandEventReqParams, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateCommandEventReqParams) Or(d CreateCommandEventReqParams) CreateCommandEventReqParams {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateCommandEventReqStatus returns new OptCreateCommandEventReqStatus with value set to v.
func NewOptCreateCommandEventReqStatus(v CreateCommandEventReqStatus) OptCreateCommandEventReqStatus {
	return OptCreateCommandEventReqStatus{
		Value: v,
		Set:   true,
	}
}

// OptCreateCommandEventReqStatus is optional CreateCommandEventReqStatus.
type OptCreateCommandEventReqStatus struct {
	Value CreateCommandEventReqStatus
	Set   bool
}

// IsSet returns true if OptCreateCommandEventReqStatus was set.
func (o OptCreateCommandEventReqStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateCommandEventReqStatus) Reset() {
	var v CreateCommandEventReqStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateCommandEventReqStatus) SetTo(v CreateCommandEventReqStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateCommandEventReqStatus) Get() (v CreateCommandEventReqStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateCommandEventReqStatus) Or(d CreateCommandEventReqStatus) CreateCommandEventReqStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateInvitationReq returns new OptCreateInvitationReq with value set to v.
func NewOptCreateInvitationReq(v CreateInvitationReq) OptCreateInvitationReq {
	return OptCreateInvitationReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateInvitationReq is optional CreateInvitationReq.
type OptCreateInvitationReq struct {
	Value CreateInvitationReq
	Set   bool
}

// IsSet returns true if OptCreateInvitationReq was set.
func (o OptCreateInvitationReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateInvitationReq) Reset() {
	var v CreateInvitationReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateInvitationReq) SetTo(v CreateInvitationReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateInvitationReq) Get() (v CreateInvitationReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateInvitationReq) Or(d CreateInvitationReq) CreateInvitationReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateOrganizationReq returns new OptCreateOrganizationReq with value set to v.
func NewOptCreateOrganizationReq(v CreateOrganizationReq) OptCreateOrganizationReq {
	return OptCreateOrganizationReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateOrganizationReq is optional CreateOrganizationReq.
type OptCreateOrganizationReq struct {
	Value CreateOrganizationReq
	Set   bool
}

// IsSet returns true if OptCreateOrganizationReq was set.
func (o OptCreateOrganizationReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateOrganizationReq) Reset() {
	var v CreateOrganizationReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateOrganizationReq) SetTo(v CreateOrganizationReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateOrganizationReq) Get() (v CreateOrganizationReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateOrganizationReq) Or(d CreateOrganizationReq) CreateOrganizationReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateProjectReq returns new OptCreateProjectReq with value set to v.
func NewOptCreateProjectReq(v CreateProjectReq) OptCreateProjectReq {
	return OptCreateProjectReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateProjectReq is optional CreateProjectReq.
type OptCreateProjectReq struct {
	Value CreateProjectReq
	Set   bool
}

// IsSet returns true if OptCreateProjectReq was set.
func (o OptCreateProjectReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateProjectReq) Reset() {
	var v CreateProjectReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateProjectReq) SetTo(v CreateProjectReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateProjectReq) Get() (v CreateProjectReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateProjectReq) Or(d CreateProjectReq) CreateProjectReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGenerateAnalyticsArtifactMultipartUploadURLReq returns new OptGenerateAnalyticsArtifactMultipartUploadURLReq with value set to v.
func NewOptGenerateAnalyticsArtifactMultipartUploadURLReq(v GenerateAnalyticsArtifactMultipartUploadURLReq) OptGenerateAnalyticsArtifactMultipartUploadURLReq {
	return OptGenerateAnalyticsArtifactMultipartUploadURLReq{
		Value: v,
		Set:   true,
	}
}

// OptGenerateAnalyticsArtifactMultipartUploadURLReq is optional GenerateAnalyticsArtifactMultipartUploadURLReq.
type OptGenerateAnalyticsArtifactMultipartUploadURLReq struct {
	Value GenerateAnalyticsArtifactMultipartUploadURLReq
	Set   bool
}

// IsSet returns true if OptGenerateAnalyticsArtifactMultipartUploadURLReq was set.
func (o OptGenerateAnalyticsArtifactMultipartUploadURLReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGenerateAnalyticsArtifactMultipartUploadURLReq) Reset() {
	var v GenerateAnalyticsArtifactMultipartUploadURLReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGenerateAnalyticsArtifactMultipartUploadURLReq) SetTo(v GenerateAnalyticsArtifactMultipartUploadURLReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGenerateAnalyticsArtifactMultipartUploadURLReq) Get() (v GenerateAnalyticsArtifactMultipartUploadURLReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGenerateAnalyticsArtifactMultipartUploadURLReq) Or(d GenerateAnalyticsArtifactMultipartUploadURLReq) GenerateAnalyticsArtifactMultipartUploadURLReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGeneratePreviewsMultipartUploadURLReq returns new OptGeneratePreviewsMultipartUploadURLReq with value set to v.
func NewOptGeneratePreviewsMultipartUploadURLReq(v GeneratePreviewsMultipartUploadURLReq) OptGeneratePreviewsMultipartUploadURLReq {
	return OptGeneratePreviewsMultipartUploadURLReq{
		Value: v,
		Set:   true,
	}
}

// OptGeneratePreviewsMultipartUploadURLReq is optional GeneratePreviewsMultipartUploadURLReq.
type OptGeneratePreviewsMultipartUploadURLReq struct {
	Value GeneratePreviewsMultipartUploadURLReq
	Set   bool
}

// IsSet returns true if OptGeneratePreviewsMultipartUploadURLReq was set.
func (o OptGeneratePreviewsMultipartUploadURLReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGeneratePreviewsMultipartUploadURLReq) Reset() {
	var v GeneratePreviewsMultipartUploadURLReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGeneratePreviewsMultipartUploadURLReq) SetTo(v GeneratePreviewsMultipartUploadURLReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGeneratePreviewsMultipartUploadURLReq) Get() (v GeneratePreviewsMultipartUploadURLReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGeneratePreviewsMultipartUploadURLReq) Or(d GeneratePreviewsMultipartUploadURLReq) GeneratePreviewsMultipartUploadURLReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrganizationSSOProvider returns new OptOrganizationSSOProvider with value set to v.
func NewOptOrganizationSSOProvider(v OrganizationSSOProvider) OptOrganizationSSOProvider {
	return OptOrganizationSSOProvider{
		Value: v,
		Set:   true,
	}
}

// OptOrganizationSSOProvider is optional OrganizationSSOProvider.
type OptOrganizationSSOProvider struct {
	Value OrganizationSSOProvider
	Set   bool
}

// IsSet returns true if OptOrganizationSSOProvider was set.
func (o OptOrganizationSSOProvider) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrganizationSSOProvider) Reset() {
	var v OrganizationSSOProvider
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrganizationSSOProvider) SetTo(v OrganizationSSOProvider) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrganizationSSOProvider) Get() (v OrganizationSSOProvider, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrganizationSSOProvider) Or(d OrganizationSSOProvider) OrganizationSSOProvider {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRefreshTokenReq returns new OptRefreshTokenReq with value set to v.
func NewOptRefreshTokenReq(v RefreshTokenReq) OptRefreshTokenReq {
	return OptRefreshTokenReq{
		Value: v,
		Set:   true,
	}
}

// OptRefreshTokenReq is optional RefreshTokenReq.
type OptRefreshTokenReq struct {
	Value RefreshTokenReq
	Set   bool
}

// IsSet returns true if OptRefreshTokenReq was set.
func (o OptRefreshTokenReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRefreshTokenReq) Reset() {
	var v RefreshTokenReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRefreshTokenReq) SetTo(v RefreshTokenReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRefreshTokenReq) Get() (v RefreshTokenReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRefreshTokenReq) Or(d RefreshTokenReq) RefreshTokenReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStartPreviewsMultipartUploadReq returns new OptStartPreviewsMultipartUploadReq with value set to v.
func NewOptStartPreviewsMultipartUploadReq(v StartPreviewsMultipartUploadReq) OptStartPreviewsMultipartUploadReq {
	return OptStartPreviewsMultipartUploadReq{
		Value: v,
		Set:   true,
	}
}

// OptStartPreviewsMultipartUploadReq is optional StartPreviewsMultipartUploadReq.
type OptStartPreviewsMultipartUploadReq struct {
	Value StartPreviewsMultipartUploadReq
	Set   bool
}

// IsSet returns true if OptStartPreviewsMultipartUploadReq was set.
func (o OptStartPreviewsMultipartUploadReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStartPreviewsMultipartUploadReq) Reset() {
	var v StartPreviewsMultipartUploadReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStartPreviewsMultipartUploadReq) SetTo(v StartPreviewsMultipartUploadReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStartPreviewsMultipartUploadReq) Get() (v StartPreviewsMultipartUploadReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStartPreviewsMultipartUploadReq) Or(d StartPreviewsMultipartUploadReq) StartPreviewsMultipartUploadReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStartPreviewsMultipartUploadReqType returns new OptStartPreviewsMultipartUploadReqType with value set to v.
func NewOptStartPreviewsMultipartUploadReqType(v StartPreviewsMultipartUploadReqType) OptStartPreviewsMultipartUploadReqType {
	return OptStartPreviewsMultipartUploadReqType{
		Value: v,
		Set:   true,
	}
}

// OptStartPreviewsMultipartUploadReqType is optional StartPreviewsMultipartUploadReqType.
type OptStartPreviewsMultipartUploadReqType struct {
	Value StartPreviewsMultipartUploadReqType
	Set   bool
}

// IsSet returns true if OptStartPreviewsMultipartUploadReqType was set.
func (o OptStartPreviewsMultipartUploadReqType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStartPreviewsMultipartUploadReqType) Reset() {
	var v StartPreviewsMultipartUploadReqType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStartPreviewsMultipartUploadReqType) SetTo(v StartPreviewsMultipartUploadReqType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStartPreviewsMultipartUploadReqType) Get() (v StartPreviewsMultipartUploadReqType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStartPreviewsMultipartUploadReqType) Or(d StartPreviewsMultipartUploadReqType) StartPreviewsMultipartUploadReqType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateOrganization2Req returns new OptUpdateOrganization2Req with value set to v.
func NewOptUpdateOrganization2Req(v UpdateOrganization2Req) OptUpdateOrganization2Req {
	return OptUpdateOrganization2Req{
		Value: v,
		Set:   true,
	}
}

// OptUpdateOrganization2Req is optional UpdateOrganization2Req.
type OptUpdateOrganization2Req struct {
	Value UpdateOrganization2Req
	Set   bool
}

// IsSet returns true if OptUpdateOrganization2Req was set.
func (o OptUpdateOrganization2Req) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateOrganization2Req) Reset() {
	var v UpdateOrganization2Req
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateOrganization2Req) SetTo(v UpdateOrganization2Req) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateOrganization2Req) Get() (v UpdateOrganization2Req, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateOrganization2Req) Or(d UpdateOrganization2Req) UpdateOrganization2Req {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateOrganization2ReqSSOProvider returns new OptUpdateOrganization2ReqSSOProvider with value set to v.
func NewOptUpdateOrganization2ReqSSOProvider(v UpdateOrganization2ReqSSOProvider) OptUpdateOrganization2ReqSSOProvider {
	return OptUpdateOrganization2ReqSSOProvider{
		Value: v,
		Set:   true,
	}
}

// OptUpdateOrganization2ReqSSOProvider is optional UpdateOrganization2ReqSSOProvider.
type OptUpdateOrganization2ReqSSOProvider struct {
	Value UpdateOrganization2ReqSSOProvider
	Set   bool
}

// IsSet returns true if OptUpdateOrganization2ReqSSOProvider was set.
func (o OptUpdateOrganization2ReqSSOProvider) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateOrganization2ReqSSOProvider) Reset() {
	var v UpdateOrganization2ReqSSOProvider
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateOrganization2ReqSSOProvider) SetTo(v UpdateOrganization2ReqSSOProvider) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateOrganization2ReqSSOProvider) Get() (v UpdateOrganization2ReqSSOProvider, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateOrganization2ReqSSOProvider) Or(d UpdateOrganization2ReqSSOProvider) UpdateOrganization2ReqSSOProvider {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateOrganizationMemberReq returns new OptUpdateOrganizationMemberReq with value set to v.
func NewOptUpdateOrganizationMemberReq(v UpdateOrganizationMemberReq) OptUpdateOrganizationMemberReq {
	return OptUpdateOrganizationMemberReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateOrganizationMemberReq is optional UpdateOrganizationMemberReq.
type OptUpdateOrganizationMemberReq struct {
	Value UpdateOrganizationMemberReq
	Set   bool
}

// IsSet returns true if OptUpdateOrganizationMemberReq was set.
func (o OptUpdateOrganizationMemberReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateOrganizationMemberReq) Reset() {
	var v UpdateOrganizationMemberReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateOrganizationMemberReq) SetTo(v UpdateOrganizationMemberReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateOrganizationMemberReq) Get() (v UpdateOrganizationMemberReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateOrganizationMemberReq) Or(d UpdateOrganizationMemberReq) UpdateOrganizationMemberReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateOrganizationReq returns new OptUpdateOrganizationReq with value set to v.
func NewOptUpdateOrganizationReq(v UpdateOrganizationReq) OptUpdateOrganizationReq {
	return OptUpdateOrganizationReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateOrganizationReq is optional UpdateOrganizationReq.
type OptUpdateOrganizationReq struct {
	Value UpdateOrganizationReq
	Set   bool
}

// IsSet returns true if OptUpdateOrganizationReq was set.
func (o OptUpdateOrganizationReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateOrganizationReq) Reset() {
	var v UpdateOrganizationReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateOrganizationReq) SetTo(v UpdateOrganizationReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateOrganizationReq) Get() (v UpdateOrganizationReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateOrganizationReq) Or(d UpdateOrganizationReq) UpdateOrganizationReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateOrganizationReqSSOProvider returns new OptUpdateOrganizationReqSSOProvider with value set to v.
func NewOptUpdateOrganizationReqSSOProvider(v UpdateOrganizationReqSSOProvider) OptUpdateOrganizationReqSSOProvider {
	return OptUpdateOrganizationReqSSOProvider{
		Value: v,
		Set:   true,
	}
}

// OptUpdateOrganizationReqSSOProvider is optional UpdateOrganizationReqSSOProvider.
type OptUpdateOrganizationReqSSOProvider struct {
	Value UpdateOrganizationReqSSOProvider
	Set   bool
}

// IsSet returns true if OptUpdateOrganizationReqSSOProvider was set.
func (o OptUpdateOrganizationReqSSOProvider) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateOrganizationReqSSOProvider) Reset() {
	var v UpdateOrganizationReqSSOProvider
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateOrganizationReqSSOProvider) SetTo(v UpdateOrganizationReqSSOProvider) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateOrganizationReqSSOProvider) Get() (v UpdateOrganizationReqSSOProvider, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateOrganizationReqSSOProvider) Or(d UpdateOrganizationReqSSOProvider) UpdateOrganizationReqSSOProvider {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateProjectReq returns new OptUpdateProjectReq with value set to v.
func NewOptUpdateProjectReq(v UpdateProjectReq) OptUpdateProjectReq {
	return OptUpdateProjectReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateProjectReq is optional UpdateProjectReq.
type OptUpdateProjectReq struct {
	Value UpdateProjectReq
	Set   bool
}

// IsSet returns true if OptUpdateProjectReq was set.
func (o OptUpdateProjectReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateProjectReq) Reset() {
	var v UpdateProjectReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateProjectReq) SetTo(v UpdateProjectReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateProjectReq) Get() (v UpdateProjectReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateProjectReq) Or(d UpdateProjectReq) UpdateProjectReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUploadCacheActionItemReq returns new OptUploadCacheActionItemReq with value set to v.
func NewOptUploadCacheActionItemReq(v UploadCacheActionItemReq) OptUploadCacheActionItemReq {
	return OptUploadCacheActionItemReq{
		Value: v,
		Set:   true,
	}
}

// OptUploadCacheActionItemReq is optional UploadCacheActionItemReq.
type OptUploadCacheActionItemReq struct {
	Value UploadCacheActionItemReq
	Set   bool
}

// IsSet returns true if OptUploadCacheActionItemReq was set.
func (o OptUploadCacheActionItemReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUploadCacheActionItemReq) Reset() {
	var v UploadCacheActionItemReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUploadCacheActionItemReq) SetTo(v UploadCacheActionItemReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUploadCacheActionItemReq) Get() (v UploadCacheActionItemReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUploadCacheActionItemReq) Or(d UploadCacheActionItemReq) UploadCacheActionItemReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// An organization.
// Ref: #/components/schemas/Organization
type Organization struct {
	// The organization's unique identifier.
	ID float64 `json:"id"`
	// A list of organization invitations.
	Invitations []Invitation `json:"invitations"`
	// A list of organization members.
	Members []OrganizationMember `json:"members"`
	// The organization's name.
	Name string `json:"name"`
	// The plan associated with the organization.
	Plan OrganizationPlan `json:"plan"`
	// The organization ID associated with the SSO provider.
	SSOOrganizationID OptString `json:"sso_organization_id"`
	// The SSO provider set up for the organization.
	SSOProvider OptOrganizationSSOProvider `json:"sso_provider"`
}

// GetID returns the value of ID.
func (s *Organization) GetID() float64 {
	return s.ID
}

// GetInvitations returns the value of Invitations.
func (s *Organization) GetInvitations() []Invitation {
	return s.Invitations
}

// GetMembers returns the value of Members.
func (s *Organization) GetMembers() []OrganizationMember {
	return s.Members
}

// GetName returns the value of Name.
func (s *Organization) GetName() string {
	return s.Name
}

// GetPlan returns the value of Plan.
func (s *Organization) GetPlan() OrganizationPlan {
	return s.Plan
}

// GetSSOOrganizationID returns the value of SSOOrganizationID.
func (s *Organization) GetSSOOrganizationID() OptString {
	return s.SSOOrganizationID
}

// GetSSOProvider returns the value of SSOProvider.
func (s *Organization) GetSSOProvider() OptOrganizationSSOProvider {
	return s.SSOProvider
}

// SetID sets the value of ID.
func (s *Organization) SetID(val float64) {
	s.ID = val
}

// SetInvitations sets the value of Invitations.
func (s *Organization) SetInvitations(val []Invitation) {
	s.Invitations = val
}

// SetMembers sets the value of Members.
func (s *Organization) SetMembers(val []OrganizationMember) {
	s.Members = val
}

// SetName sets the value of Name.
func (s *Organization) SetName(val string) {
	s.Name = val
}

// SetPlan sets the value of Plan.
func (s *Organization) SetPlan(val OrganizationPlan) {
	s.Plan = val
}

// SetSSOOrganizationID sets the value of SSOOrganizationID.
func (s *Organization) SetSSOOrganizationID(val OptString) {
	s.SSOOrganizationID = val
}

// SetSSOProvider sets the value of SSOProvider.
func (s *Organization) SetSSOProvider(val OptOrganizationSSOProvider) {
	s.SSOProvider = val
}

func (*Organization) createOrganizationRes()  {}
func (*Organization) showOrganizationRes()    {}
func (*Organization) updateOrganization2Res() {}
func (*Organization) updateOrganizationRes()  {}

// An organization member.
// Ref: #/components/schemas/OrganizationMember
type OrganizationMember struct {
	// The organization member's email.
	Email string `json:"email"`
	// The organization member's unique identifier.
	ID float64 `json:"id"`
	// The organization member's name.
	Name string `json:"name"`
	// The organization member's role.
	Role OrganizationMemberRole `json:"role"`
}

// GetEmail returns the value of Email.
func (s *OrganizationMember) GetEmail() string {
	return s.Email
}

// GetID returns the value of ID.
func (s *OrganizationMember) GetID() float64 {
	return s.ID
}

// GetName returns the value of Name.
func (s *OrganizationMember) GetName() string {
	return s.Name
}

// GetRole returns the value of Role.
func (s *OrganizationMember) GetRole() OrganizationMemberRole {
	return s.Role
}

// SetEmail sets the value of Email.
func (s *OrganizationMember) SetEmail(val string) {
	s.Email = val
}

// SetID sets the value of ID.
func (s *OrganizationMember) SetID(val float64) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *OrganizationMember) SetName(val string) {
	s.Name = val
}

// SetRole sets the value of Role.
func (s *OrganizationMember) SetRole(val OrganizationMemberRole) {
	s.Role = val
}

func (*OrganizationMember) updateOrganizationMemberRes() {}

// The organization member's role.
type OrganizationMemberRole string

const (
	OrganizationMemberRoleAdmin OrganizationMemberRole = "admin"
	OrganizationMemberRoleUser  OrganizationMemberRole = "user"
)

// AllValues returns all OrganizationMemberRole values.
func (OrganizationMemberRole) AllValues() []OrganizationMemberRole {
	return []OrganizationMemberRole{
		OrganizationMemberRoleAdmin,
		OrganizationMemberRoleUser,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrganizationMemberRole) MarshalText() ([]byte, error) {
	switch s {
	case OrganizationMemberRoleAdmin:
		return []byte(s), nil
	case OrganizationMemberRoleUser:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrganizationMemberRole) UnmarshalText(data []byte) error {
	switch OrganizationMemberRole(data) {
	case OrganizationMemberRoleAdmin:
		*s = OrganizationMemberRoleAdmin
		return nil
	case OrganizationMemberRoleUser:
		*s = OrganizationMemberRoleUser
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The plan associated with the organization.
type OrganizationPlan string

const (
	OrganizationPlanAir        OrganizationPlan = "air"
	OrganizationPlanPro        OrganizationPlan = "pro"
	OrganizationPlanEnterprise OrganizationPlan = "enterprise"
	OrganizationPlanNone       OrganizationPlan = "none"
)

// AllValues returns all OrganizationPlan values.
func (OrganizationPlan) AllValues() []OrganizationPlan {
	return []OrganizationPlan{
		OrganizationPlanAir,
		OrganizationPlanPro,
		OrganizationPlanEnterprise,
		OrganizationPlanNone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrganizationPlan) MarshalText() ([]byte, error) {
	switch s {
	case OrganizationPlanAir:
		return []byte(s), nil
	case OrganizationPlanPro:
		return []byte(s), nil
	case OrganizationPlanEnterprise:
		return []byte(s), nil
	case OrganizationPlanNone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrganizationPlan) UnmarshalText(data []byte) error {
	switch OrganizationPlan(data) {
	case OrganizationPlanAir:
		*s = OrganizationPlanAir
		return nil
	case OrganizationPlanPro:
		*s = OrganizationPlanPro
		return nil
	case OrganizationPlanEnterprise:
		*s = OrganizationPlanEnterprise
		return nil
	case OrganizationPlanNone:
		*s = OrganizationPlanNone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The SSO provider set up for the organization.
type OrganizationSSOProvider string

const (
	OrganizationSSOProviderGoogle OrganizationSSOProvider = "google"
)

// AllValues returns all OrganizationSSOProvider values.
func (OrganizationSSOProvider) AllValues() []OrganizationSSOProvider {
	return []OrganizationSSOProvider{
		OrganizationSSOProviderGoogle,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrganizationSSOProvider) MarshalText() ([]byte, error) {
	switch s {
	case OrganizationSSOProviderGoogle:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrganizationSSOProvider) UnmarshalText(data []byte) error {
	switch OrganizationSSOProvider(data) {
	case OrganizationSSOProviderGoogle:
		*s = OrganizationSSOProviderGoogle
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The usage of an organization.
// Ref: #/components/schemas/OrganizationUsage
type OrganizationUsage struct {
	// The number of remote cache hits in the current month.
	CurrentMonthRemoteCacheHits float64 `json:"current_month_remote_cache_hits"`
}

// GetCurrentMonthRemoteCacheHits returns the value of CurrentMonthRemoteCacheHits.
func (s *OrganizationUsage) GetCurrentMonthRemoteCacheHits() float64 {
	return s.CurrentMonthRemoteCacheHits
}

// SetCurrentMonthRemoteCacheHits sets the value of CurrentMonthRemoteCacheHits.
func (s *OrganizationUsage) SetCurrentMonthRemoteCacheHits(val float64) {
	s.CurrentMonthRemoteCacheHits = val
}

func (*OrganizationUsage) showOrganizationUsageRes() {}

// Ref: #/components/schemas/Project
type Project struct {
	// The default branch of the project.
	DefaultBranch string `json:"default_branch"`
	// The full name of the project (e.g. tuist/tuist).
	FullName string `json:"full_name"`
	// ID of the project.
	ID float64 `json:"id"`
	// The URL of the connected git repository, such as https://github.com/tuist/tuist or https://github.
	// com/tuist/tuist.git.
	RepositoryURL OptString `json:"repository_url"`
	// The token that should be used to authenticate the project. For CI only.
	//
	// Deprecated: schema marks this property as deprecated.
	Token string `json:"token"`
}

// GetDefaultBranch returns the value of DefaultBranch.
func (s *Project) GetDefaultBranch() string {
	return s.DefaultBranch
}

// GetFullName returns the value of FullName.
func (s *Project) GetFullName() string {
	return s.FullName
}

// GetID returns the value of ID.
func (s *Project) GetID() float64 {
	return s.ID
}

// GetRepositoryURL returns the value of RepositoryURL.
func (s *Project) GetRepositoryURL() OptString {
	return s.RepositoryURL
}

// GetToken returns the value of Token.
func (s *Project) GetToken() string {
	return s.Token
}

// SetDefaultBranch sets the value of DefaultBranch.
func (s *Project) SetDefaultBranch(val string) {
	s.DefaultBranch = val
}

// SetFullName sets the value of FullName.
func (s *Project) SetFullName(val string) {
	s.FullName = val
}

// SetID sets the value of ID.
func (s *Project) SetID(val float64) {
	s.ID = val
}

// SetRepositoryURL sets the value of RepositoryURL.
func (s *Project) SetRepositoryURL(val OptString) {
	s.RepositoryURL = val
}

// SetToken sets the value of Token.
func (s *Project) SetToken(val string) {
	s.Token = val
}

func (*Project) createProjectRes() {}
func (*Project) showProjectRes()   {}
func (*Project) updateProjectRes() {}

// A token to authenticate API requests as a project.
// Ref: #/components/schemas/ProjectToken
type ProjectToken struct {
	// The token unique identifier.
	ID string `json:"id"`
	// The timestamp of when the token was created.
	InsertedAt time.Time `json:"inserted_at"`
}

// GetID returns the value of ID.
func (s *ProjectToken) GetID() string {
	return s.ID
}

// GetInsertedAt returns the value of InsertedAt.
func (s *ProjectToken) GetInsertedAt() time.Time {
	return s.InsertedAt
}

// SetID sets the value of ID.
func (s *ProjectToken) SetID(val string) {
	s.ID = val
}

// SetInsertedAt sets the value of InsertedAt.
func (s *ProjectToken) SetInsertedAt(val time.Time) {
	s.InsertedAt = val
}

type RefreshTokenReq struct {
	// User refresh token.
	RefreshToken string `json:"refresh_token"`
}

// GetRefreshToken returns the value of RefreshToken.
func (s *RefreshTokenReq) GetRefreshToken() string {
	return s.RefreshToken
}

// SetRefreshToken sets the value of RefreshToken.
func (s *RefreshTokenReq) SetRefreshToken(val string) {
	s.RefreshToken = val
}

type RevokeProjectTokenBadRequest Error

func (*RevokeProjectTokenBadRequest) revokeProjectTokenRes() {}

type RevokeProjectTokenForbidden Error

func (*RevokeProjectTokenForbidden) revokeProjectTokenRes() {}

// RevokeProjectTokenNoContent is response for RevokeProjectToken operation.
type RevokeProjectTokenNoContent struct{}

func (*RevokeProjectTokenNoContent) revokeProjectTokenRes() {}

type RevokeProjectTokenNotFound Error

func (*RevokeProjectTokenNotFound) revokeProjectTokenRes() {}

type RevokeProjectTokenUnauthorized Error

func (*RevokeProjectTokenUnauthorized) revokeProjectTokenRes() {}

type ShowOrganizationForbidden Error

func (*ShowOrganizationForbidden) showOrganizationRes() {}

type ShowOrganizationNotFound Error

func (*ShowOrganizationNotFound) showOrganizationRes() {}

type ShowOrganizationUnauthorized Error

func (*ShowOrganizationUnauthorized) showOrganizationRes() {}

type ShowOrganizationUsageForbidden Error

func (*ShowOrganizationUsageForbidden) showOrganizationUsageRes() {}

type ShowOrganizationUsageNotFound Error

func (*ShowOrganizationUsageNotFound) showOrganizationUsageRes() {}

type ShowOrganizationUsageUnauthorized Error

func (*ShowOrganizationUsageUnauthorized) showOrganizationUsageRes() {}

type ShowProjectForbidden Error

func (*ShowProjectForbidden) showProjectRes() {}

type ShowProjectNotFound Error

func (*ShowProjectNotFound) showProjectRes() {}

type ShowProjectUnauthorized Error

func (*ShowProjectUnauthorized) showProjectRes() {}

type StartAnalyticsArtifactMultipartUploadForbidden Error

func (*StartAnalyticsArtifactMultipartUploadForbidden) startAnalyticsArtifactMultipartUploadRes() {}

type StartAnalyticsArtifactMultipartUploadNotFound Error

func (*StartAnalyticsArtifactMultipartUploadNotFound) startAnalyticsArtifactMultipartUploadRes() {}

type StartAnalyticsArtifactMultipartUploadUnauthorized Error

func (*StartAnalyticsArtifactMultipartUploadUnauthorized) startAnalyticsArtifactMultipartUploadRes() {
}

type StartCacheArtifactMultipartUploadForbidden Error

func (*StartCacheArtifactMultipartUploadForbidden) startCacheArtifactMultipartUploadRes() {}

type StartCacheArtifactMultipartUploadNotFound Error

func (*StartCacheArtifactMultipartUploadNotFound) startCacheArtifactMultipartUploadRes() {}

type StartCacheArtifactMultipartUploadPaymentRequired Error

func (*StartCacheArtifactMultipartUploadPaymentRequired) startCacheArtifactMultipartUploadRes() {}

type StartCacheArtifactMultipartUploadUnauthorized Error

func (*StartCacheArtifactMultipartUploadUnauthorized) startCacheArtifactMultipartUploadRes() {}

type StartPreviewsMultipartUploadForbidden Error

func (*StartPreviewsMultipartUploadForbidden) startPreviewsMultipartUploadRes() {}

type StartPreviewsMultipartUploadNotFound Error

func (*StartPreviewsMultipartUploadNotFound) startPreviewsMultipartUploadRes() {}

// The upload has been initiated and preview and upload unique identifier are returned to upload the
// various parts using multi-part uploads.
type StartPreviewsMultipartUploadOK struct {
	// Data that contains preview and upload unique identifier associated with the multipart upload to
	// use when uploading parts.
	Data   StartPreviewsMultipartUploadOKData   `json:"data"`
	Status StartPreviewsMultipartUploadOKStatus `json:"status"`
}

// GetData returns the value of Data.
func (s *StartPreviewsMultipartUploadOK) GetData() StartPreviewsMultipartUploadOKData {
	return s.Data
}

// GetStatus returns the value of Status.
func (s *StartPreviewsMultipartUploadOK) GetStatus() StartPreviewsMultipartUploadOKStatus {
	return s.Status
}

// SetData sets the value of Data.
func (s *StartPreviewsMultipartUploadOK) SetData(val StartPreviewsMultipartUploadOKData) {
	s.Data = val
}

// SetStatus sets the value of Status.
func (s *StartPreviewsMultipartUploadOK) SetStatus(val StartPreviewsMultipartUploadOKStatus) {
	s.Status = val
}

func (*StartPreviewsMultipartUploadOK) startPreviewsMultipartUploadRes() {}

// Data that contains preview and upload unique identifier associated with the multipart upload to
// use when uploading parts.
type StartPreviewsMultipartUploadOKData struct {
	// The id of the preview.
	PreviewID string `json:"preview_id"`
	// The upload ID.
	UploadID string `json:"upload_id"`
}

// GetPreviewID returns the value of PreviewID.
func (s *StartPreviewsMultipartUploadOKData) GetPreviewID() string {
	return s.PreviewID
}

// GetUploadID returns the value of UploadID.
func (s *StartPreviewsMultipartUploadOKData) GetUploadID() string {
	return s.UploadID
}

// SetPreviewID sets the value of PreviewID.
func (s *StartPreviewsMultipartUploadOKData) SetPreviewID(val string) {
	s.PreviewID = val
}

// SetUploadID sets the value of UploadID.
func (s *StartPreviewsMultipartUploadOKData) SetUploadID(val string) {
	s.UploadID = val
}

type StartPreviewsMultipartUploadOKStatus string

const (
	StartPreviewsMultipartUploadOKStatusSuccess StartPreviewsMultipartUploadOKStatus = "success"
)

// AllValues returns all StartPreviewsMultipartUploadOKStatus values.
func (StartPreviewsMultipartUploadOKStatus) AllValues() []StartPreviewsMultipartUploadOKStatus {
	return []StartPreviewsMultipartUploadOKStatus{
		StartPreviewsMultipartUploadOKStatusSuccess,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StartPreviewsMultipartUploadOKStatus) MarshalText() ([]byte, error) {
	switch s {
	case StartPreviewsMultipartUploadOKStatusSuccess:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StartPreviewsMultipartUploadOKStatus) UnmarshalText(data []byte) error {
	switch StartPreviewsMultipartUploadOKStatus(data) {
	case StartPreviewsMultipartUploadOKStatusSuccess:
		*s = StartPreviewsMultipartUploadOKStatusSuccess
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StartPreviewsMultipartUploadReq struct {
	// The bundle identifier of the preview.
	BundleIdentifier OptString `json:"bundle_identifier"`
	// The display name of the preview.
	DisplayName OptString `json:"display_name"`
	// The type of the preview to upload.
	Type OptStartPreviewsMultipartUploadReqType `json:"type"`
	// The version of the preview.
	Version OptString `json:"version"`
}

// GetBundleIdentifier returns the value of BundleIdentifier.
func (s *StartPreviewsMultipartUploadReq) GetBundleIdentifier() OptString {
	return s.BundleIdentifier
}

// GetDisplayName returns the value of DisplayName.
func (s *StartPreviewsMultipartUploadReq) GetDisplayName() OptString {
	return s.DisplayName
}

// GetType returns the value of Type.
func (s *StartPreviewsMultipartUploadReq) GetType() OptStartPreviewsMultipartUploadReqType {
	return s.Type
}

// GetVersion returns the value of Version.
func (s *StartPreviewsMultipartUploadReq) GetVersion() OptString {
	return s.Version
}

// SetBundleIdentifier sets the value of BundleIdentifier.
func (s *StartPreviewsMultipartUploadReq) SetBundleIdentifier(val OptString) {
	s.BundleIdentifier = val
}

// SetDisplayName sets the value of DisplayName.
func (s *StartPreviewsMultipartUploadReq) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetType sets the value of Type.
func (s *StartPreviewsMultipartUploadReq) SetType(val OptStartPreviewsMultipartUploadReqType) {
	s.Type = val
}

// SetVersion sets the value of Version.
func (s *StartPreviewsMultipartUploadReq) SetVersion(val OptString) {
	s.Version = val
}

// The type of the preview to upload.
type StartPreviewsMultipartUploadReqType string

const (
	StartPreviewsMultipartUploadReqTypeAppBundle StartPreviewsMultipartUploadReqType = "app_bundle"
	StartPreviewsMultipartUploadReqTypeIpa       StartPreviewsMultipartUploadReqType = "ipa"
)

// AllValues returns all StartPreviewsMultipartUploadReqType values.
func (StartPreviewsMultipartUploadReqType) AllValues() []StartPreviewsMultipartUploadReqType {
	return []StartPreviewsMultipartUploadReqType{
		StartPreviewsMultipartUploadReqTypeAppBundle,
		StartPreviewsMultipartUploadReqTypeIpa,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StartPreviewsMultipartUploadReqType) MarshalText() ([]byte, error) {
	switch s {
	case StartPreviewsMultipartUploadReqTypeAppBundle:
		return []byte(s), nil
	case StartPreviewsMultipartUploadReqTypeIpa:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StartPreviewsMultipartUploadReqType) UnmarshalText(data []byte) error {
	switch StartPreviewsMultipartUploadReqType(data) {
	case StartPreviewsMultipartUploadReqTypeAppBundle:
		*s = StartPreviewsMultipartUploadReqTypeAppBundle
		return nil
	case StartPreviewsMultipartUploadReqTypeIpa:
		*s = StartPreviewsMultipartUploadReqTypeIpa
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StartPreviewsMultipartUploadUnauthorized Error

func (*StartPreviewsMultipartUploadUnauthorized) startPreviewsMultipartUploadRes() {}

type UpdateOrganization2BadRequest Error

func (*UpdateOrganization2BadRequest) updateOrganization2Res() {}

type UpdateOrganization2Forbidden Error

func (*UpdateOrganization2Forbidden) updateOrganization2Res() {}

type UpdateOrganization2NotFound Error

func (*UpdateOrganization2NotFound) updateOrganization2Res() {}

type UpdateOrganization2Req struct {
	// The SSO organization ID to be associated with the SSO provider.
	SSOOrganizationID OptNilString `json:"sso_organization_id"`
	// The SSO provider to set up for the organization.
	SSOProvider OptUpdateOrganization2ReqSSOProvider `json:"sso_provider"`
}

// GetSSOOrganizationID returns the value of SSOOrganizationID.
func (s *UpdateOrganization2Req) GetSSOOrganizationID() OptNilString {
	return s.SSOOrganizationID
}

// GetSSOProvider returns the value of SSOProvider.
func (s *UpdateOrganization2Req) GetSSOProvider() OptUpdateOrganization2ReqSSOProvider {
	return s.SSOProvider
}

// SetSSOOrganizationID sets the value of SSOOrganizationID.
func (s *UpdateOrganization2Req) SetSSOOrganizationID(val OptNilString) {
	s.SSOOrganizationID = val
}

// SetSSOProvider sets the value of SSOProvider.
func (s *UpdateOrganization2Req) SetSSOProvider(val OptUpdateOrganization2ReqSSOProvider) {
	s.SSOProvider = val
}

// The SSO provider to set up for the organization.
type UpdateOrganization2ReqSSOProvider string

const (
	UpdateOrganization2ReqSSOProviderGoogle UpdateOrganization2ReqSSOProvider = "google"
	UpdateOrganization2ReqSSOProviderNone   UpdateOrganization2ReqSSOProvider = "none"
)

// AllValues returns all UpdateOrganization2ReqSSOProvider values.
func (UpdateOrganization2ReqSSOProvider) AllValues() []UpdateOrganization2ReqSSOProvider {
	return []UpdateOrganization2ReqSSOProvider{
		UpdateOrganization2ReqSSOProviderGoogle,
		UpdateOrganization2ReqSSOProviderNone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateOrganization2ReqSSOProvider) MarshalText() ([]byte, error) {
	switch s {
	case UpdateOrganization2ReqSSOProviderGoogle:
		return []byte(s), nil
	case UpdateOrganization2ReqSSOProviderNone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateOrganization2ReqSSOProvider) UnmarshalText(data []byte) error {
	switch UpdateOrganization2ReqSSOProvider(data) {
	case UpdateOrganization2ReqSSOProviderGoogle:
		*s = UpdateOrganization2ReqSSOProviderGoogle
		return nil
	case UpdateOrganization2ReqSSOProviderNone:
		*s = UpdateOrganization2ReqSSOProviderNone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateOrganization2Unauthorized Error

func (*UpdateOrganization2Unauthorized) updateOrganization2Res() {}

type UpdateOrganizationBadRequest Error

func (*UpdateOrganizationBadRequest) updateOrganizationRes() {}

type UpdateOrganizationForbidden Error

func (*UpdateOrganizationForbidden) updateOrganizationRes() {}

type UpdateOrganizationMemberBadRequest Error

func (*UpdateOrganizationMemberBadRequest) updateOrganizationMemberRes() {}

type UpdateOrganizationMemberForbidden Error

func (*UpdateOrganizationMemberForbidden) updateOrganizationMemberRes() {}

type UpdateOrganizationMemberNotFound Error

func (*UpdateOrganizationMemberNotFound) updateOrganizationMemberRes() {}

type UpdateOrganizationMemberReq struct {
	// The role to update the member to.
	Role UpdateOrganizationMemberReqRole `json:"role"`
}

// GetRole returns the value of Role.
func (s *UpdateOrganizationMemberReq) GetRole() UpdateOrganizationMemberReqRole {
	return s.Role
}

// SetRole sets the value of Role.
func (s *UpdateOrganizationMemberReq) SetRole(val UpdateOrganizationMemberReqRole) {
	s.Role = val
}

// The role to update the member to.
type UpdateOrganizationMemberReqRole string

const (
	UpdateOrganizationMemberReqRoleAdmin UpdateOrganizationMemberReqRole = "admin"
	UpdateOrganizationMemberReqRoleUser  UpdateOrganizationMemberReqRole = "user"
)

// AllValues returns all UpdateOrganizationMemberReqRole values.
func (UpdateOrganizationMemberReqRole) AllValues() []UpdateOrganizationMemberReqRole {
	return []UpdateOrganizationMemberReqRole{
		UpdateOrganizationMemberReqRoleAdmin,
		UpdateOrganizationMemberReqRoleUser,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateOrganizationMemberReqRole) MarshalText() ([]byte, error) {
	switch s {
	case UpdateOrganizationMemberReqRoleAdmin:
		return []byte(s), nil
	case UpdateOrganizationMemberReqRoleUser:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateOrganizationMemberReqRole) UnmarshalText(data []byte) error {
	switch UpdateOrganizationMemberReqRole(data) {
	case UpdateOrganizationMemberReqRoleAdmin:
		*s = UpdateOrganizationMemberReqRoleAdmin
		return nil
	case UpdateOrganizationMemberReqRoleUser:
		*s = UpdateOrganizationMemberReqRoleUser
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateOrganizationMemberUnauthorized Error

func (*UpdateOrganizationMemberUnauthorized) updateOrganizationMemberRes() {}

type UpdateOrganizationNotFound Error

func (*UpdateOrganizationNotFound) updateOrganizationRes() {}

type UpdateOrganizationReq struct {
	// The SSO organization ID to be associated with the SSO provider.
	SSOOrganizationID OptNilString `json:"sso_organization_id"`
	// The SSO provider to set up for the organization.
	SSOProvider OptUpdateOrganizationReqSSOProvider `json:"sso_provider"`
}

// GetSSOOrganizationID returns the value of SSOOrganizationID.
func (s *UpdateOrganizationReq) GetSSOOrganizationID() OptNilString {
	return s.SSOOrganizationID
}

// GetSSOProvider returns the value of SSOProvider.
func (s *UpdateOrganizationReq) GetSSOProvider() OptUpdateOrganizationReqSSOProvider {
	return s.SSOProvider
}

// SetSSOOrganizationID sets the value of SSOOrganizationID.
func (s *UpdateOrganizationReq) SetSSOOrganizationID(val OptNilString) {
	s.SSOOrganizationID = val
}

// SetSSOProvider sets the value of SSOProvider.
func (s *UpdateOrganizationReq) SetSSOProvider(val OptUpdateOrganizationReqSSOProvider) {
	s.SSOProvider = val
}

// The SSO provider to set up for the organization.
type UpdateOrganizationReqSSOProvider string

const (
	UpdateOrganizationReqSSOProviderGoogle UpdateOrganizationReqSSOProvider = "google"
	UpdateOrganizationReqSSOProviderNone   UpdateOrganizationReqSSOProvider = "none"
)

// AllValues returns all UpdateOrganizationReqSSOProvider values.
func (UpdateOrganizationReqSSOProvider) AllValues() []UpdateOrganizationReqSSOProvider {
	return []UpdateOrganizationReqSSOProvider{
		UpdateOrganizationReqSSOProviderGoogle,
		UpdateOrganizationReqSSOProviderNone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateOrganizationReqSSOProvider) MarshalText() ([]byte, error) {
	switch s {
	case UpdateOrganizationReqSSOProviderGoogle:
		return []byte(s), nil
	case UpdateOrganizationReqSSOProviderNone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateOrganizationReqSSOProvider) UnmarshalText(data []byte) error {
	switch UpdateOrganizationReqSSOProvider(data) {
	case UpdateOrganizationReqSSOProviderGoogle:
		*s = UpdateOrganizationReqSSOProviderGoogle
		return nil
	case UpdateOrganizationReqSSOProviderNone:
		*s = UpdateOrganizationReqSSOProviderNone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateOrganizationUnauthorized Error

func (*UpdateOrganizationUnauthorized) updateOrganizationRes() {}

type UpdateProjectBadRequest Error

func (*UpdateProjectBadRequest) updateProjectRes() {}

type UpdateProjectForbidden Error

func (*UpdateProjectForbidden) updateProjectRes() {}

type UpdateProjectNotFound Error

func (*UpdateProjectNotFound) updateProjectRes() {}

type UpdateProjectReq struct {
	// The default branch for the project.
	DefaultBranch OptString `json:"default_branch"`
	// The repository URL for the project.
	RepositoryURL OptString `json:"repository_url"`
}

// GetDefaultBranch returns the value of DefaultBranch.
func (s *UpdateProjectReq) GetDefaultBranch() OptString {
	return s.DefaultBranch
}

// GetRepositoryURL returns the value of RepositoryURL.
func (s *UpdateProjectReq) GetRepositoryURL() OptString {
	return s.RepositoryURL
}

// SetDefaultBranch sets the value of DefaultBranch.
func (s *UpdateProjectReq) SetDefaultBranch(val OptString) {
	s.DefaultBranch = val
}

// SetRepositoryURL sets the value of RepositoryURL.
func (s *UpdateProjectReq) SetRepositoryURL(val OptString) {
	s.RepositoryURL = val
}

type UpdateProjectUnauthorized Error

func (*UpdateProjectUnauthorized) updateProjectRes() {}

type UploadCacheActionItemBadRequest Error

func (*UploadCacheActionItemBadRequest) uploadCacheActionItemRes() {}

type UploadCacheActionItemCreated CacheActionItem

func (*UploadCacheActionItemCreated) uploadCacheActionItemRes() {}

type UploadCacheActionItemForbidden Error

func (*UploadCacheActionItemForbidden) uploadCacheActionItemRes() {}

type UploadCacheActionItemNotFound Error

func (*UploadCacheActionItemNotFound) uploadCacheActionItemRes() {}

type UploadCacheActionItemOK CacheActionItem

func (*UploadCacheActionItemOK) uploadCacheActionItemRes() {}

type UploadCacheActionItemPaymentRequired Error

func (*UploadCacheActionItemPaymentRequired) uploadCacheActionItemRes() {}

type UploadCacheActionItemReq struct {
	// The hash of the cache action item.
	Hash OptString `json:"hash"`
}

// GetHash returns the value of Hash.
func (s *UploadCacheActionItemReq) GetHash() OptString {
	return s.Hash
}

// SetHash sets the value of Hash.
func (s *UploadCacheActionItemReq) SetHash(val OptString) {
	s.Hash = val
}

type UploadCacheActionItemUnauthorized Error

func (*UploadCacheActionItemUnauthorized) uploadCacheActionItemRes() {}

// A user.
// Ref: #/components/schemas/User
type User struct {
	// The user's email.
	Email string `json:"email"`
	// The user's unique identifier.
	ID float64 `json:"id"`
	// The user's name.
	Name string `json:"name"`
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() string {
	return s.Email
}

// GetID returns the value of ID.
func (s *User) GetID() float64 {
	return s.ID
}

// GetName returns the value of Name.
func (s *User) GetName() string {
	return s.Name
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val string) {
	s.Email = val
}

// SetID sets the value of ID.
func (s *User) SetID(val float64) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *User) SetName(val string) {
	s.Name = val
}
