// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// CacheArtifactExistsParams is parameters of cacheArtifactExists operation.
type CacheArtifactExistsParams struct {
	// The category of the cache. It's used to differentiate between different types of caches.
	CacheCategory OptCacheCategory
	// The project identifier '{account_name}/{project_name}'.
	ProjectID string
	// The hash that uniquely identifies the artifact in the cache.
	Hash string
	// The name of the artifact.
	Name string
}

func unpackCacheArtifactExistsParams(packed middleware.Parameters) (params CacheArtifactExistsParams) {
	{
		key := middleware.ParameterKey{
			Name: "cache_category",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.CacheCategory = v.(OptCacheCategory)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "query",
		}
		params.ProjectID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hash",
			In:   "query",
		}
		params.Hash = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "query",
		}
		params.Name = packed[key].(string)
	}
	return params
}

func decodeCacheArtifactExistsParams(args [0]string, argsEscaped bool, r *http.Request) (params CacheArtifactExistsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: cache_category.
	{
		val := CacheCategory("builds")
		params.CacheCategory.SetTo(val)
	}
	// Decode query: cache_category.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "cache_category",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCacheCategoryVal CacheCategory
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCacheCategoryVal = CacheCategory(c)
					return nil
				}(); err != nil {
					return err
				}
				params.CacheCategory.SetTo(paramsDotCacheCategoryVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.CacheCategory.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "cache_category",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: project_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "project_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: hash.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "hash",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hash = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hash",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// CleanCacheParams is parameters of cleanCache operation.
type CleanCacheParams struct {
	// The name of the account that the project belongs to.
	AccountHandle string
	// The name of the project to clean cache for.
	ProjectHandle string
}

func unpackCleanCacheParams(packed middleware.Parameters) (params CleanCacheParams) {
	{
		key := middleware.ParameterKey{
			Name: "account_handle",
			In:   "path",
		}
		params.AccountHandle = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "project_handle",
			In:   "path",
		}
		params.ProjectHandle = packed[key].(string)
	}
	return params
}

func decodeCleanCacheParams(args [2]string, argsEscaped bool, r *http.Request) (params CleanCacheParams, _ error) {
	// Decode path: account_handle.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AccountHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_handle",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: project_handle.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_handle",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CompleteAnalyticsArtifactMultipartUploadParams is parameters of completeAnalyticsArtifactMultipartUpload operation.
type CompleteAnalyticsArtifactMultipartUploadParams struct {
	// The id of the command event.
	RunID int
}

func unpackCompleteAnalyticsArtifactMultipartUploadParams(packed middleware.Parameters) (params CompleteAnalyticsArtifactMultipartUploadParams) {
	{
		key := middleware.ParameterKey{
			Name: "run_id",
			In:   "path",
		}
		params.RunID = packed[key].(int)
	}
	return params
}

func decodeCompleteAnalyticsArtifactMultipartUploadParams(args [1]string, argsEscaped bool, r *http.Request) (params CompleteAnalyticsArtifactMultipartUploadParams, _ error) {
	// Decode path: run_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "run_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "run_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CompleteAnalyticsArtifactsUploadsParams is parameters of completeAnalyticsArtifactsUploads operation.
type CompleteAnalyticsArtifactsUploadsParams struct {
	// The id of the command event.
	RunID int
}

func unpackCompleteAnalyticsArtifactsUploadsParams(packed middleware.Parameters) (params CompleteAnalyticsArtifactsUploadsParams) {
	{
		key := middleware.ParameterKey{
			Name: "run_id",
			In:   "path",
		}
		params.RunID = packed[key].(int)
	}
	return params
}

func decodeCompleteAnalyticsArtifactsUploadsParams(args [1]string, argsEscaped bool, r *http.Request) (params CompleteAnalyticsArtifactsUploadsParams, _ error) {
	// Decode path: run_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "run_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "run_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CompleteCacheArtifactMultipartUploadParams is parameters of completeCacheArtifactMultipartUpload operation.
type CompleteCacheArtifactMultipartUploadParams struct {
	// The category of the cache. It's used to differentiate between different types of caches.
	CacheCategory OptCacheCategory
	// The project identifier '{account_name}/{project_name}'.
	ProjectID string
	// The hash that uniquely identifies the artifact in the cache.
	Hash string
	// The upload ID.
	UploadID string
	// The name of the artifact.
	Name string
}

func unpackCompleteCacheArtifactMultipartUploadParams(packed middleware.Parameters) (params CompleteCacheArtifactMultipartUploadParams) {
	{
		key := middleware.ParameterKey{
			Name: "cache_category",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.CacheCategory = v.(OptCacheCategory)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "query",
		}
		params.ProjectID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hash",
			In:   "query",
		}
		params.Hash = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "upload_id",
			In:   "query",
		}
		params.UploadID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "query",
		}
		params.Name = packed[key].(string)
	}
	return params
}

func decodeCompleteCacheArtifactMultipartUploadParams(args [0]string, argsEscaped bool, r *http.Request) (params CompleteCacheArtifactMultipartUploadParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: cache_category.
	{
		val := CacheCategory("builds")
		params.CacheCategory.SetTo(val)
	}
	// Decode query: cache_category.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "cache_category",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCacheCategoryVal CacheCategory
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCacheCategoryVal = CacheCategory(c)
					return nil
				}(); err != nil {
					return err
				}
				params.CacheCategory.SetTo(paramsDotCacheCategoryVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.CacheCategory.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "cache_category",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: project_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "project_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: hash.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "hash",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hash = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hash",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: upload_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "upload_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UploadID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "upload_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// CompletePreviewsMultipartUploadParams is parameters of completePreviewsMultipartUpload operation.
type CompletePreviewsMultipartUploadParams struct {
	// The handle of the account.
	AccountHandle string
	// The handle of the project.
	ProjectHandle string
}

func unpackCompletePreviewsMultipartUploadParams(packed middleware.Parameters) (params CompletePreviewsMultipartUploadParams) {
	{
		key := middleware.ParameterKey{
			Name: "account_handle",
			In:   "path",
		}
		params.AccountHandle = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "project_handle",
			In:   "path",
		}
		params.ProjectHandle = packed[key].(string)
	}
	return params
}

func decodeCompletePreviewsMultipartUploadParams(args [2]string, argsEscaped bool, r *http.Request) (params CompletePreviewsMultipartUploadParams, _ error) {
	// Decode path: account_handle.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AccountHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_handle",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: project_handle.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_handle",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateCommandEventParams is parameters of createCommandEvent operation.
type CreateCommandEventParams struct {
	// The project id.
	ProjectID string
}

func unpackCreateCommandEventParams(packed middleware.Parameters) (params CreateCommandEventParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "query",
		}
		params.ProjectID = packed[key].(string)
	}
	return params
}

func decodeCreateCommandEventParams(args [0]string, argsEscaped bool, r *http.Request) (params CreateCommandEventParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: project_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "project_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// CreateInvitationParams is parameters of createInvitation operation.
type CreateInvitationParams struct {
	// The name of the organization.
	OrganizationName string
}

func unpackCreateInvitationParams(packed middleware.Parameters) (params CreateInvitationParams) {
	{
		key := middleware.ParameterKey{
			Name: "organization_name",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	return params
}

func decodeCreateInvitationParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateInvitationParams, _ error) {
	// Decode path: organization_name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organization_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateProjectTokenParams is parameters of createProjectToken operation.
type CreateProjectTokenParams struct {
	// The account handle.
	AccountHandle string
	// The project handle.
	ProjectHandle string
}

func unpackCreateProjectTokenParams(packed middleware.Parameters) (params CreateProjectTokenParams) {
	{
		key := middleware.ParameterKey{
			Name: "account_handle",
			In:   "path",
		}
		params.AccountHandle = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "project_handle",
			In:   "path",
		}
		params.ProjectHandle = packed[key].(string)
	}
	return params
}

func decodeCreateProjectTokenParams(args [2]string, argsEscaped bool, r *http.Request) (params CreateProjectTokenParams, _ error) {
	// Decode path: account_handle.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AccountHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_handle",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: project_handle.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_handle",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteOrganizationParams is parameters of deleteOrganization operation.
type DeleteOrganizationParams struct {
	// The name of the organization to delete.
	OrganizationName string
}

func unpackDeleteOrganizationParams(packed middleware.Parameters) (params DeleteOrganizationParams) {
	{
		key := middleware.ParameterKey{
			Name: "organization_name",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	return params
}

func decodeDeleteOrganizationParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteOrganizationParams, _ error) {
	// Decode path: organization_name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organization_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteProjectParams is parameters of deleteProject operation.
type DeleteProjectParams struct {
	// The id of the project to delete.
	ID int
}

func unpackDeleteProjectParams(packed middleware.Parameters) (params DeleteProjectParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(int)
	}
	return params
}

func decodeDeleteProjectParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteProjectParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DownloadCacheArtifactParams is parameters of downloadCacheArtifact operation.
type DownloadCacheArtifactParams struct {
	// The category of the cache. It's used to differentiate between different types of caches.
	CacheCategory OptCacheCategory
	// The project identifier '{account_name}/{project_name}'.
	ProjectID string
	// The hash that uniquely identifies the artifact in the cache.
	Hash string
	// The name of the artifact.
	Name string
}

func unpackDownloadCacheArtifactParams(packed middleware.Parameters) (params DownloadCacheArtifactParams) {
	{
		key := middleware.ParameterKey{
			Name: "cache_category",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.CacheCategory = v.(OptCacheCategory)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "query",
		}
		params.ProjectID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hash",
			In:   "query",
		}
		params.Hash = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "query",
		}
		params.Name = packed[key].(string)
	}
	return params
}

func decodeDownloadCacheArtifactParams(args [0]string, argsEscaped bool, r *http.Request) (params DownloadCacheArtifactParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: cache_category.
	{
		val := CacheCategory("builds")
		params.CacheCategory.SetTo(val)
	}
	// Decode query: cache_category.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "cache_category",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCacheCategoryVal CacheCategory
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCacheCategoryVal = CacheCategory(c)
					return nil
				}(); err != nil {
					return err
				}
				params.CacheCategory.SetTo(paramsDotCacheCategoryVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.CacheCategory.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "cache_category",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: project_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "project_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: hash.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "hash",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hash = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hash",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// DownloadPreviewParams is parameters of downloadPreview operation.
type DownloadPreviewParams struct {
	// The handle of the account.
	AccountHandle string
	// The handle of the project.
	ProjectHandle string
	// The id of the preview.
	PreviewID string
}

func unpackDownloadPreviewParams(packed middleware.Parameters) (params DownloadPreviewParams) {
	{
		key := middleware.ParameterKey{
			Name: "account_handle",
			In:   "path",
		}
		params.AccountHandle = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "project_handle",
			In:   "path",
		}
		params.ProjectHandle = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "preview_id",
			In:   "path",
		}
		params.PreviewID = packed[key].(string)
	}
	return params
}

func decodeDownloadPreviewParams(args [3]string, argsEscaped bool, r *http.Request) (params DownloadPreviewParams, _ error) {
	// Decode path: account_handle.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AccountHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_handle",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: project_handle.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_handle",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: preview_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "preview_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PreviewID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "preview_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GenerateAnalyticsArtifactMultipartUploadURLParams is parameters of generateAnalyticsArtifactMultipartUploadURL operation.
type GenerateAnalyticsArtifactMultipartUploadURLParams struct {
	// The id of the command event.
	RunID int
}

func unpackGenerateAnalyticsArtifactMultipartUploadURLParams(packed middleware.Parameters) (params GenerateAnalyticsArtifactMultipartUploadURLParams) {
	{
		key := middleware.ParameterKey{
			Name: "run_id",
			In:   "path",
		}
		params.RunID = packed[key].(int)
	}
	return params
}

func decodeGenerateAnalyticsArtifactMultipartUploadURLParams(args [1]string, argsEscaped bool, r *http.Request) (params GenerateAnalyticsArtifactMultipartUploadURLParams, _ error) {
	// Decode path: run_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "run_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "run_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GenerateCacheArtifactMultipartUploadURLParams is parameters of generateCacheArtifactMultipartUploadURL operation.
type GenerateCacheArtifactMultipartUploadURLParams struct {
	// The category of the cache. It's used to differentiate between different types of caches.
	CacheCategory OptCacheCategory
	// The size in bytes of the part that will be uploaded. It's used to generate the signed URL.
	ContentLength OptInt
	// The project identifier '{account_name}/{project_name}'.
	ProjectID string
	// The hash that uniquely identifies the artifact in the cache.
	Hash string
	// The part number of the multipart upload.
	PartNumber int
	// The upload ID.
	UploadID string
	// The name of the artifact.
	Name string
}

func unpackGenerateCacheArtifactMultipartUploadURLParams(packed middleware.Parameters) (params GenerateCacheArtifactMultipartUploadURLParams) {
	{
		key := middleware.ParameterKey{
			Name: "cache_category",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.CacheCategory = v.(OptCacheCategory)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "content_length",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ContentLength = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "query",
		}
		params.ProjectID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hash",
			In:   "query",
		}
		params.Hash = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "part_number",
			In:   "query",
		}
		params.PartNumber = packed[key].(int)
	}
	{
		key := middleware.ParameterKey{
			Name: "upload_id",
			In:   "query",
		}
		params.UploadID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "query",
		}
		params.Name = packed[key].(string)
	}
	return params
}

func decodeGenerateCacheArtifactMultipartUploadURLParams(args [0]string, argsEscaped bool, r *http.Request) (params GenerateCacheArtifactMultipartUploadURLParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: cache_category.
	{
		val := CacheCategory("builds")
		params.CacheCategory.SetTo(val)
	}
	// Decode query: cache_category.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "cache_category",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCacheCategoryVal CacheCategory
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCacheCategoryVal = CacheCategory(c)
					return nil
				}(); err != nil {
					return err
				}
				params.CacheCategory.SetTo(paramsDotCacheCategoryVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.CacheCategory.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "cache_category",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: content_length.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "content_length",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContentLengthVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotContentLengthVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ContentLength.SetTo(paramsDotContentLengthVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "content_length",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: project_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "project_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: hash.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "hash",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hash = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hash",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: part_number.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "part_number",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PartNumber = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "part_number",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: upload_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "upload_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UploadID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "upload_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GeneratePreviewsMultipartUploadURLParams is parameters of generatePreviewsMultipartUploadURL operation.
type GeneratePreviewsMultipartUploadURLParams struct {
	// The handle of the account.
	AccountHandle string
	// The handle of the project.
	ProjectHandle string
}

func unpackGeneratePreviewsMultipartUploadURLParams(packed middleware.Parameters) (params GeneratePreviewsMultipartUploadURLParams) {
	{
		key := middleware.ParameterKey{
			Name: "account_handle",
			In:   "path",
		}
		params.AccountHandle = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "project_handle",
			In:   "path",
		}
		params.ProjectHandle = packed[key].(string)
	}
	return params
}

func decodeGeneratePreviewsMultipartUploadURLParams(args [2]string, argsEscaped bool, r *http.Request) (params GeneratePreviewsMultipartUploadURLParams, _ error) {
	// Decode path: account_handle.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AccountHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_handle",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: project_handle.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_handle",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetCacheActionItemParams is parameters of getCacheActionItem operation.
type GetCacheActionItemParams struct {
	// The name of the account that the project belongs to.
	AccountHandle string
	// The name of the project the cache action item belongs to.
	ProjectHandle string
	// The hash that uniquely identifies an item in the action cache.
	Hash string
}

func unpackGetCacheActionItemParams(packed middleware.Parameters) (params GetCacheActionItemParams) {
	{
		key := middleware.ParameterKey{
			Name: "account_handle",
			In:   "path",
		}
		params.AccountHandle = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "project_handle",
			In:   "path",
		}
		params.ProjectHandle = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hash",
			In:   "path",
		}
		params.Hash = packed[key].(string)
	}
	return params
}

func decodeGetCacheActionItemParams(args [3]string, argsEscaped bool, r *http.Request) (params GetCacheActionItemParams, _ error) {
	// Decode path: account_handle.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AccountHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_handle",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: project_handle.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_handle",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: hash.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hash",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hash = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hash",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDeviceCodeParams is parameters of getDeviceCode operation.
type GetDeviceCodeParams struct {
	// The device code to query.
	DeviceCode string
}

func unpackGetDeviceCodeParams(packed middleware.Parameters) (params GetDeviceCodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "device_code",
			In:   "path",
		}
		params.DeviceCode = packed[key].(string)
	}
	return params
}

func decodeGetDeviceCodeParams(args [1]string, argsEscaped bool, r *http.Request) (params GetDeviceCodeParams, _ error) {
	// Decode path: device_code.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "device_code",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DeviceCode = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "device_code",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListProjectTokensParams is parameters of listProjectTokens operation.
type ListProjectTokensParams struct {
	// The account handle.
	AccountHandle string
	// The project handle.
	ProjectHandle string
}

func unpackListProjectTokensParams(packed middleware.Parameters) (params ListProjectTokensParams) {
	{
		key := middleware.ParameterKey{
			Name: "account_handle",
			In:   "path",
		}
		params.AccountHandle = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "project_handle",
			In:   "path",
		}
		params.ProjectHandle = packed[key].(string)
	}
	return params
}

func decodeListProjectTokensParams(args [2]string, argsEscaped bool, r *http.Request) (params ListProjectTokensParams, _ error) {
	// Decode path: account_handle.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AccountHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_handle",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: project_handle.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_handle",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RevokeProjectTokenParams is parameters of revokeProjectToken operation.
type RevokeProjectTokenParams struct {
	// The account handle.
	AccountHandle string
	// The project handle.
	ProjectHandle string
	// The ID of the project token.
	ID string
}

func unpackRevokeProjectTokenParams(packed middleware.Parameters) (params RevokeProjectTokenParams) {
	{
		key := middleware.ParameterKey{
			Name: "account_handle",
			In:   "path",
		}
		params.AccountHandle = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "project_handle",
			In:   "path",
		}
		params.ProjectHandle = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeRevokeProjectTokenParams(args [3]string, argsEscaped bool, r *http.Request) (params RevokeProjectTokenParams, _ error) {
	// Decode path: account_handle.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AccountHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_handle",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: project_handle.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_handle",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ShowOrganizationParams is parameters of showOrganization operation.
type ShowOrganizationParams struct {
	// The name of the organization to show.
	OrganizationName string
}

func unpackShowOrganizationParams(packed middleware.Parameters) (params ShowOrganizationParams) {
	{
		key := middleware.ParameterKey{
			Name: "organization_name",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	return params
}

func decodeShowOrganizationParams(args [1]string, argsEscaped bool, r *http.Request) (params ShowOrganizationParams, _ error) {
	// Decode path: organization_name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organization_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ShowOrganizationUsageParams is parameters of showOrganizationUsage operation.
type ShowOrganizationUsageParams struct {
	// The name of the organization to show.
	OrganizationName string
}

func unpackShowOrganizationUsageParams(packed middleware.Parameters) (params ShowOrganizationUsageParams) {
	{
		key := middleware.ParameterKey{
			Name: "organization_name",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	return params
}

func decodeShowOrganizationUsageParams(args [1]string, argsEscaped bool, r *http.Request) (params ShowOrganizationUsageParams, _ error) {
	// Decode path: organization_name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organization_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ShowProjectParams is parameters of showProject operation.
type ShowProjectParams struct {
	// The name of the account that the project belongs to.
	AccountHandle string
	// The name of the project to show.
	ProjectHandle string
}

func unpackShowProjectParams(packed middleware.Parameters) (params ShowProjectParams) {
	{
		key := middleware.ParameterKey{
			Name: "account_handle",
			In:   "path",
		}
		params.AccountHandle = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "project_handle",
			In:   "path",
		}
		params.ProjectHandle = packed[key].(string)
	}
	return params
}

func decodeShowProjectParams(args [2]string, argsEscaped bool, r *http.Request) (params ShowProjectParams, _ error) {
	// Decode path: account_handle.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AccountHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_handle",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: project_handle.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_handle",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StartAnalyticsArtifactMultipartUploadParams is parameters of startAnalyticsArtifactMultipartUpload operation.
type StartAnalyticsArtifactMultipartUploadParams struct {
	// The id of the command event.
	RunID int
}

func unpackStartAnalyticsArtifactMultipartUploadParams(packed middleware.Parameters) (params StartAnalyticsArtifactMultipartUploadParams) {
	{
		key := middleware.ParameterKey{
			Name: "run_id",
			In:   "path",
		}
		params.RunID = packed[key].(int)
	}
	return params
}

func decodeStartAnalyticsArtifactMultipartUploadParams(args [1]string, argsEscaped bool, r *http.Request) (params StartAnalyticsArtifactMultipartUploadParams, _ error) {
	// Decode path: run_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "run_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "run_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StartCacheArtifactMultipartUploadParams is parameters of startCacheArtifactMultipartUpload operation.
type StartCacheArtifactMultipartUploadParams struct {
	// The category of the cache. It's used to differentiate between different types of caches.
	CacheCategory OptCacheCategory
	// The project identifier '{account_name}/{project_name}'.
	ProjectID string
	// The hash that uniquely identifies the artifact in the cache.
	Hash string
	// The name of the artifact.
	Name string
}

func unpackStartCacheArtifactMultipartUploadParams(packed middleware.Parameters) (params StartCacheArtifactMultipartUploadParams) {
	{
		key := middleware.ParameterKey{
			Name: "cache_category",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.CacheCategory = v.(OptCacheCategory)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "query",
		}
		params.ProjectID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hash",
			In:   "query",
		}
		params.Hash = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "query",
		}
		params.Name = packed[key].(string)
	}
	return params
}

func decodeStartCacheArtifactMultipartUploadParams(args [0]string, argsEscaped bool, r *http.Request) (params StartCacheArtifactMultipartUploadParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: cache_category.
	{
		val := CacheCategory("builds")
		params.CacheCategory.SetTo(val)
	}
	// Decode query: cache_category.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "cache_category",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCacheCategoryVal CacheCategory
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCacheCategoryVal = CacheCategory(c)
					return nil
				}(); err != nil {
					return err
				}
				params.CacheCategory.SetTo(paramsDotCacheCategoryVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.CacheCategory.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "cache_category",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: project_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "project_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: hash.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "hash",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hash = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hash",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// StartPreviewsMultipartUploadParams is parameters of startPreviewsMultipartUpload operation.
type StartPreviewsMultipartUploadParams struct {
	// The handle of the account.
	AccountHandle string
	// The handle of the project.
	ProjectHandle string
}

func unpackStartPreviewsMultipartUploadParams(packed middleware.Parameters) (params StartPreviewsMultipartUploadParams) {
	{
		key := middleware.ParameterKey{
			Name: "account_handle",
			In:   "path",
		}
		params.AccountHandle = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "project_handle",
			In:   "path",
		}
		params.ProjectHandle = packed[key].(string)
	}
	return params
}

func decodeStartPreviewsMultipartUploadParams(args [2]string, argsEscaped bool, r *http.Request) (params StartPreviewsMultipartUploadParams, _ error) {
	// Decode path: account_handle.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AccountHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_handle",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: project_handle.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_handle",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateOrganizationParams is parameters of updateOrganization operation.
type UpdateOrganizationParams struct {
	// The name of the organization to update.
	OrganizationName string
}

func unpackUpdateOrganizationParams(packed middleware.Parameters) (params UpdateOrganizationParams) {
	{
		key := middleware.ParameterKey{
			Name: "organization_name",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	return params
}

func decodeUpdateOrganizationParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateOrganizationParams, _ error) {
	// Decode path: organization_name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organization_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateOrganization2Params is parameters of updateOrganization (2) operation.
type UpdateOrganization2Params struct {
	// The name of the organization to update.
	OrganizationName string
}

func unpackUpdateOrganization2Params(packed middleware.Parameters) (params UpdateOrganization2Params) {
	{
		key := middleware.ParameterKey{
			Name: "organization_name",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	return params
}

func decodeUpdateOrganization2Params(args [1]string, argsEscaped bool, r *http.Request) (params UpdateOrganization2Params, _ error) {
	// Decode path: organization_name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organization_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateOrganizationMemberParams is parameters of updateOrganizationMember operation.
type UpdateOrganizationMemberParams struct {
	// The name of the organization to update the member in.
	OrganizationName string
	// The name of the user to update in the organization.
	UserName string
}

func unpackUpdateOrganizationMemberParams(packed middleware.Parameters) (params UpdateOrganizationMemberParams) {
	{
		key := middleware.ParameterKey{
			Name: "organization_name",
			In:   "path",
		}
		params.OrganizationName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "user_name",
			In:   "path",
		}
		params.UserName = packed[key].(string)
	}
	return params
}

func decodeUpdateOrganizationMemberParams(args [2]string, argsEscaped bool, r *http.Request) (params UpdateOrganizationMemberParams, _ error) {
	// Decode path: organization_name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organization_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_name",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: user_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "user_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UserName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "user_name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateProjectParams is parameters of updateProject operation.
type UpdateProjectParams struct {
	// The handle of the project's account.
	AccountHandle string
	// The handle of the project to update.
	ProjectHandle string
}

func unpackUpdateProjectParams(packed middleware.Parameters) (params UpdateProjectParams) {
	{
		key := middleware.ParameterKey{
			Name: "account_handle",
			In:   "path",
		}
		params.AccountHandle = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "project_handle",
			In:   "path",
		}
		params.ProjectHandle = packed[key].(string)
	}
	return params
}

func decodeUpdateProjectParams(args [2]string, argsEscaped bool, r *http.Request) (params UpdateProjectParams, _ error) {
	// Decode path: account_handle.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AccountHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_handle",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: project_handle.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_handle",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UploadCacheActionItemParams is parameters of uploadCacheActionItem operation.
type UploadCacheActionItemParams struct {
	// The name of the account that the project belongs to.
	AccountHandle string
	// The name of the project to clean cache for.
	ProjectHandle string
}

func unpackUploadCacheActionItemParams(packed middleware.Parameters) (params UploadCacheActionItemParams) {
	{
		key := middleware.ParameterKey{
			Name: "account_handle",
			In:   "path",
		}
		params.AccountHandle = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "project_handle",
			In:   "path",
		}
		params.ProjectHandle = packed[key].(string)
	}
	return params
}

func decodeUploadCacheActionItemParams(args [2]string, argsEscaped bool, r *http.Request) (params UploadCacheActionItemParams, _ error) {
	// Decode path: account_handle.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AccountHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_handle",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: project_handle.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectHandle = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_handle",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
