// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// Authenticate implements authenticate operation.
//
// This endpoint returns API tokens for a given email and password.
//
// POST /api/auth
func (UnimplementedHandler) Authenticate(ctx context.Context, req OptAuthenticateReq) (r AuthenticateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CacheArtifactExists implements cacheArtifactExists operation.
//
// This endpoint checks if an artifact exists in the cache. It returns a 404 status code if the
// artifact does not exist.
//
// Deprecated: schema marks this operation as deprecated.
//
// GET /api/cache/exists
func (UnimplementedHandler) CacheArtifactExists(ctx context.Context, params CacheArtifactExistsParams) (r CacheArtifactExistsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CleanCache implements cleanCache operation.
//
// Cleans cache for a given project.
//
// PUT /api/projects/{account_handle}/{project_handle}/cache/clean
func (UnimplementedHandler) CleanCache(ctx context.Context, params CleanCacheParams) (r CleanCacheRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CompleteAnalyticsArtifactMultipartUpload implements completeAnalyticsArtifactMultipartUpload operation.
//
// Given the upload ID and all the parts with their ETags, this endpoint completes the multipart
// upload.
//
// POST /api/runs/{run_id}/complete
func (UnimplementedHandler) CompleteAnalyticsArtifactMultipartUpload(ctx context.Context, req OptCompleteAnalyticsArtifactMultipartUploadReq, params CompleteAnalyticsArtifactMultipartUploadParams) (r CompleteAnalyticsArtifactMultipartUploadRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CompleteAnalyticsArtifactsUploads implements completeAnalyticsArtifactsUploads operation.
//
// Given a command event, it marks all artifact uploads as finished and does extra processing of a
// given command run, such as test flakiness detection.
//
// PUT /api/runs/{run_id}/complete_artifacts_uploads
func (UnimplementedHandler) CompleteAnalyticsArtifactsUploads(ctx context.Context, req OptCompleteAnalyticsArtifactsUploadsReq, params CompleteAnalyticsArtifactsUploadsParams) (r CompleteAnalyticsArtifactsUploadsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CompleteCacheArtifactMultipartUpload implements completeCacheArtifactMultipartUpload operation.
//
// Given the upload ID and all the parts with their ETags, this endpoint completes the multipart
// upload. The cache will then be able to serve the artifact.
//
// POST /api/cache/multipart/complete
func (UnimplementedHandler) CompleteCacheArtifactMultipartUpload(ctx context.Context, req OptCompleteCacheArtifactMultipartUploadReq, params CompleteCacheArtifactMultipartUploadParams) (r CompleteCacheArtifactMultipartUploadRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CompletePreviewsMultipartUpload implements completePreviewsMultipartUpload operation.
//
// Given the upload ID and all the parts with their ETags, this endpoint completes the multipart
// upload.
//
// POST /api/projects/{account_handle}/{project_handle}/previews/complete
func (UnimplementedHandler) CompletePreviewsMultipartUpload(ctx context.Context, req OptCompletePreviewsMultipartUploadReq, params CompletePreviewsMultipartUploadParams) (r CompletePreviewsMultipartUploadRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateCommandEvent implements createCommandEvent operation.
//
// Create a a new command analytics event.
//
// POST /api/analytics
func (UnimplementedHandler) CreateCommandEvent(ctx context.Context, req OptCreateCommandEventReq, params CreateCommandEventParams) (r CreateCommandEventRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateInvitation implements createInvitation operation.
//
// Invites a user with a given email to a given organization.
//
// POST /api/organizations/{organization_name}/invitations
func (UnimplementedHandler) CreateInvitation(ctx context.Context, req OptCreateInvitationReq, params CreateInvitationParams) (r CreateInvitationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateOrganization implements createOrganization operation.
//
// Creates an organization with the given name.
//
// POST /api/organizations
func (UnimplementedHandler) CreateOrganization(ctx context.Context, req OptCreateOrganizationReq) (r CreateOrganizationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateProject implements createProject operation.
//
// Create a new project.
//
// POST /api/projects
func (UnimplementedHandler) CreateProject(ctx context.Context, req OptCreateProjectReq) (r CreateProjectRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateProjectToken implements createProjectToken operation.
//
// This endpoint returns a new project token.
//
// POST /api/projects/{account_handle}/{project_handle}/tokens
func (UnimplementedHandler) CreateProjectToken(ctx context.Context, params CreateProjectTokenParams) (r CreateProjectTokenRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteOrganization implements deleteOrganization operation.
//
// Deletes the organization with the given name.
//
// DELETE /api/organizations/{organization_name}
func (UnimplementedHandler) DeleteOrganization(ctx context.Context, params DeleteOrganizationParams) (r DeleteOrganizationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteProject implements deleteProject operation.
//
// Deletes a project with a given id.
//
// DELETE /api/projects/{id}
func (UnimplementedHandler) DeleteProject(ctx context.Context, params DeleteProjectParams) (r DeleteProjectRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DownloadCacheArtifact implements downloadCacheArtifact operation.
//
// This endpoint returns a signed URL that can be used to download an artifact from the cache.
//
// GET /api/cache
func (UnimplementedHandler) DownloadCacheArtifact(ctx context.Context, params DownloadCacheArtifactParams) (r DownloadCacheArtifactRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DownloadPreview implements downloadPreview operation.
//
// This endpoint returns a signed URL that can be used to download a preview.
//
// GET /api/projects/{account_handle}/{project_handle}/previews/{preview_id}
func (UnimplementedHandler) DownloadPreview(ctx context.Context, params DownloadPreviewParams) (r DownloadPreviewRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GenerateAnalyticsArtifactMultipartUploadURL implements generateAnalyticsArtifactMultipartUploadURL operation.
//
// Given an upload ID and a part number, this endpoint returns a signed URL that can be used to
// upload a part of a multipart upload. The URL is short-lived and expires in 120 seconds.
//
// POST /api/runs/{run_id}/generate-url
func (UnimplementedHandler) GenerateAnalyticsArtifactMultipartUploadURL(ctx context.Context, req OptGenerateAnalyticsArtifactMultipartUploadURLReq, params GenerateAnalyticsArtifactMultipartUploadURLParams) (r GenerateAnalyticsArtifactMultipartUploadURLRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GenerateCacheArtifactMultipartUploadURL implements generateCacheArtifactMultipartUploadURL operation.
//
// Given an upload ID and a part number, this endpoint returns a signed URL that can be used to
// upload a part of a multipart upload. The URL is short-lived and expires in 120 seconds.
//
// POST /api/cache/multipart/generate-url
func (UnimplementedHandler) GenerateCacheArtifactMultipartUploadURL(ctx context.Context, params GenerateCacheArtifactMultipartUploadURLParams) (r GenerateCacheArtifactMultipartUploadURLRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GeneratePreviewsMultipartUploadURL implements generatePreviewsMultipartUploadURL operation.
//
// Given an upload ID and a part number, this endpoint returns a signed URL that can be used to
// upload a part of a multipart upload. The URL is short-lived and expires in 120 seconds.
//
// POST /api/projects/{account_handle}/{project_handle}/previews/generate-url
func (UnimplementedHandler) GeneratePreviewsMultipartUploadURL(ctx context.Context, req OptGeneratePreviewsMultipartUploadURLReq, params GeneratePreviewsMultipartUploadURLParams) (r GeneratePreviewsMultipartUploadURLRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCacheActionItem implements getCacheActionItem operation.
//
// This endpoint gets an item from the action cache.
//
// GET /api/projects/{account_handle}/{project_handle}/cache/ac/{hash}
func (UnimplementedHandler) GetCacheActionItem(ctx context.Context, params GetCacheActionItemParams) (r GetCacheActionItemRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDeviceCode implements getDeviceCode operation.
//
// This endpoint returns a token for a given device code if the device code is authenticated.
//
// GET /api/auth/device_code/{device_code}
func (UnimplementedHandler) GetDeviceCode(ctx context.Context, params GetDeviceCodeParams) (r GetDeviceCodeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListOrganizations implements listOrganizations operation.
//
// Returns all the organizations the authenticated subject is part of.
//
// GET /api/organizations
func (UnimplementedHandler) ListOrganizations(ctx context.Context) (r ListOrganizationsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListProjectTokens implements listProjectTokens operation.
//
// This endpoint returns all tokens for a given project.
//
// GET /api/projects/{account_handle}/{project_handle}/tokens
func (UnimplementedHandler) ListProjectTokens(ctx context.Context, params ListProjectTokensParams) (r ListProjectTokensRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListProjects implements listProjects operation.
//
// List projects the authenticated user has access to.
//
// GET /api/projects
func (UnimplementedHandler) ListProjects(ctx context.Context) (r ListProjectsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RefreshToken implements refreshToken operation.
//
// This endpoint returns new tokens for a given refresh token if the refresh token is valid.
//
// POST /api/auth/refresh_token
func (UnimplementedHandler) RefreshToken(ctx context.Context, req OptRefreshTokenReq) (r RefreshTokenRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RevokeProjectToken implements revokeProjectToken operation.
//
// Revokes a project token.
//
// DELETE /api/projects/{account_handle}/{project_handle}/tokens/{id}
func (UnimplementedHandler) RevokeProjectToken(ctx context.Context, params RevokeProjectTokenParams) (r RevokeProjectTokenRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ShowOrganization implements showOrganization operation.
//
// Returns the organization with the given identifier.
//
// GET /api/organizations/{organization_name}
func (UnimplementedHandler) ShowOrganization(ctx context.Context, params ShowOrganizationParams) (r ShowOrganizationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ShowOrganizationUsage implements showOrganizationUsage operation.
//
// Returns the usage of the organization with the given identifier. (e.g. number of remote cache hits).
//
// GET /api/organizations/{organization_name}/usage
func (UnimplementedHandler) ShowOrganizationUsage(ctx context.Context, params ShowOrganizationUsageParams) (r ShowOrganizationUsageRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ShowProject implements showProject operation.
//
// Returns a project based on the handle.
//
// GET /api/projects/{account_handle}/{project_handle}
func (UnimplementedHandler) ShowProject(ctx context.Context, params ShowProjectParams) (r ShowProjectRes, _ error) {
	return r, ht.ErrNotImplemented
}

// StartAnalyticsArtifactMultipartUpload implements startAnalyticsArtifactMultipartUpload operation.
//
// The endpoint returns an upload ID that can be used to generate URLs for the individual parts and
// complete the upload.
//
// POST /api/runs/{run_id}/start
func (UnimplementedHandler) StartAnalyticsArtifactMultipartUpload(ctx context.Context, req CommandEventArtifact, params StartAnalyticsArtifactMultipartUploadParams) (r StartAnalyticsArtifactMultipartUploadRes, _ error) {
	return r, ht.ErrNotImplemented
}

// StartCacheArtifactMultipartUpload implements startCacheArtifactMultipartUpload operation.
//
// The endpoint returns an upload ID that can be used to generate URLs for the individual parts and
// complete the upload.
//
// POST /api/cache/multipart/start
func (UnimplementedHandler) StartCacheArtifactMultipartUpload(ctx context.Context, params StartCacheArtifactMultipartUploadParams) (r StartCacheArtifactMultipartUploadRes, _ error) {
	return r, ht.ErrNotImplemented
}

// StartPreviewsMultipartUpload implements startPreviewsMultipartUpload operation.
//
// The endpoint returns an upload ID that can be used to generate URLs for the individual parts and
// complete the upload.
//
// POST /api/projects/{account_handle}/{project_handle}/previews/start
func (UnimplementedHandler) StartPreviewsMultipartUpload(ctx context.Context, req OptStartPreviewsMultipartUploadReq, params StartPreviewsMultipartUploadParams) (r StartPreviewsMultipartUploadRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateOrganization implements updateOrganization operation.
//
// Updates an organization with given parameters.
//
// PUT /api/organizations/{organization_name}
func (UnimplementedHandler) UpdateOrganization(ctx context.Context, req OptUpdateOrganizationReq, params UpdateOrganizationParams) (r UpdateOrganizationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateOrganization2 implements updateOrganization (2) operation.
//
// Updates an organization with given parameters.
//
// PATCH /api/organizations/{organization_name}
func (UnimplementedHandler) UpdateOrganization2(ctx context.Context, req OptUpdateOrganization2Req, params UpdateOrganization2Params) (r UpdateOrganization2Res, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateOrganizationMember implements updateOrganizationMember operation.
//
// Updates a member in a given organization.
//
// PUT /api/organizations/{organization_name}/members/{user_name}
func (UnimplementedHandler) UpdateOrganizationMember(ctx context.Context, req OptUpdateOrganizationMemberReq, params UpdateOrganizationMemberParams) (r UpdateOrganizationMemberRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateProject implements updateProject operation.
//
// Updates a project with given parameters.
//
// PUT /api/projects/{account_handle}/{project_handle}
func (UnimplementedHandler) UpdateProject(ctx context.Context, req OptUpdateProjectReq, params UpdateProjectParams) (r UpdateProjectRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UploadCacheActionItem implements uploadCacheActionItem operation.
//
// The endpoint caches a given action item without uploading a file. To upload files, use the
// multipart upload instead.
//
// POST /api/projects/{account_handle}/{project_handle}/cache/ac
func (UnimplementedHandler) UploadCacheActionItem(ctx context.Context, req OptUploadCacheActionItemReq, params UploadCacheActionItemParams) (r UploadCacheActionItemRes, _ error) {
	return r, ht.ErrNotImplemented
}
