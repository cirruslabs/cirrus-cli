// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [3]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/api/"

			if l := len("/api/"); len(elem) >= l && elem[0:l] == "/api/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"

				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "ccounts/"

					if l := len("ccounts/"); len(elem) >= l && elem[0:l] == "ccounts/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "account_handle"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "PATCH":
							s.handleUpdateAccountRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/tokens"

						if l := len("/tokens"); len(elem) >= l && elem[0:l] == "/tokens" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleCreateAccountTokenRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					}

				case 'n': // Prefix: "nalytics"

					if l := len("nalytics"); len(elem) >= l && elem[0:l] == "nalytics" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleCreateCommandEventRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'u': // Prefix: "uth"

					if l := len("uth"); len(elem) >= l && elem[0:l] == "uth" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "POST":
							s.handleAuthenticateRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'd': // Prefix: "device_code/"

							if l := len("device_code/"); len(elem) >= l && elem[0:l] == "device_code/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "device_code"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetDeviceCodeRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						case 'r': // Prefix: "refresh_token"

							if l := len("refresh_token"); len(elem) >= l && elem[0:l] == "refresh_token" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleRefreshTokenRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						}

					}

				}

			case 'c': // Prefix: "cache"

				if l := len("cache"); len(elem) >= l && elem[0:l] == "cache" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleDownloadCacheArtifactRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "exists"

						if l := len("exists"); len(elem) >= l && elem[0:l] == "exists" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleCacheArtifactExistsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					case 'm': // Prefix: "multipart/"

						if l := len("multipart/"); len(elem) >= l && elem[0:l] == "multipart/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "complete"

							if l := len("complete"); len(elem) >= l && elem[0:l] == "complete" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleCompleteCacheArtifactMultipartUploadRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'g': // Prefix: "generate-url"

							if l := len("generate-url"); len(elem) >= l && elem[0:l] == "generate-url" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleGenerateCacheArtifactMultipartUploadURLRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 's': // Prefix: "start"

							if l := len("start"); len(elem) >= l && elem[0:l] == "start" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleStartCacheArtifactMultipartUploadRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						}

					}

				}

			case 'o': // Prefix: "organizations"

				if l := len("organizations"); len(elem) >= l && elem[0:l] == "organizations" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListOrganizationsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateOrganizationRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "organization_name"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteOrganizationRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleShowOrganizationRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handleUpdateOrganization2Request([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateOrganizationRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH,PUT")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'i': // Prefix: "invitations"

							if l := len("invitations"); len(elem) >= l && elem[0:l] == "invitations" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleCancelInvitationRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "POST":
									s.handleCreateInvitationRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,POST")
								}

								return
							}

						case 'm': // Prefix: "members/"

							if l := len("members/"); len(elem) >= l && elem[0:l] == "members/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "user_name"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "PUT":
									s.handleUpdateOrganizationMemberRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "PUT")
								}

								return
							}

						case 'u': // Prefix: "usage"

							if l := len("usage"); len(elem) >= l && elem[0:l] == "usage" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleShowOrganizationUsageRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						}

					}

				}

			case 'p': // Prefix: "projects"

				if l := len("projects"); len(elem) >= l && elem[0:l] == "projects" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListProjectsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateProjectRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "account_handle"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteProjectRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "project_handle"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[1] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleShowProjectRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleUpdateProjectRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,PUT")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "cache/"

								if l := len("cache/"); len(elem) >= l && elem[0:l] == "cache/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "ac"

									if l := len("ac"); len(elem) >= l && elem[0:l] == "ac" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleUploadCacheActionItemRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"

										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "hash"
										// Leaf parameter, slashes are prohibited
										idx := strings.IndexByte(elem, '/')
										if idx >= 0 {
											break
										}
										args[2] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetCacheActionItemRequest([3]string{
													args[0],
													args[1],
													args[2],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

									}

								case 'c': // Prefix: "clean"

									if l := len("clean"); len(elem) >= l && elem[0:l] == "clean" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "PUT":
											s.handleCleanCacheRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "PUT")
										}

										return
									}

								}

							case 'p': // Prefix: "previews"

								if l := len("previews"); len(elem) >= l && elem[0:l] == "previews" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleListPreviewsRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"

									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'c': // Prefix: "complete"
										origElem := elem
										if l := len("complete"); len(elem) >= l && elem[0:l] == "complete" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleCompletePreviewsMultipartUploadRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

										elem = origElem
									case 'g': // Prefix: "generate-url"
										origElem := elem
										if l := len("generate-url"); len(elem) >= l && elem[0:l] == "generate-url" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleGeneratePreviewsMultipartUploadURLRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

										elem = origElem
									case 's': // Prefix: "start"
										origElem := elem
										if l := len("start"); len(elem) >= l && elem[0:l] == "start" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleStartPreviewsMultipartUploadRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

										elem = origElem
									}
									// Param: "preview_id"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[2] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleDownloadPreviewRequest([3]string{
												args[0],
												args[1],
												args[2],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/icons"

										if l := len("/icons"); len(elem) >= l && elem[0:l] == "/icons" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleUploadPreviewIconRequest([3]string{
													args[0],
													args[1],
													args[2],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									}

								}

							case 'r': // Prefix: "runs"

								if l := len("runs"); len(elem) >= l && elem[0:l] == "runs" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListRunsRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

							case 't': // Prefix: "tokens"

								if l := len("tokens"); len(elem) >= l && elem[0:l] == "tokens" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleListProjectTokensRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									case "POST":
										s.handleCreateProjectTokenRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"

									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "id"
									// Leaf parameter, slashes are prohibited
									idx := strings.IndexByte(elem, '/')
									if idx >= 0 {
										break
									}
									args[2] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleRevokeProjectTokenRequest([3]string{
												args[0],
												args[1],
												args[2],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE")
										}

										return
									}

								}

							}

						}

					}

				}

			case 'r': // Prefix: "runs/"

				if l := len("runs/"); len(elem) >= l && elem[0:l] == "runs/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "run_id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "complete"

						if l := len("complete"); len(elem) >= l && elem[0:l] == "complete" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleCompleteAnalyticsArtifactMultipartUploadRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '_': // Prefix: "_artifacts_uploads"

							if l := len("_artifacts_uploads"); len(elem) >= l && elem[0:l] == "_artifacts_uploads" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "PUT":
									s.handleCompleteAnalyticsArtifactsUploadsRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "PUT")
								}

								return
							}

						}

					case 'g': // Prefix: "generate-url"

						if l := len("generate-url"); len(elem) >= l && elem[0:l] == "generate-url" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleGenerateAnalyticsArtifactMultipartUploadURLRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 's': // Prefix: "start"

						if l := len("start"); len(elem) >= l && elem[0:l] == "start" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleStartAnalyticsArtifactMultipartUploadRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [3]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/api/"

			if l := len("/api/"); len(elem) >= l && elem[0:l] == "/api/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"

				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "ccounts/"

					if l := len("ccounts/"); len(elem) >= l && elem[0:l] == "ccounts/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "account_handle"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "PATCH":
							r.name = UpdateAccountOperation
							r.summary = "Update account"
							r.operationID = "updateAccount"
							r.pathPattern = "/api/accounts/{account_handle}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/tokens"

						if l := len("/tokens"); len(elem) >= l && elem[0:l] == "/tokens" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = CreateAccountTokenOperation
								r.summary = "Create a new account token."
								r.operationID = "createAccountToken"
								r.pathPattern = "/api/accounts/{account_handle}/tokens"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				case 'n': // Prefix: "nalytics"

					if l := len("nalytics"); len(elem) >= l && elem[0:l] == "nalytics" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = CreateCommandEventOperation
							r.summary = "Create a a new command analytics event"
							r.operationID = "createCommandEvent"
							r.pathPattern = "/api/analytics"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'u': // Prefix: "uth"

					if l := len("uth"); len(elem) >= l && elem[0:l] == "uth" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							r.name = AuthenticateOperation
							r.summary = "Authenticate with email and password."
							r.operationID = "authenticate"
							r.pathPattern = "/api/auth"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'd': // Prefix: "device_code/"

							if l := len("device_code/"); len(elem) >= l && elem[0:l] == "device_code/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "device_code"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GetDeviceCodeOperation
									r.summary = "Get a specific device code."
									r.operationID = "getDeviceCode"
									r.pathPattern = "/api/auth/device_code/{device_code}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						case 'r': // Prefix: "refresh_token"

							if l := len("refresh_token"); len(elem) >= l && elem[0:l] == "refresh_token" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = RefreshTokenOperation
									r.summary = "Request new tokens."
									r.operationID = "refreshToken"
									r.pathPattern = "/api/auth/refresh_token"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					}

				}

			case 'c': // Prefix: "cache"

				if l := len("cache"); len(elem) >= l && elem[0:l] == "cache" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = DownloadCacheArtifactOperation
						r.summary = "Downloads an artifact from the cache."
						r.operationID = "downloadCacheArtifact"
						r.pathPattern = "/api/cache"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "exists"

						if l := len("exists"); len(elem) >= l && elem[0:l] == "exists" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = CacheArtifactExistsOperation
								r.summary = "It checks if an artifact exists in the cache."
								r.operationID = "cacheArtifactExists"
								r.pathPattern = "/api/cache/exists"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'm': // Prefix: "multipart/"

						if l := len("multipart/"); len(elem) >= l && elem[0:l] == "multipart/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "complete"

							if l := len("complete"); len(elem) >= l && elem[0:l] == "complete" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = CompleteCacheArtifactMultipartUploadOperation
									r.summary = "It completes a multi-part upload."
									r.operationID = "completeCacheArtifactMultipartUpload"
									r.pathPattern = "/api/cache/multipart/complete"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'g': // Prefix: "generate-url"

							if l := len("generate-url"); len(elem) >= l && elem[0:l] == "generate-url" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = GenerateCacheArtifactMultipartUploadURLOperation
									r.summary = "It generates a signed URL for uploading a part."
									r.operationID = "generateCacheArtifactMultipartUploadURL"
									r.pathPattern = "/api/cache/multipart/generate-url"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 's': // Prefix: "start"

							if l := len("start"); len(elem) >= l && elem[0:l] == "start" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = StartCacheArtifactMultipartUploadOperation
									r.summary = "It initiates a multipart upload in the cache."
									r.operationID = "startCacheArtifactMultipartUpload"
									r.pathPattern = "/api/cache/multipart/start"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					}

				}

			case 'o': // Prefix: "organizations"

				if l := len("organizations"); len(elem) >= l && elem[0:l] == "organizations" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = ListOrganizationsOperation
						r.summary = "Lists the organizations"
						r.operationID = "listOrganizations"
						r.pathPattern = "/api/organizations"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = CreateOrganizationOperation
						r.summary = "Creates an organization"
						r.operationID = "createOrganization"
						r.pathPattern = "/api/organizations"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "organization_name"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = DeleteOrganizationOperation
							r.summary = "Deletes an organization"
							r.operationID = "deleteOrganization"
							r.pathPattern = "/api/organizations/{organization_name}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = ShowOrganizationOperation
							r.summary = "Shows an organization"
							r.operationID = "showOrganization"
							r.pathPattern = "/api/organizations/{organization_name}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = UpdateOrganization2Operation
							r.summary = "Updates an organization"
							r.operationID = "updateOrganization (2)"
							r.pathPattern = "/api/organizations/{organization_name}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = UpdateOrganizationOperation
							r.summary = "Updates an organization"
							r.operationID = "updateOrganization"
							r.pathPattern = "/api/organizations/{organization_name}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'i': // Prefix: "invitations"

							if l := len("invitations"); len(elem) >= l && elem[0:l] == "invitations" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = CancelInvitationOperation
									r.summary = "Cancels an invitation"
									r.operationID = "cancelInvitation"
									r.pathPattern = "/api/organizations/{organization_name}/invitations"
									r.args = args
									r.count = 1
									return r, true
								case "POST":
									r.name = CreateInvitationOperation
									r.summary = "Creates an invitation"
									r.operationID = "createInvitation"
									r.pathPattern = "/api/organizations/{organization_name}/invitations"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						case 'm': // Prefix: "members/"

							if l := len("members/"); len(elem) >= l && elem[0:l] == "members/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "user_name"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "PUT":
									r.name = UpdateOrganizationMemberOperation
									r.summary = "Updates a member in an organization"
									r.operationID = "updateOrganizationMember"
									r.pathPattern = "/api/organizations/{organization_name}/members/{user_name}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}

						case 'u': // Prefix: "usage"

							if l := len("usage"); len(elem) >= l && elem[0:l] == "usage" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = ShowOrganizationUsageOperation
									r.summary = "Shows the usage of an organization"
									r.operationID = "showOrganizationUsage"
									r.pathPattern = "/api/organizations/{organization_name}/usage"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						}

					}

				}

			case 'p': // Prefix: "projects"

				if l := len("projects"); len(elem) >= l && elem[0:l] == "projects" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = ListProjectsOperation
						r.summary = "List projects the authenticated user has access to."
						r.operationID = "listProjects"
						r.pathPattern = "/api/projects"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = CreateProjectOperation
						r.summary = "Create a new project."
						r.operationID = "createProject"
						r.pathPattern = "/api/projects"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "account_handle"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = DeleteProjectOperation
							r.summary = "Deletes a project with a given id."
							r.operationID = "deleteProject"
							r.pathPattern = "/api/projects/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "project_handle"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[1] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = ShowProjectOperation
								r.summary = "Returns a project based on the handle."
								r.operationID = "showProject"
								r.pathPattern = "/api/projects/{account_handle}/{project_handle}"
								r.args = args
								r.count = 2
								return r, true
							case "PUT":
								r.name = UpdateProjectOperation
								r.summary = "Updates a project"
								r.operationID = "updateProject"
								r.pathPattern = "/api/projects/{account_handle}/{project_handle}"
								r.args = args
								r.count = 2
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "cache/"

								if l := len("cache/"); len(elem) >= l && elem[0:l] == "cache/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "ac"

									if l := len("ac"); len(elem) >= l && elem[0:l] == "ac" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = UploadCacheActionItemOperation
											r.summary = "It uploads a given cache action item."
											r.operationID = "uploadCacheActionItem"
											r.pathPattern = "/api/projects/{account_handle}/{project_handle}/cache/ac"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"

										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "hash"
										// Leaf parameter, slashes are prohibited
										idx := strings.IndexByte(elem, '/')
										if idx >= 0 {
											break
										}
										args[2] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = GetCacheActionItemOperation
												r.summary = "Get a cache action item."
												r.operationID = "getCacheActionItem"
												r.pathPattern = "/api/projects/{account_handle}/{project_handle}/cache/ac/{hash}"
												r.args = args
												r.count = 3
												return r, true
											default:
												return
											}
										}

									}

								case 'c': // Prefix: "clean"

									if l := len("clean"); len(elem) >= l && elem[0:l] == "clean" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "PUT":
											r.name = CleanCacheOperation
											r.summary = "Cleans cache for a given project"
											r.operationID = "cleanCache"
											r.pathPattern = "/api/projects/{account_handle}/{project_handle}/cache/clean"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

								}

							case 'p': // Prefix: "previews"

								if l := len("previews"); len(elem) >= l && elem[0:l] == "previews" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = ListPreviewsOperation
										r.summary = "List previews."
										r.operationID = "listPreviews"
										r.pathPattern = "/api/projects/{account_handle}/{project_handle}/previews"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"

									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'c': // Prefix: "complete"
										origElem := elem
										if l := len("complete"); len(elem) >= l && elem[0:l] == "complete" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = CompletePreviewsMultipartUploadOperation
												r.summary = "It completes a multi-part upload."
												r.operationID = "completePreviewsMultipartUpload"
												r.pathPattern = "/api/projects/{account_handle}/{project_handle}/previews/complete"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 'g': // Prefix: "generate-url"
										origElem := elem
										if l := len("generate-url"); len(elem) >= l && elem[0:l] == "generate-url" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = GeneratePreviewsMultipartUploadURLOperation
												r.summary = "It generates a signed URL for uploading a part."
												r.operationID = "generatePreviewsMultipartUploadURL"
												r.pathPattern = "/api/projects/{account_handle}/{project_handle}/previews/generate-url"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 's': // Prefix: "start"
										origElem := elem
										if l := len("start"); len(elem) >= l && elem[0:l] == "start" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = StartPreviewsMultipartUploadOperation
												r.summary = "It initiates a multipart upload for a preview artifact."
												r.operationID = "startPreviewsMultipartUpload"
												r.pathPattern = "/api/projects/{account_handle}/{project_handle}/previews/start"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}
									// Param: "preview_id"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[2] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = DownloadPreviewOperation
											r.summary = "Returns a preview with a given id."
											r.operationID = "downloadPreview"
											r.pathPattern = "/api/projects/{account_handle}/{project_handle}/previews/{preview_id}"
											r.args = args
											r.count = 3
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/icons"

										if l := len("/icons"); len(elem) >= l && elem[0:l] == "/icons" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = UploadPreviewIconOperation
												r.summary = "Uploads a preview icon."
												r.operationID = "uploadPreviewIcon"
												r.pathPattern = "/api/projects/{account_handle}/{project_handle}/previews/{preview_id}/icons"
												r.args = args
												r.count = 3
												return r, true
											default:
												return
											}
										}

									}

								}

							case 'r': // Prefix: "runs"

								if l := len("runs"); len(elem) >= l && elem[0:l] == "runs" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = ListRunsOperation
										r.summary = "List runs associated with a given project."
										r.operationID = "listRuns"
										r.pathPattern = "/api/projects/{account_handle}/{project_handle}/runs"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}

							case 't': // Prefix: "tokens"

								if l := len("tokens"); len(elem) >= l && elem[0:l] == "tokens" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = ListProjectTokensOperation
										r.summary = "List all project tokens."
										r.operationID = "listProjectTokens"
										r.pathPattern = "/api/projects/{account_handle}/{project_handle}/tokens"
										r.args = args
										r.count = 2
										return r, true
									case "POST":
										r.name = CreateProjectTokenOperation
										r.summary = "Create a new project token."
										r.operationID = "createProjectToken"
										r.pathPattern = "/api/projects/{account_handle}/{project_handle}/tokens"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"

									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "id"
									// Leaf parameter, slashes are prohibited
									idx := strings.IndexByte(elem, '/')
									if idx >= 0 {
										break
									}
									args[2] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = RevokeProjectTokenOperation
											r.summary = "Revokes a project token."
											r.operationID = "revokeProjectToken"
											r.pathPattern = "/api/projects/{account_handle}/{project_handle}/tokens/{id}"
											r.args = args
											r.count = 3
											return r, true
										default:
											return
										}
									}

								}

							}

						}

					}

				}

			case 'r': // Prefix: "runs/"

				if l := len("runs/"); len(elem) >= l && elem[0:l] == "runs/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "run_id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "complete"

						if l := len("complete"); len(elem) >= l && elem[0:l] == "complete" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = CompleteAnalyticsArtifactMultipartUploadOperation
								r.summary = "It completes a multi-part upload."
								r.operationID = "completeAnalyticsArtifactMultipartUpload"
								r.pathPattern = "/api/runs/{run_id}/complete"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '_': // Prefix: "_artifacts_uploads"

							if l := len("_artifacts_uploads"); len(elem) >= l && elem[0:l] == "_artifacts_uploads" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "PUT":
									r.name = CompleteAnalyticsArtifactsUploadsOperation
									r.summary = "Completes artifacts uploads for a given command event"
									r.operationID = "completeAnalyticsArtifactsUploads"
									r.pathPattern = "/api/runs/{run_id}/complete_artifacts_uploads"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						}

					case 'g': // Prefix: "generate-url"

						if l := len("generate-url"); len(elem) >= l && elem[0:l] == "generate-url" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = GenerateAnalyticsArtifactMultipartUploadURLOperation
								r.summary = "It generates a signed URL for uploading a part."
								r.operationID = "generateAnalyticsArtifactMultipartUploadURL"
								r.pathPattern = "/api/runs/{run_id}/generate-url"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					case 's': // Prefix: "start"

						if l := len("start"); len(elem) >= l && elem[0:l] == "start" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = StartAnalyticsArtifactMultipartUploadOperation
								r.summary = "It initiates a multipart upload for a command event artifact."
								r.operationID = "startAnalyticsArtifactMultipartUpload"
								r.pathPattern = "/api/runs/{run_id}/start"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				}

			}

		}
	}
	return r, false
}
