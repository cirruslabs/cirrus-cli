/*
 * Provides a container compatible interface.
 *
 * This documentation describes the Podman v2.0 RESTful API. It replaces the Podman v1.0 API and was initially delivered along with Podman v2.0.  It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /var/run/docker.sock to /run/podman/podman.sock  See podman-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v1.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v1.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v1.0.0/libpod/images/json' | jq
 *
 * API version: 0.0.1
 * Contact: podman@lists.podman.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

type ContainerBasicConfig struct {
	// Annotations are key-value options passed into the container runtime that can be used to trigger special behavior. Optional.
	Annotations map[string]string `json:"annotations,omitempty"`
	// Command is the container's command. If not given and Image is specified, this will be populated by the image's configuration. Optional.
	Command []string `json:"command,omitempty"`
	// ConmonPidFile is a path at which a PID file for Conmon will be placed. If not given, a default location will be used. Optional.
	ConmonPidFile string `json:"conmon_pid_file,omitempty"`
	// ContainerCreateCommand is the command that was used to create this container. This will be shown in the output of Inspect() on the container, and may also be used by some tools that wish to recreate the container (e.g. `podman generate systemd --new`). Optional.
	ContainerCreateCommand []string `json:"containerCreateCommand,omitempty"`
	// Entrypoint is the container's entrypoint. If not given and Image is specified, this will be populated by the image's configuration. Optional.
	Entrypoint []string `json:"entrypoint,omitempty"`
	// Env is a set of environment variables that will be set in the container. Optional.
	Env map[string]string `json:"env,omitempty"`
	// EnvHost indicates that the host environment should be added to container Optional.
	EnvHost bool `json:"env_host,omitempty"`
	// Hostname is the container's hostname. If not set, the hostname will not be modified (if UtsNS is not private) or will be set to the container ID (if UtsNS is private). Conflicts with UtsNS if UtsNS is not set to private. Optional.
	Hostname string `json:"hostname,omitempty"`
	// EnvHTTPProxy indicates that the http host proxy environment variables should be added to container Optional.
	Httpproxy bool `json:"httpproxy,omitempty"`
	// Labels are key-value pairs that are used to add metadata to containers. Optional.
	Labels map[string]string `json:"labels,omitempty"`
	LogConfiguration *LogConfig `json:"log_configuration,omitempty"`
	// Name is the name the container will be given. If no name is provided, one will be randomly generated. Optional.
	Name string `json:"name,omitempty"`
	// Namespace is the libpod namespace the container will be placed in. Optional.
	Namespace string `json:"namespace,omitempty"`
	// OCIRuntime is the name of the OCI runtime that will be used to create the container. If not specified, the default will be used. Optional.
	OciRuntime string `json:"oci_runtime,omitempty"`
	Pidns *Namespace `json:"pidns,omitempty"`
	// Pod is the ID of the pod the container will join. Optional.
	Pod string `json:"pod,omitempty"`
	// RawImageName is the user-specified and unprocessed input referring to a local or a remote image.
	RawImageName string `json:"raw_image_name,omitempty"`
	// Remove indicates if the container should be removed once it has been started and exits
	Remove bool `json:"remove,omitempty"`
	// RestartPolicy is the container's restart policy - an action which will be taken when the container exits. If not given, the default policy, which does nothing, will be used. Optional.
	RestartPolicy string `json:"restart_policy,omitempty"`
	// RestartRetries is the number of attempts that will be made to restart the container. Only available when RestartPolicy is set to \"on-failure\". Optional.
	RestartTries int32 `json:"restart_tries,omitempty"`
	// Determine how to handle the NOTIFY_SOCKET - do we participate or pass it through \"container\" - let the OCI runtime deal with it, advertise conmon's MAINPID \"conmon-only\" - advertise conmon's MAINPID, send READY when started, don't pass to OCI \"ignore\" - unset NOTIFY_SOCKET
	SdnotifyMode string `json:"sdnotifyMode,omitempty"`
	// Stdin is whether the container will keep its STDIN open.
	Stdin bool `json:"stdin,omitempty"`
	StopSignal int64 `json:"stop_signal,omitempty"`
	// StopTimeout is a timeout between the container's stop signal being sent and SIGKILL being sent. If not provided, the default will be used. If 0 is used, stop signal will not be sent, and SIGKILL will be sent instead. Optional.
	StopTimeout int32 `json:"stop_timeout,omitempty"`
	// Sysctl sets kernel parameters for the container
	Sysctl map[string]string `json:"sysctl,omitempty"`
	// Systemd is whether the container will be started in systemd mode. Valid options are \"true\", \"false\", and \"always\". \"true\" enables this mode only if the binary run in the container is sbin/init or systemd. \"always\" unconditionally enables systemd mode. \"false\" unconditionally disables systemd mode. If enabled, mounts and stop signal will be modified. If set to \"always\" or set to \"true\" and conditionally triggered, conflicts with StopSignal. If not specified, \"false\" will be assumed. Optional.
	Systemd string `json:"systemd,omitempty"`
	// Terminal is whether the container will create a PTY. Optional.
	Terminal bool `json:"terminal,omitempty"`
	// Timezone is the timezone inside the container. Local means it has the same timezone as the host machine
	Timezone string `json:"timezone,omitempty"`
	Utsns *Namespace `json:"utsns,omitempty"`
}
