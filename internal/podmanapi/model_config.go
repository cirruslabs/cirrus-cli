/*
 * Provides a container compatible interface.
 *
 * This documentation describes the Podman v2.0 RESTful API. It replaces the Podman v1.0 API and was initially delivered along with Podman v2.0.  It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /var/run/docker.sock to /run/podman/podman.sock  See podman-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v1.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v1.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v1.0.0/libpod/images/json' | jq
 *
 * API version: 0.0.1
 * Contact: podman@lists.podman.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

// It should hold only portable information about the container. Here, \"portable\" means \"independent from the host we are running on\". Non-portable information *should* appear in HostConfig. All fields added to this struct must be marked `omitempty` to keep getting predictable hashes from the old `v1Compatibility` configuration.
type Config struct {
	ArgsEscaped bool `json:"ArgsEscaped,omitempty"`
	AttachStderr bool `json:"AttachStderr,omitempty"`
	AttachStdin bool `json:"AttachStdin,omitempty"`
	AttachStdout bool `json:"AttachStdout,omitempty"`
	Cmd *[]string `json:"Cmd,omitempty"`
	Domainname string `json:"Domainname,omitempty"`
	Entrypoint *[]string `json:"Entrypoint,omitempty"`
	Env []string `json:"Env,omitempty"`
	ExposedPorts *map[string]interface{} `json:"ExposedPorts,omitempty"`
	Healthcheck *HealthConfig `json:"Healthcheck,omitempty"`
	Hostname string `json:"Hostname,omitempty"`
	Image string `json:"Image,omitempty"`
	Labels map[string]string `json:"Labels,omitempty"`
	MacAddress string `json:"MacAddress,omitempty"`
	NetworkDisabled bool `json:"NetworkDisabled,omitempty"`
	OnBuild []string `json:"OnBuild,omitempty"`
	OpenStdin bool `json:"OpenStdin,omitempty"`
	Shell *[]string `json:"Shell,omitempty"`
	StdinOnce bool `json:"StdinOnce,omitempty"`
	StopSignal string `json:"StopSignal,omitempty"`
	StopTimeout int64 `json:"StopTimeout,omitempty"`
	Tty bool `json:"Tty,omitempty"`
	User string `json:"User,omitempty"`
	Volumes map[string]interface{} `json:"Volumes,omitempty"`
	WorkingDir string `json:"WorkingDir,omitempty"`
}
