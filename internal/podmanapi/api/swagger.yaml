---
swagger: "2.0"
info:
  description: "This documentation describes the Podman v2.0 RESTful API.\nIt replaces\
    \ the Podman v1.0 API and was initially delivered\nalong with Podman v2.0.  It\
    \ consists of a Docker-compatible\nAPI and a Libpod API providing support for\
    \ Podman’s unique\nfeatures such as pods.\n\nTo start the service and keep it\
    \ running for 5,000 seconds (-t 0 runs forever):\n\npodman system service -t 5000\
    \ &\n\nYou can then use cURL on the socket using requests documented below.\n\n\
    NOTE: if you install the package podman-docker, it will create a symbolic\nlink\
    \ for /var/run/docker.sock to /run/podman/podman.sock\n\nSee podman-service(1)\
    \ for more information.\n\nQuick Examples:\n\n'podman info'\n\ncurl --unix-socket\
    \ /run/podman/podman.sock http://d/v1.0.0/libpod/info\n\n'podman pull quay.io/containers/podman'\n\
    \ncurl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v1.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'\n\
    \n'podman list images'\n\ncurl --unix-socket /run/podman/podman.sock -v 'http://d/v1.0.0/libpod/images/json'\
    \ | jq"
  version: "0.0.1"
  title: "Provides a container compatible interface."
  contact:
    name: "Podman"
    url: "https://podman.io/community/"
    email: "podman@lists.podman.io"
  license:
    name: "Apache-2.0"
    url: "https://opensource.org/licenses/Apache-2.0"
  x-logo:
  - url: "https://raw.githubusercontent.com/containers/libpod/master/logo/podman-logo.png"
  - altText: "Podman logo"
host: "podman.io"
basePath: "/"
tags:
- name: "containers"
  description: "Actions related to containers"
- name: "exec"
  description: "Actions related to exec"
- name: "images"
  description: "Actions related to images"
- name: "manifests"
  description: "Actions related to manifests"
- name: "networks"
  description: "Actions related to networks"
- name: "pods"
  description: "Actions related to pods"
- name: "volumes"
  description: "Actions related to volumes"
- name: "system"
  description: "Actions related to Podman engine"
- name: "containers (compat)"
  description: "Actions related to containers for the compatibility endpoints"
- name: "exec (compat)"
  description: "Actions related to exec for the compatibility endpoints"
- name: "images (compat)"
  description: "Actions related to images for the compatibility endpoints"
- name: "networks (compat)"
  description: "Actions related to compatibility networks"
- name: "volumes (compat)"
  description: "Actions related to volumes for the compatibility endpoints"
- name: "system (compat)"
  description: "Actions related to Podman and compatibility engines"
schemes:
- "http"
- "https"
consumes:
- "application/json"
- "application/x-tar"
produces:
- "application/json"
- "text/plain"
- "text/html"
paths:
  /build:
    post:
      tags:
      - "images (compat)"
      summary: "Create image"
      description: "Build an image from the given Dockerfile(s)"
      operationId: "buildImage"
      produces:
      - "application/json"
      parameters:
      - name: "dockerfile"
        in: "query"
        description: "Path within the build context to the `Dockerfile`.\nThis is\
          \ ignored if remote is specified and points to an external `Dockerfile`.\n"
        required: false
        type: "string"
        default: "Dockerfile"
        x-exportParamName: "Dockerfile"
        x-optionalDataType: "String"
      - name: "t"
        in: "query"
        description: "A name and optional tag to apply to the image in the `name:tag`\
          \ format. If you omit the tag the default latest value is assumed. You can\
          \ provide several t parameters."
        required: false
        type: "string"
        default: "latest"
        x-exportParamName: "T"
        x-optionalDataType: "String"
      - name: "extrahosts"
        in: "query"
        description: "TBD Extra hosts to add to /etc/hosts\n(As of version 1.xx)\n"
        required: false
        type: "string"
        x-exportParamName: "Extrahosts"
        x-optionalDataType: "String"
      - name: "remote"
        in: "query"
        description: "A Git repository URI or HTTP/HTTPS context URI.\nIf the URI\
          \ points to a single text file, the file’s contents are placed\ninto a file\
          \ called Dockerfile and the image is built from that file. If\nthe URI points\
          \ to a tarball, the file is downloaded by the daemon and the\ncontents therein\
          \ used as the context for the build. If the URI points to a\ntarball and\
          \ the dockerfile parameter is also specified, there must be a file\nwith\
          \ the corresponding path inside the tarball.\n(As of version 1.xx)\n"
        required: false
        type: "string"
        x-exportParamName: "Remote"
        x-optionalDataType: "String"
      - name: "q"
        in: "query"
        description: "Suppress verbose build output\n"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Q"
        x-optionalDataType: "Bool"
      - name: "nocache"
        in: "query"
        description: "Do not use the cache when building the image\n(As of version\
          \ 1.xx)\n"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Nocache"
        x-optionalDataType: "Bool"
      - name: "cachefrom"
        in: "query"
        description: "JSON array of images used to build cache resolution\n(As of\
          \ version 1.xx)\n"
        required: false
        type: "string"
        x-exportParamName: "Cachefrom"
        x-optionalDataType: "String"
      - name: "pull"
        in: "query"
        description: "Attempt to pull the image even if an older image exists locally\n\
          (As of version 1.xx)\n"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Pull"
        x-optionalDataType: "Bool"
      - name: "rm"
        in: "query"
        description: "Remove intermediate containers after a successful build\n(As\
          \ of version 1.xx)\n"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "Rm"
        x-optionalDataType: "Bool"
      - name: "forcerm"
        in: "query"
        description: "Always remove intermediate containers, even upon failure\n(As\
          \ of version 1.xx)\n"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Forcerm"
        x-optionalDataType: "Bool"
      - name: "memory"
        in: "query"
        description: "Memory is the upper limit (in bytes) on how much memory running\
          \ containers can use\n(As of version 1.xx)\n"
        required: false
        type: "integer"
        x-exportParamName: "Memory"
        x-optionalDataType: "Int32"
      - name: "memswap"
        in: "query"
        description: "MemorySwap limits the amount of memory and swap together\n(As\
          \ of version 1.xx)\n"
        required: false
        type: "integer"
        x-exportParamName: "Memswap"
        x-optionalDataType: "Int32"
      - name: "cpushares"
        in: "query"
        description: "CPUShares (relative weight\n(As of version 1.xx)\n"
        required: false
        type: "integer"
        x-exportParamName: "Cpushares"
        x-optionalDataType: "Int32"
      - name: "cpusetcpus"
        in: "query"
        description: "CPUSetCPUs in which to allow execution (0-3, 0,1)\n(As of version\
          \ 1.xx)\n"
        required: false
        type: "string"
        x-exportParamName: "Cpusetcpus"
        x-optionalDataType: "String"
      - name: "cpuperiod"
        in: "query"
        description: "CPUPeriod limits the CPU CFS (Completely Fair Scheduler) period\n\
          (As of version 1.xx)\n"
        required: false
        type: "integer"
        x-exportParamName: "Cpuperiod"
        x-optionalDataType: "Int32"
      - name: "cpuquota"
        in: "query"
        description: "CPUQuota limits the CPU CFS (Completely Fair Scheduler) quota\n\
          (As of version 1.xx)\n"
        required: false
        type: "integer"
        x-exportParamName: "Cpuquota"
        x-optionalDataType: "Int32"
      - name: "buildargs"
        in: "query"
        description: "JSON map of string pairs denoting build-time variables.\nFor\
          \ example, the build argument `Foo` with the value of `bar` would be encoded\
          \ in JSON as `[\"Foo\":\"bar\"]`.\n\nFor example, buildargs={\"Foo\":\"\
          bar\"}.\n\nNote(s):\n* This should not be used to pass secrets.\n* The value\
          \ of buildargs should be URI component encoded before being passed to the\
          \ API.\n\n(As of version 1.xx)\n"
        required: false
        type: "string"
        x-exportParamName: "Buildargs"
        x-optionalDataType: "String"
      - name: "shmsize"
        in: "query"
        description: "ShmSize is the \"size\" value to use when mounting an shmfs\
          \ on the container's /dev/shm directory.\nDefault is 64MB\n(As of version\
          \ 1.xx)\n"
        required: false
        type: "integer"
        default: 67108864
        x-exportParamName: "Shmsize"
        x-optionalDataType: "Int32"
      - name: "squash"
        in: "query"
        description: "Silently ignored.\nSquash the resulting images layers into a\
          \ single layer\n(As of version 1.xx)\n"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Squash"
        x-optionalDataType: "Bool"
      - name: "labels"
        in: "query"
        description: "JSON map of key, value pairs to set as labels on the new image\n\
          (As of version 1.xx)\n"
        required: false
        type: "string"
        x-exportParamName: "Labels"
        x-optionalDataType: "String"
      - name: "networkmode"
        in: "query"
        description: "Sets the networking mode for the run commands during build.\n\
          Supported standard values are:\n  * `bridge` limited to containers within\
          \ a single host, port mapping required for external access\n  * `host` no\
          \ isolation between host and containers on this network\n  * `none` disable\
          \ all networking for this container\n  * container:<nameOrID> share networking\
          \ with given container\n  ---All other values are assumed to be a custom\
          \ network's name\n(As of version 1.xx)\n"
        required: false
        type: "string"
        default: "bridge"
        x-exportParamName: "Networkmode"
        x-optionalDataType: "String"
      - name: "platform"
        in: "query"
        description: "Platform format os[/arch[/variant]]\n(As of version 1.xx)\n"
        required: false
        type: "string"
        x-exportParamName: "Platform"
        x-optionalDataType: "String"
      - name: "target"
        in: "query"
        description: "Target build stage\n(As of version 1.xx)\n"
        required: false
        type: "string"
        x-exportParamName: "Target"
        x-optionalDataType: "String"
      - name: "outputs"
        in: "query"
        description: "output configuration TBD\n(As of version 1.xx)\n"
        required: false
        type: "string"
        x-exportParamName: "Outputs"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK (As of version 1.xx)"
          schema:
            $ref: "#/definitions/inline_response_200"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /commit:
    post:
      tags:
      - "containers (compat)"
      summary: "New Image"
      description: "Create a new image from a container"
      operationId: "commitContainer"
      produces:
      - "application/json"
      parameters:
      - name: "container"
        in: "query"
        description: "the name or ID of a container"
        required: false
        type: "string"
        x-exportParamName: "Container"
        x-optionalDataType: "String"
      - name: "repo"
        in: "query"
        description: "the repository name for the created image"
        required: false
        type: "string"
        x-exportParamName: "Repo"
        x-optionalDataType: "String"
      - name: "tag"
        in: "query"
        description: "tag name for the created image"
        required: false
        type: "string"
        x-exportParamName: "Tag"
        x-optionalDataType: "String"
      - name: "comment"
        in: "query"
        description: "commit message"
        required: false
        type: "string"
        x-exportParamName: "Comment"
        x-optionalDataType: "String"
      - name: "author"
        in: "query"
        description: "author of the image"
        required: false
        type: "string"
        x-exportParamName: "Author"
        x-optionalDataType: "String"
      - name: "pause"
        in: "query"
        description: "pause the container before committing it"
        required: false
        type: "boolean"
        x-exportParamName: "Pause"
        x-optionalDataType: "Bool"
      - name: "changes"
        in: "query"
        description: "instructions to apply while committing in Dockerfile format"
        required: false
        type: "string"
        x-exportParamName: "Changes"
        x-optionalDataType: "String"
      responses:
        "201":
          description: "no error"
        "404":
          description: "No such image"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /containers/{name}:
    delete:
      tags:
      - "containers (compat)"
      summary: "Remove a container"
      operationId: "removeContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "force"
        in: "query"
        description: "If the container is running, kill it before removing it."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      - name: "v"
        in: "query"
        description: "Remove the volumes associated with the container."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "V"
        x-optionalDataType: "Bool"
      - name: "link"
        in: "query"
        description: "not supported"
        required: false
        type: "boolean"
        x-exportParamName: "Link"
        x-optionalDataType: "Bool"
      responses:
        "204":
          description: "no error"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "Conflict error in operation"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /containers/{name}/archive:
    get:
      tags:
      - "containers (compat)"
      summary: "Get files from a container"
      description: "Get a tar archive of files from a container"
      operationId: "getArchive"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "container name or id"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "path"
        in: "query"
        description: "Path to a directory in the container to extract"
        required: true
        type: "string"
        x-exportParamName: "Path"
      responses:
        "200":
          description: "no error"
          schema:
            type: "string"
            format: "binary"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
    put:
      tags:
      - "containers (compat)"
      summary: "Put files into a container"
      description: "Put a tar archive of files into a container"
      operationId: "putArchive"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "container name or id"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "path"
        in: "query"
        description: "Path to a directory in the container to extract"
        required: true
        type: "string"
        x-exportParamName: "Path"
      - name: "noOverwriteDirNonDir"
        in: "query"
        description: "if unpacking the given content would cause an existing directory\
          \ to be replaced with a non-directory and vice versa (1 or true)"
        required: false
        type: "string"
        x-exportParamName: "NoOverwriteDirNonDir"
        x-optionalDataType: "String"
      - name: "copyUIDGID"
        in: "query"
        description: "copy UID/GID maps to the dest file or di (1 or true)"
        required: false
        type: "string"
        x-exportParamName: "CopyUIDGID"
        x-optionalDataType: "String"
      - in: "body"
        name: "request"
        description: "tarfile of files to copy into the container"
        required: false
        schema:
          type: "string"
        x-exportParamName: "Request"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "no error"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "403":
          description: "the container rootfs is read-only"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /containers/{name}/attach:
    post:
      tags:
      - "containers (compat)"
      summary: "Attach to a container"
      description: "Hijacks the connection to forward the container's standard streams\
        \ to the client."
      operationId: "attachContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "detachKeys"
        in: "query"
        description: "keys to use for detaching from the container"
        required: false
        type: "string"
        x-exportParamName: "DetachKeys"
        x-optionalDataType: "String"
      - name: "logs"
        in: "query"
        description: "Stream all logs from the container across the connection. Happens\
          \ before streaming attach (if requested). At least one of logs or stream\
          \ must be set"
        required: false
        type: "boolean"
        x-exportParamName: "Logs"
        x-optionalDataType: "Bool"
      - name: "stream"
        in: "query"
        description: "Attach to the container. If unset, and logs is set, only the\
          \ container's logs will be sent. At least one of stream or logs must be\
          \ set"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "Stream"
        x-optionalDataType: "Bool"
      - name: "stdout"
        in: "query"
        description: "Attach to container STDOUT"
        required: false
        type: "boolean"
        x-exportParamName: "Stdout"
        x-optionalDataType: "Bool"
      - name: "stderr"
        in: "query"
        description: "Attach to container STDERR"
        required: false
        type: "boolean"
        x-exportParamName: "Stderr"
        x-optionalDataType: "Bool"
      - name: "stdin"
        in: "query"
        description: "Attach to container STDIN"
        required: false
        type: "boolean"
        x-exportParamName: "Stdin"
        x-optionalDataType: "Bool"
      responses:
        "101":
          description: "No error, connection has been hijacked for transporting streams."
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /containers/{name}/exec:
    post:
      tags:
      - "exec (compat)"
      summary: "Create an exec instance"
      description: "Create an exec session to run a command inside a running container.\
        \ Exec sessions will be automatically removed 5 minutes after they exit."
      operationId: "createExec"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "name of container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "control"
        description: "Attributes for create"
        required: false
        schema:
          $ref: "#/definitions/control"
        x-exportParamName: "Control"
      responses:
        "201":
          description: "no error"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "container is paused"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /containers/{name}/export:
    get:
      tags:
      - "containers (compat)"
      summary: "Export a container"
      description: "Export the contents of a container as a tarball."
      operationId: "exportContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "tarball is returned in body"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /containers/{name}/json:
    get:
      tags:
      - "containers (compat)"
      summary: "Inspect container"
      description: "Return low-level information about a container."
      operationId: "getContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or id of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "size"
        in: "query"
        description: "include the size of the container"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Size"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Inspect container"
          schema:
            $ref: "#/definitions/inline_response_200_1"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /containers/{name}/kill:
    post:
      tags:
      - "containers (compat)"
      summary: "Kill container"
      description: "Signal to send to the container as an integer or string (e.g.\
        \ SIGINT)"
      operationId: "killContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "signal"
        in: "query"
        description: "signal to be sent to container"
        required: false
        type: "string"
        default: "SIGKILL"
        x-exportParamName: "Signal"
        x-optionalDataType: "String"
      responses:
        "204":
          description: "no error"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "Conflict error in operation"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /containers/{name}/logs:
    get:
      tags:
      - "containers (compat)"
      summary: "Get container logs"
      description: "Get stdout and stderr logs from a container."
      operationId: "logsFromContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "follow"
        in: "query"
        description: "Keep connection after returning logs."
        required: false
        type: "boolean"
        x-exportParamName: "Follow"
        x-optionalDataType: "Bool"
      - name: "stdout"
        in: "query"
        description: "Return logs from stdout"
        required: false
        type: "boolean"
        x-exportParamName: "Stdout"
        x-optionalDataType: "Bool"
      - name: "stderr"
        in: "query"
        description: "Return logs from stderr"
        required: false
        type: "boolean"
        x-exportParamName: "Stderr"
        x-optionalDataType: "Bool"
      - name: "since"
        in: "query"
        description: "Only return logs since this time, as a UNIX timestamp"
        required: false
        type: "string"
        x-exportParamName: "Since"
        x-optionalDataType: "String"
      - name: "until"
        in: "query"
        description: "Only return logs before this time, as a UNIX timestamp"
        required: false
        type: "string"
        x-exportParamName: "Until"
        x-optionalDataType: "String"
      - name: "timestamps"
        in: "query"
        description: "Add timestamps to every log line"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Timestamps"
        x-optionalDataType: "Bool"
      - name: "tail"
        in: "query"
        description: "Only return this number of log lines from the end of the logs"
        required: false
        type: "string"
        default: "all"
        x-exportParamName: "Tail"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "logs returned as a stream in response body."
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /containers/{name}/pause:
    post:
      tags:
      - "containers (compat)"
      summary: "Pause container"
      description: "Use the cgroups freezer to suspend all processes in a container."
      operationId: "pauseContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "204":
          description: "no error"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /containers/{name}/resize:
    post:
      tags:
      - "containers (compat)"
      summary: "Resize a container's TTY"
      description: "Resize the terminal attached to a container (for use with Attach)."
      operationId: "resizeContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "h"
        in: "query"
        description: "Height to set for the terminal, in characters"
        required: false
        type: "integer"
        x-exportParamName: "H"
        x-optionalDataType: "Int32"
      - name: "w"
        in: "query"
        description: "Width to set for the terminal, in characters"
        required: false
        type: "integer"
        x-exportParamName: "W"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Success"
          schema:
            type: "object"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /containers/{name}/restart:
    post:
      tags:
      - "containers (compat)"
      summary: "Restart container"
      operationId: "restartContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "t"
        in: "query"
        description: "timeout before sending kill signal to container"
        required: false
        type: "integer"
        x-exportParamName: "T"
        x-optionalDataType: "Int32"
      responses:
        "204":
          description: "no error"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /containers/{name}/start:
    post:
      tags:
      - "containers (compat)"
      summary: "Start a container"
      operationId: "startContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "detachKeys"
        in: "query"
        description: "Override the key sequence for detaching a container. Format\
          \ is a single character [a-Z] or ctrl-<value> where <value> is one of: a-z,\
          \ @, ^, [, , or _."
        required: false
        type: "string"
        default: "ctrl-p,ctrl-q"
        x-exportParamName: "DetachKeys"
        x-optionalDataType: "String"
      responses:
        "204":
          description: "no error"
        "304":
          description: "Container already started"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /containers/{name}/stats:
    get:
      tags:
      - "containers (compat)"
      summary: "Get stats for a container"
      description: "This returns a live stream of a container’s resource usage statistics."
      operationId: "statsContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "stream"
        in: "query"
        description: "Stream the output"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "Stream"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /containers/{name}/stop:
    post:
      tags:
      - "containers (compat)"
      summary: "Stop a container"
      description: "Stop a container"
      operationId: "stopContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "t"
        in: "query"
        description: "number of seconds to wait before killing container"
        required: false
        type: "integer"
        x-exportParamName: "T"
        x-optionalDataType: "Int32"
      responses:
        "204":
          description: "no error"
        "304":
          description: "Container already stopped"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /containers/{name}/top:
    get:
      tags:
      - "containers (compat)"
      summary: "List processes running inside a container"
      operationId: "topContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "ps_args"
        in: "query"
        description: "arguments to pass to ps such as aux. Requires ps(1) to be installed\
          \ in the container if no ps(1) compatible AIX descriptors are used."
        required: false
        type: "string"
        x-exportParamName: "PsArgs"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "List processes in container"
          schema:
            $ref: "#/definitions/inline_response_200_2"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /containers/{name}/unpause:
    post:
      tags:
      - "containers (compat)"
      summary: "Unpause container"
      description: "Resume a paused container"
      operationId: "unpauseContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "204":
          description: "no error"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /containers/{name}/wait:
    post:
      tags:
      - "containers (compat)"
      summary: "Wait on a container"
      description: "Block until a container stops or given condition is met."
      operationId: "waitContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "condition"
        in: "query"
        description: "wait until container is to a given condition. default is stopped.\
          \ valid conditions are:\n  - configured\n  - created\n  - exited\n  - paused\n\
          \  - running\n  - stopped\n"
        required: false
        type: "string"
        x-exportParamName: "Condition"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Wait container"
          schema:
            $ref: "#/definitions/inline_response_200_3"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /containers/create:
    post:
      tags:
      - "containers (compat)"
      summary: "Create a container"
      operationId: "createContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "container name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        "201":
          description: "Create container"
          schema:
            $ref: "#/definitions/inline_response_201"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "Conflict error in operation"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /containers/json:
    get:
      tags:
      - "containers (compat)"
      summary: "List containers"
      description: "Returns a list of containers"
      operationId: "listContainers"
      produces:
      - "application/json"
      parameters:
      - name: "all"
        in: "query"
        description: "Return all containers. By default, only running containers are\
          \ shown"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "All"
        x-optionalDataType: "Bool"
      - name: "limit"
        in: "query"
        description: "Return this number of most recently created containers, including\
          \ non-running ones."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "size"
        in: "query"
        description: "Return the size of container as fields SizeRw and SizeRootFs."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Size"
        x-optionalDataType: "Bool"
      - name: "filters"
        in: "query"
        description: "Returns a list of containers.\n - ancestor=(<image-name>[:<tag>],\
          \ <image id>, or <image@digest>)\n - before=(<container id> or <container\
          \ name>)\n - expose=(<port>[/<proto>]|<startport-endport>/[<proto>])\n -\
          \ exited=<int> containers with exit code of <int>\n - health=(starting|healthy|unhealthy|none)\n\
          \ - id=<ID> a container's ID\n - is-task=(true|false)\n - label=key or label=\"\
          key=value\" of a container label\n - name=<name> a container's name\n -\
          \ network=(<network id> or <network name>)\n - publish=(<port>[/<proto>]|<startport-endport>/[<proto>])\n\
          \ - since=(<container id> or <container name>)\n - status=(created|restarting|running|removing|paused|exited|dead)\n\
          \ - volume=(<volume name> or <mount point destination>)\n"
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "List Containers"
          schema:
            type: "object"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /containers/prune:
    post:
      tags:
      - "containers (compat)"
      summary: "Delete stopped containers"
      description: "Remove containers not in use"
      operationId: "pruneContainers"
      produces:
      - "application/json"
      parameters:
      - name: "filters"
        in: "query"
        description: "Filters to process on the prune list, encoded as JSON (a `map[string][]string`).\
          \  Available filters:\n - `until=<timestamp>` Prune containers created before\
          \ this timestamp. The `<timestamp>` can be Unix timestamps, date formatted\
          \ timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative\
          \ to the daemon machine’s time.\n - `label` (`label=<key>`, `label=<key>=<value>`,\
          \ `label!=<key>`, or `label!=<key>=<value>`) Prune containers with (or without,\
          \ in case `label!=...` is used) the specified labels.\n"
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Prune containers"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ContainersPruneReport"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /events:
    get:
      tags:
      - "system (compat)"
      summary: "Get events"
      description: "Returns events filtered on query parameters"
      operationId: "getEvents"
      produces:
      - "application/json"
      parameters:
      - name: "since"
        in: "query"
        description: "start streaming events from this time"
        required: false
        type: "string"
        x-exportParamName: "Since"
        x-optionalDataType: "String"
      - name: "until"
        in: "query"
        description: "stop streaming events later than this"
        required: false
        type: "string"
        x-exportParamName: "Until"
        x-optionalDataType: "String"
      - name: "filters"
        in: "query"
        description: "JSON encoded map[string][]string of constraints"
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "returns a string of json data describing an event"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /exec/{id}/json:
    get:
      tags:
      - "exec (compat)"
      summary: "Inspect an exec instance"
      description: "Return low-level information about an exec instance."
      operationId: "inspectExec"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Exec instance ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "no error"
        "404":
          description: "No such exec instance"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /exec/{id}/resize:
    post:
      tags:
      - "exec (compat)"
      summary: "Resize an exec instance"
      description: "Resize the TTY session used by an exec instance. This endpoint\
        \ only works if tty was specified as part of creating and starting the exec\
        \ instance.\n"
      operationId: "resizeExec"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Exec instance ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "h"
        in: "query"
        description: "Height of the TTY session in characters"
        required: false
        type: "integer"
        x-exportParamName: "H"
        x-optionalDataType: "Int32"
      - name: "w"
        in: "query"
        description: "Width of the TTY session in characters"
        required: false
        type: "integer"
        x-exportParamName: "W"
        x-optionalDataType: "Int32"
      responses:
        "201":
          description: "no error"
        "404":
          description: "No such exec instance"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /exec/{id}/start:
    post:
      tags:
      - "exec (compat)"
      summary: "Start an exec instance"
      description: "Starts a previously set up exec instance. If detach is true, this\
        \ endpoint returns immediately after starting the command. Otherwise, it sets\
        \ up an interactive session with the command."
      operationId: "startExec"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Exec instance ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "control"
        description: "Attributes for start"
        required: false
        schema:
          $ref: "#/definitions/control_1"
        x-exportParamName: "Control"
      responses:
        "200":
          description: "no error"
        "404":
          description: "No such exec instance"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "container is not running"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /images/{name:.*}:
    delete:
      tags:
      - "images (compat)"
      summary: "Remove Image"
      description: "Delete an image from local storage"
      operationId: "removeImage"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "name or ID of image to delete"
        required: true
        type: "string"
        x-exportParamName: "Name_"
      - name: "force"
        in: "query"
        description: "remove the image even if used by containers or has other tags"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      - name: "noprune"
        in: "query"
        description: "not supported. will be logged as an invalid parameter if enabled"
        required: false
        type: "boolean"
        x-exportParamName: "Noprune"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Delete response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ImageDeleteResponse"
        "404":
          description: "No such image"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "Conflict error in operation"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /images/{name:.*}/get:
    get:
      tags:
      - "images (compat)"
      summary: "Export an image"
      description: "Export an image in tarball format"
      operationId: "exportImage"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name_"
      responses:
        "200":
          description: "no error"
          schema:
            type: "string"
            format: "binary"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /images/{name:.*}/history:
    get:
      tags:
      - "images (compat)"
      summary: "History of an image"
      description: "Return parent layers of an image."
      operationId: "imageHistory"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name_"
      responses:
        "200":
          description: "History response"
          schema:
            $ref: "#/definitions/inline_response_200_4"
        "404":
          description: "No such image"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /images/{name:.*}/json:
    get:
      tags:
      - "images (compat)"
      summary: "Inspect an image"
      description: "Return low-level information about an image."
      operationId: "inspectImage"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name_"
      responses:
        "200":
          description: "Inspect response"
          schema:
            $ref: "#/definitions/inline_response_200_5"
        "404":
          description: "No such image"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /images/{name:.*}/push:
    post:
      tags:
      - "images (compat)"
      summary: "Push Image"
      description: "Push an image to a container registry"
      operationId: "pushImage"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "Name of image to push."
        required: true
        type: "string"
        x-exportParamName: "Name_"
      - name: "tag"
        in: "query"
        description: "The tag to associate with the image on the registry."
        required: false
        type: "string"
        x-exportParamName: "Tag"
        x-optionalDataType: "String"
      - name: "X-Registry-Auth"
        in: "header"
        description: "A base64-encoded auth configuration."
        required: false
        type: "string"
        x-exportParamName: "XRegistryAuth"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "no error"
          schema:
            type: "string"
            format: "binary"
        "404":
          description: "No such image"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /images/{name:.*}/tag:
    post:
      tags:
      - "images (compat)"
      summary: "Tag an image"
      description: "Tag an image so that it becomes part of a repository."
      operationId: "tagImage"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name_"
      - name: "repo"
        in: "query"
        description: "the repository to tag in"
        required: false
        type: "string"
        x-exportParamName: "Repo"
        x-optionalDataType: "String"
      - name: "tag"
        in: "query"
        description: "the name of the new tag"
        required: false
        type: "string"
        x-exportParamName: "Tag"
        x-optionalDataType: "String"
      responses:
        "201":
          description: "no error"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such image"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "Conflict error in operation"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /images/create:
    post:
      tags:
      - "images (compat)"
      summary: "Create an image"
      description: "Create an image by either pulling it from a registry or importing\
        \ it."
      operationId: "createImage"
      produces:
      - "application/json"
      parameters:
      - name: "fromImage"
        in: "query"
        description: "needs description"
        required: false
        type: "string"
        x-exportParamName: "FromImage"
        x-optionalDataType: "String"
      - name: "fromSrc"
        in: "query"
        description: "needs description"
        required: false
        type: "string"
        x-exportParamName: "FromSrc"
        x-optionalDataType: "String"
      - name: "tag"
        in: "query"
        description: "needs description"
        required: false
        type: "string"
        x-exportParamName: "Tag"
        x-optionalDataType: "String"
      - name: "X-Registry-Auth"
        in: "header"
        description: "A base64-encoded auth configuration."
        required: false
        type: "string"
        x-exportParamName: "XRegistryAuth"
        x-optionalDataType: "String"
      - in: "body"
        name: "request"
        description: "Image content if fromSrc parameter was used"
        required: false
        schema:
          type: "string"
        x-exportParamName: "Request"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            type: "object"
        "404":
          description: "No such image"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /images/json:
    get:
      tags:
      - "images (compat)"
      summary: "List Images"
      description: "Returns a list of images on the server. Note that it uses a different,\
        \ smaller representation of an image than inspecting a single image."
      operationId: "listImages"
      produces:
      - "application/json"
      parameters:
      - name: "all"
        in: "query"
        description: "Show all images. Only images from a final layer (no children)\
          \ are shown by default."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "All"
        x-optionalDataType: "Bool"
      - name: "filters"
        in: "query"
        description: "A JSON encoded value of the filters (a `map[string][]string`)\
          \ to process on the images list. Available filters:\n- `before`=(`<image-name>[:<tag>]`,\
          \  `<image id>` or `<image@digest>`)\n- `dangling=true`\n- `label=key` or\
          \ `label=\"key=value\"` of an image label\n- `reference`=(`<image-name>[:<tag>]`)\n\
          - `since`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)\n"
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      - name: "digests"
        in: "query"
        description: "Not supported"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Digests"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Image summary"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ImageSummary"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /images/load:
    post:
      tags:
      - "images (compat)"
      summary: "Import image"
      description: "Load a set of images and tags into a repository."
      operationId: "importImage"
      produces:
      - "application/json"
      parameters:
      - name: "quiet"
        in: "query"
        description: "not supported"
        required: false
        type: "boolean"
        x-exportParamName: "Quiet"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "request"
        description: "tarball of container image"
        required: false
        schema:
          type: "string"
        x-exportParamName: "Request"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "no error"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /images/prune:
    post:
      tags:
      - "images (compat)"
      summary: "Prune unused images"
      description: "Remove images from local storage that are not being used by a\
        \ container"
      operationId: "pruneImages"
      produces:
      - "application/json"
      parameters:
      - name: "filters"
        in: "query"
        description: "filters to apply to image pruning, encoded as JSON (map[string][]string).\
          \ Available filters:\n  - `dangling=<boolean>` When set to `true` (or `1`),\
          \ prune only\n     unused *and* untagged images. When set to `false`\n \
          \    (or `0`), all unused images are pruned.\n  - `until=<string>` Prune\
          \ images created before this timestamp. The `<timestamp>` can be Unix timestamps,\
          \ date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`)\
          \ computed relative to the daemon machine’s time.\n  - `label` (`label=<key>`,\
          \ `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune\
          \ images with (or without, in case `label!=...` is used) the specified labels.\n"
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Delete response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ImageDeleteResponse"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /images/search:
    get:
      tags:
      - "images (compat)"
      summary: "Search images"
      description: "Search registries for an image"
      operationId: "searchImages"
      produces:
      - "application/json"
      parameters:
      - name: "term"
        in: "query"
        description: "term to search"
        required: false
        type: "string"
        x-exportParamName: "Term"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "maximum number of results"
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "filters"
        in: "query"
        description: "A JSON encoded value of the filters (a `map[string][]string`)\
          \ to process on the images list. Available filters:\n- `is-automated=(true|false)`\n\
          - `is-official=(true|false)`\n- `stars=<number>` Matches images that has\
          \ at least 'number' stars.\n"
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Search results"
          schema:
            $ref: "#/definitions/inline_response_200_6"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /info:
    get:
      tags:
      - "system (compat)"
      summary: "Get info"
      description: "Returns information on the system and libpod configuration"
      operationId: "getInfo"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "to be determined"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/_ping:
    get:
      tags:
      - "system (compat)"
      - "system"
      summary: "Ping service"
      description: "Return protocol information in response headers.\n`HEAD /libpod/_ping`\
        \ is also supported.\n`/_ping` is available for compatibility with other engines.\n\
        The '_ping' endpoints are not versioned.\n"
      operationId: "libpodPingGet"
      produces:
      - "text/plain"
      parameters: []
      responses:
        "200":
          description: "Success"
          headers:
            API-Version:
              type: "string"
              description: "Max compatibility API Version the server supports"
            BuildKit-Version:
              type: "string"
              description: "Default version of docker image builder"
            Cache-Control:
              type: "string"
              description: "always no-cache"
            Docker-Experimental:
              type: "boolean"
              description: "If the server is running with experimental mode enabled,\
                \ always true"
            Libpod-API-Version:
              type: "string"
              description: "Max Podman API Version the server supports.\nAvailable\
                \ if service is backed by Podman, therefore may be used to\ndetermine\
                \ if talking to Podman engine or another engine\n"
            Libpod-Buildha-Version:
              type: "string"
              description: "Default version of libpod image builder.\n  Available\
                \ if service is backed by Podman, therefore may be used to\n  determine\
                \ if talking to Podman engine or another engine\n"
            Pragma:
              type: "string"
              description: "always no-cache"
          schema:
            type: "string"
            description: "OK"
            example: "OK"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/build:
    post:
      tags:
      - "images"
      summary: "Create image"
      description: "Build an image from the given Dockerfile(s)"
      operationId: "libpodBuildImage"
      produces:
      - "application/json"
      parameters:
      - name: "dockerfile"
        in: "query"
        description: "Path within the build context to the `Dockerfile`.\nThis is\
          \ ignored if remote is specified and points to an external `Dockerfile`.\n"
        required: false
        type: "string"
        default: "Dockerfile"
        x-exportParamName: "Dockerfile"
        x-optionalDataType: "String"
      - name: "t"
        in: "query"
        description: "A name and optional tag to apply to the image in the `name:tag`\
          \ format.  If you omit the tag the default latest value is assumed. You\
          \ can provide several t parameters."
        required: false
        type: "string"
        default: "latest"
        x-exportParamName: "T"
        x-optionalDataType: "String"
      - name: "extrahosts"
        in: "query"
        description: "TBD Extra hosts to add to /etc/hosts\n(As of version 1.xx)\n"
        required: false
        type: "string"
        x-exportParamName: "Extrahosts"
        x-optionalDataType: "String"
      - name: "remote"
        in: "query"
        description: "A Git repository URI or HTTP/HTTPS context URI.\nIf the URI\
          \ points to a single text file, the file’s contents are placed\ninto a file\
          \ called Dockerfile and the image is built from that file. If\nthe URI points\
          \ to a tarball, the file is downloaded by the daemon and the\ncontents therein\
          \ used as the context for the build. If the URI points to a\ntarball and\
          \ the dockerfile parameter is also specified, there must be a file\nwith\
          \ the corresponding path inside the tarball.\n(As of version 1.xx)\n"
        required: false
        type: "string"
        x-exportParamName: "Remote"
        x-optionalDataType: "String"
      - name: "q"
        in: "query"
        description: "Suppress verbose build output\n"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Q"
        x-optionalDataType: "Bool"
      - name: "nocache"
        in: "query"
        description: "Do not use the cache when building the image\n(As of version\
          \ 1.xx)\n"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Nocache"
        x-optionalDataType: "Bool"
      - name: "cachefrom"
        in: "query"
        description: "JSON array of images used to build cache resolution\n(As of\
          \ version 1.xx)\n"
        required: false
        type: "string"
        x-exportParamName: "Cachefrom"
        x-optionalDataType: "String"
      - name: "pull"
        in: "query"
        description: "Attempt to pull the image even if an older image exists locally\n\
          (As of version 1.xx)\n"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Pull"
        x-optionalDataType: "Bool"
      - name: "rm"
        in: "query"
        description: "Remove intermediate containers after a successful build\n(As\
          \ of version 1.xx)\n"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "Rm"
        x-optionalDataType: "Bool"
      - name: "forcerm"
        in: "query"
        description: "Always remove intermediate containers, even upon failure\n(As\
          \ of version 1.xx)\n"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Forcerm"
        x-optionalDataType: "Bool"
      - name: "memory"
        in: "query"
        description: "Memory is the upper limit (in bytes) on how much memory running\
          \ containers can use\n(As of version 1.xx)\n"
        required: false
        type: "integer"
        x-exportParamName: "Memory"
        x-optionalDataType: "Int32"
      - name: "memswap"
        in: "query"
        description: "MemorySwap limits the amount of memory and swap together\n(As\
          \ of version 1.xx)\n"
        required: false
        type: "integer"
        x-exportParamName: "Memswap"
        x-optionalDataType: "Int32"
      - name: "cpushares"
        in: "query"
        description: "CPUShares (relative weight\n(As of version 1.xx)\n"
        required: false
        type: "integer"
        x-exportParamName: "Cpushares"
        x-optionalDataType: "Int32"
      - name: "cpusetcpus"
        in: "query"
        description: "CPUSetCPUs in which to allow execution (0-3, 0,1)\n(As of version\
          \ 1.xx)\n"
        required: false
        type: "string"
        x-exportParamName: "Cpusetcpus"
        x-optionalDataType: "String"
      - name: "cpuperiod"
        in: "query"
        description: "CPUPeriod limits the CPU CFS (Completely Fair Scheduler) period\n\
          (As of version 1.xx)\n"
        required: false
        type: "integer"
        x-exportParamName: "Cpuperiod"
        x-optionalDataType: "Int32"
      - name: "cpuquota"
        in: "query"
        description: "CPUQuota limits the CPU CFS (Completely Fair Scheduler) quota\n\
          (As of version 1.xx)\n"
        required: false
        type: "integer"
        x-exportParamName: "Cpuquota"
        x-optionalDataType: "Int32"
      - name: "buildargs"
        in: "query"
        description: "JSON map of string pairs denoting build-time variables.\nFor\
          \ example, the build argument `Foo` with the value of `bar` would be encoded\
          \ in JSON as `[\"Foo\":\"bar\"]`.\n\nFor example, buildargs={\"Foo\":\"\
          bar\"}.\n\nNote(s):\n* This should not be used to pass secrets.\n* The value\
          \ of buildargs should be URI component encoded before being passed to the\
          \ API.\n\n(As of version 1.xx)\n"
        required: false
        type: "string"
        x-exportParamName: "Buildargs"
        x-optionalDataType: "String"
      - name: "shmsize"
        in: "query"
        description: "ShmSize is the \"size\" value to use when mounting an shmfs\
          \ on the container's /dev/shm directory.\nDefault is 64MB\n(As of version\
          \ 1.xx)\n"
        required: false
        type: "integer"
        default: 67108864
        x-exportParamName: "Shmsize"
        x-optionalDataType: "Int32"
      - name: "squash"
        in: "query"
        description: "Silently ignored.\nSquash the resulting images layers into a\
          \ single layer\n(As of version 1.xx)\n"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Squash"
        x-optionalDataType: "Bool"
      - name: "labels"
        in: "query"
        description: "JSON map of key, value pairs to set as labels on the new image\n\
          (As of version 1.xx)\n"
        required: false
        type: "string"
        x-exportParamName: "Labels"
        x-optionalDataType: "String"
      - name: "networkmode"
        in: "query"
        description: "Sets the networking mode for the run commands during build.\n\
          Supported standard values are:\n  * `bridge` limited to containers within\
          \ a single host, port mapping required for external access\n  * `host` no\
          \ isolation between host and containers on this network\n  * `none` disable\
          \ all networking for this container\n  * container:<nameOrID> share networking\
          \ with given container\n  ---All other values are assumed to be a custom\
          \ network's name\n(As of version 1.xx)\n"
        required: false
        type: "string"
        default: "bridge"
        x-exportParamName: "Networkmode"
        x-optionalDataType: "String"
      - name: "platform"
        in: "query"
        description: "Platform format os[/arch[/variant]]\n(As of version 1.xx)\n"
        required: false
        type: "string"
        x-exportParamName: "Platform"
        x-optionalDataType: "String"
      - name: "target"
        in: "query"
        description: "Target build stage\n(As of version 1.xx)\n"
        required: false
        type: "string"
        x-exportParamName: "Target"
        x-optionalDataType: "String"
      - name: "outputs"
        in: "query"
        description: "output configuration TBD\n(As of version 1.xx)\n"
        required: false
        type: "string"
        x-exportParamName: "Outputs"
        x-optionalDataType: "String"
      - name: "httpproxy"
        in: "query"
        description: "Inject http proxy environment variables into container\n(As\
          \ of version 2.0.0)\n"
        required: false
        type: "boolean"
        x-exportParamName: "Httpproxy"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK (As of version 1.xx)"
          schema:
            $ref: "#/definitions/inline_response_200"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/commit:
    post:
      tags:
      - "containers"
      summary: "Commit"
      description: "Create a new image from a container"
      operationId: "libpodCommitContainer"
      produces:
      - "application/json"
      parameters:
      - name: "container"
        in: "query"
        description: "the name or ID of a container"
        required: true
        type: "string"
        x-exportParamName: "Container"
      - name: "repo"
        in: "query"
        description: "the repository name for the created image"
        required: false
        type: "string"
        x-exportParamName: "Repo"
        x-optionalDataType: "String"
      - name: "tag"
        in: "query"
        description: "tag name for the created image"
        required: false
        type: "string"
        x-exportParamName: "Tag"
        x-optionalDataType: "String"
      - name: "comment"
        in: "query"
        description: "commit message"
        required: false
        type: "string"
        x-exportParamName: "Comment"
        x-optionalDataType: "String"
      - name: "author"
        in: "query"
        description: "author of the image"
        required: false
        type: "string"
        x-exportParamName: "Author"
        x-optionalDataType: "String"
      - name: "pause"
        in: "query"
        description: "pause the container before committing it"
        required: false
        type: "boolean"
        x-exportParamName: "Pause"
        x-optionalDataType: "Bool"
      - name: "changes"
        in: "query"
        description: "instructions to apply while committing in Dockerfile format\
          \ (i.e. \"CMD=/bin/foo\")"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Changes"
      - name: "format"
        in: "query"
        description: "format of the image manifest and metadata (default \"oci\")"
        required: false
        type: "string"
        x-exportParamName: "Format"
        x-optionalDataType: "String"
      responses:
        "201":
          description: "no error"
        "404":
          description: "No such image"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name:.*}/healthcheck:
    get:
      tags:
      - "containers"
      summary: "Run a container's healthcheck"
      description: "Execute the defined healthcheck and return information about the\
        \ results"
      operationId: "libpodRunHealthCheck"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name_"
      responses:
        "200":
          description: "Healthcheck"
          schema:
            $ref: "#/definitions/inline_response_200_7"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "container has no healthcheck or is not running"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}:
    delete:
      tags:
      - "containers"
      summary: "Delete container"
      description: "Delete container"
      operationId: "libpodRemoveContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "force"
        in: "query"
        description: "need something"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      - name: "v"
        in: "query"
        description: "delete volumes"
        required: false
        type: "boolean"
        x-exportParamName: "V"
        x-optionalDataType: "Bool"
      responses:
        "204":
          description: "no error"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "Conflict error in operation"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/attach:
    post:
      tags:
      - "containers"
      summary: "Attach to a container"
      description: "Hijacks the connection to forward the container's standard streams\
        \ to the client."
      operationId: "libpodAttachContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "detachKeys"
        in: "query"
        description: "keys to use for detaching from the container"
        required: false
        type: "string"
        x-exportParamName: "DetachKeys"
        x-optionalDataType: "String"
      - name: "logs"
        in: "query"
        description: "Stream all logs from the container across the connection. Happens\
          \ before streaming attach (if requested). At least one of logs or stream\
          \ must be set"
        required: false
        type: "boolean"
        x-exportParamName: "Logs"
        x-optionalDataType: "Bool"
      - name: "stream"
        in: "query"
        description: "Attach to the container. If unset, and logs is set, only the\
          \ container's logs will be sent. At least one of stream or logs must be\
          \ set"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "Stream"
        x-optionalDataType: "Bool"
      - name: "stdout"
        in: "query"
        description: "Attach to container STDOUT"
        required: false
        type: "boolean"
        x-exportParamName: "Stdout"
        x-optionalDataType: "Bool"
      - name: "stderr"
        in: "query"
        description: "Attach to container STDERR"
        required: false
        type: "boolean"
        x-exportParamName: "Stderr"
        x-optionalDataType: "Bool"
      - name: "stdin"
        in: "query"
        description: "Attach to container STDIN"
        required: false
        type: "boolean"
        x-exportParamName: "Stdin"
        x-optionalDataType: "Bool"
      responses:
        "101":
          description: "No error, connection has been hijacked for transporting streams."
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/changes:
    get:
      tags:
      - "containers"
      - "containers (compat)"
      summary: "Report on changes to container's filesystem; adds, deletes or modifications."
      description: "Returns which files in a container's filesystem have been added,\
        \ deleted, or modified. The Kind of modification can be one of:\n\n0: Modified\n\
        1: Added\n2: Deleted\n"
      operationId: "changesContainer"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or id of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "Array of Changes"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/checkpoint:
    post:
      tags:
      - "containers"
      summary: "Checkpoint a container"
      operationId: "libpodCheckpointContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "keep"
        in: "query"
        description: "keep all temporary checkpoint files"
        required: false
        type: "boolean"
        x-exportParamName: "Keep"
        x-optionalDataType: "Bool"
      - name: "leaveRunning"
        in: "query"
        description: "leave the container running after writing checkpoint to disk"
        required: false
        type: "boolean"
        x-exportParamName: "LeaveRunning"
        x-optionalDataType: "Bool"
      - name: "tcpEstablished"
        in: "query"
        description: "checkpoint a container with established TCP connections"
        required: false
        type: "boolean"
        x-exportParamName: "TcpEstablished"
        x-optionalDataType: "Bool"
      - name: "export"
        in: "query"
        description: "export the checkpoint image to a tar.gz"
        required: false
        type: "boolean"
        x-exportParamName: "Export"
        x-optionalDataType: "Bool"
      - name: "ignoreRootFS"
        in: "query"
        description: "do not include root file-system changes when exporting"
        required: false
        type: "boolean"
        x-exportParamName: "IgnoreRootFS"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "tarball is returned in body if exported"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/copy:
    get:
      tags:
      - "containers (compat)"
      summary: "Copy files from a container"
      description: "Copy a tar archive of files from a container"
      operationId: "libpodGetArchive"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "container name or id"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "path"
        in: "query"
        description: "Path to a directory in the container to extract"
        required: true
        type: "string"
        x-exportParamName: "Path"
      responses:
        "200":
          description: "no error"
          schema:
            type: "string"
            format: "binary"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
    post:
      tags:
      - "containers"
      summary: "Copy files into a container"
      description: "Copy a tar archive of files into a container"
      operationId: "libpodPutArchive"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "container name or id"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "path"
        in: "query"
        description: "Path to a directory in the container to extract"
        required: true
        type: "string"
        x-exportParamName: "Path"
      - name: "pause"
        in: "query"
        description: "pause the container while copying (defaults to true)"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "Pause"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "request"
        description: "tarfile of files to copy into the container"
        required: false
        schema:
          type: "string"
        x-exportParamName: "Request"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "no error"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "403":
          description: "the container rootfs is read-only"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/exec:
    post:
      tags:
      - "exec"
      summary: "Create an exec instance"
      description: "Create an exec session to run a command inside a running container.\
        \ Exec sessions will be automatically removed 5 minutes after they exit."
      operationId: "libpodCreateExec"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "name of container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "control"
        description: "Attributes for create"
        required: false
        schema:
          $ref: "#/definitions/control_2"
        x-exportParamName: "Control"
      responses:
        "201":
          description: "no error"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "container is paused"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/exists:
    get:
      tags:
      - "containers"
      summary: "Check if container exists"
      description: "Quick way to determine if a container exists by name or ID"
      operationId: "libpodContainerExists"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "204":
          description: "container exists"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/export:
    get:
      tags:
      - "containers"
      summary: "Export a container"
      description: "Export the contents of a container as a tarball."
      operationId: "libpodExportContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "tarball is returned in body"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/init:
    post:
      tags:
      - "containers"
      summary: "Initialize a container"
      description: "Performs all tasks necessary for initializing the container but\
        \ does not start the container."
      operationId: "libpodInitContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "204":
          description: "no error"
        "304":
          description: "container already initialized"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/json:
    get:
      tags:
      - "containers"
      summary: "Inspect container"
      description: "Return low-level information about a container."
      operationId: "libpodGetContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "size"
        in: "query"
        description: "display filesystem usage"
        required: false
        type: "boolean"
        x-exportParamName: "Size"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Inspect container"
          schema:
            $ref: "#/definitions/inline_response_200_8"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/kill:
    post:
      tags:
      - "containers"
      summary: "Kill container"
      description: "send a signal to a container, defaults to killing the container"
      operationId: "libpodKillContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "signal"
        in: "query"
        description: "signal to be sent to container, either by integer or SIG_ name"
        required: false
        type: "string"
        default: "TERM"
        x-exportParamName: "Signal"
        x-optionalDataType: "String"
      responses:
        "204":
          description: "no error"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "Conflict error in operation"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/logs:
    get:
      tags:
      - "containers"
      summary: "Get container logs"
      description: "Get stdout and stderr logs from a container."
      operationId: "libpodLogsFromContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "follow"
        in: "query"
        description: "Keep connection after returning logs."
        required: false
        type: "boolean"
        x-exportParamName: "Follow"
        x-optionalDataType: "Bool"
      - name: "stdout"
        in: "query"
        description: "Return logs from stdout"
        required: false
        type: "boolean"
        x-exportParamName: "Stdout"
        x-optionalDataType: "Bool"
      - name: "stderr"
        in: "query"
        description: "Return logs from stderr"
        required: false
        type: "boolean"
        x-exportParamName: "Stderr"
        x-optionalDataType: "Bool"
      - name: "since"
        in: "query"
        description: "Only return logs since this time, as a UNIX timestamp"
        required: false
        type: "string"
        x-exportParamName: "Since"
        x-optionalDataType: "String"
      - name: "until"
        in: "query"
        description: "Only return logs before this time, as a UNIX timestamp"
        required: false
        type: "string"
        x-exportParamName: "Until"
        x-optionalDataType: "String"
      - name: "timestamps"
        in: "query"
        description: "Add timestamps to every log line"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Timestamps"
        x-optionalDataType: "Bool"
      - name: "tail"
        in: "query"
        description: "Only return this number of log lines from the end of the logs"
        required: false
        type: "string"
        default: "all"
        x-exportParamName: "Tail"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "logs returned as a stream in response body."
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/mount:
    post:
      tags:
      - "containers"
      summary: "Mount a container"
      description: "Mount a container to the filesystem"
      operationId: "libpodMountContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "mounted container"
          schema:
            type: "string"
            description: "id"
            example: "/var/lib/containers/storage/overlay/f3f693bd88872a1e3193f4ebb925f4c282e8e73aadb8ab3e7492754dda3a02a4/merged"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/pause:
    post:
      tags:
      - "containers"
      summary: "Pause a container"
      description: "Use the cgroups freezer to suspend all processes in a container."
      operationId: "libpodPauseContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "204":
          description: "no error"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/resize:
    post:
      tags:
      - "containers"
      summary: "Resize a container's TTY"
      description: "Resize the terminal attached to a container (for use with Attach)."
      operationId: "libpodResizeContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "h"
        in: "query"
        description: "Height to set for the terminal, in characters"
        required: false
        type: "integer"
        x-exportParamName: "H"
        x-optionalDataType: "Int32"
      - name: "w"
        in: "query"
        description: "Width to set for the terminal, in characters"
        required: false
        type: "integer"
        x-exportParamName: "W"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Success"
          schema:
            type: "object"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/restart:
    post:
      tags:
      - "containers"
      summary: "Restart a container"
      operationId: "libpodRestartContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "t"
        in: "query"
        description: "timeout before sending kill signal to container"
        required: false
        type: "integer"
        x-exportParamName: "T"
        x-optionalDataType: "Int32"
      responses:
        "204":
          description: "no error"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/restore:
    post:
      tags:
      - "containers"
      summary: "Restore a container"
      description: "Restore a container from a checkpoint."
      operationId: "libpodRestoreContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or id of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "name"
        in: "query"
        description: "the name of the container when restored from a tar. can only\
          \ be used with import"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "keep"
        in: "query"
        description: "keep all temporary checkpoint files"
        required: false
        type: "boolean"
        x-exportParamName: "Keep"
        x-optionalDataType: "Bool"
      - name: "leaveRunning"
        in: "query"
        description: "leave the container running after writing checkpoint to disk"
        required: false
        type: "boolean"
        x-exportParamName: "LeaveRunning"
        x-optionalDataType: "Bool"
      - name: "tcpEstablished"
        in: "query"
        description: "checkpoint a container with established TCP connections"
        required: false
        type: "boolean"
        x-exportParamName: "TcpEstablished"
        x-optionalDataType: "Bool"
      - name: "import"
        in: "query"
        description: "import the restore from a checkpoint tar.gz"
        required: false
        type: "boolean"
        x-exportParamName: "Import_"
        x-optionalDataType: "Bool"
      - name: "ignoreRootFS"
        in: "query"
        description: "do not include root file-system changes when exporting"
        required: false
        type: "boolean"
        x-exportParamName: "IgnoreRootFS"
        x-optionalDataType: "Bool"
      - name: "ignoreStaticIP"
        in: "query"
        description: "ignore IP address if set statically"
        required: false
        type: "boolean"
        x-exportParamName: "IgnoreStaticIP"
        x-optionalDataType: "Bool"
      - name: "ignoreStaticMAC"
        in: "query"
        description: "ignore MAC address if set statically"
        required: false
        type: "boolean"
        x-exportParamName: "IgnoreStaticMAC"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "tarball is returned in body if exported"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/start:
    post:
      tags:
      - "containers"
      summary: "Start a container"
      operationId: "libpodStartContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "detachKeys"
        in: "query"
        description: "Override the key sequence for detaching a container. Format\
          \ is a single character [a-Z] or ctrl-<value> where <value> is one of: a-z,\
          \ @, ^, [, , or _."
        required: false
        type: "string"
        default: "ctrl-p,ctrl-q"
        x-exportParamName: "DetachKeys"
        x-optionalDataType: "String"
      responses:
        "204":
          description: "no error"
        "304":
          description: "Container already started"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/stats:
    get:
      tags:
      - "containers"
      summary: "Get stats for a container"
      description: "DEPRECATED. This endpoint will be removed with the next major\
        \ release. Please use /libpod/containers/stats instead."
      operationId: "libpodStatsContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "stream"
        in: "query"
        description: "Stream the output"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "Stream"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "no error"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/stop:
    post:
      tags:
      - "containers"
      summary: "Stop a container"
      operationId: "libpodStopContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "t"
        in: "query"
        description: "number of seconds to wait before killing container"
        required: false
        type: "integer"
        x-exportParamName: "T"
        x-optionalDataType: "Int32"
      responses:
        "204":
          description: "no error"
        "304":
          description: "Container already stopped"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/top:
    get:
      tags:
      - "containers"
      summary: "List processes"
      description: "List processes running inside a container"
      operationId: "libpodTopContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of container to query for processes\n(As of version 1.xx)\n"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "stream"
        in: "query"
        description: "Stream the output"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "Stream"
        x-optionalDataType: "Bool"
      - name: "ps_args"
        in: "query"
        description: "arguments to pass to ps such as aux. Requires ps(1) to be installed\
          \ in the container if no ps(1) compatible AIX descriptors are used."
        required: false
        type: "string"
        default: "-ef"
        x-exportParamName: "PsArgs"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "List processes in container"
          schema:
            $ref: "#/definitions/inline_response_200_2"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/unmount:
    post:
      tags:
      - "containers"
      summary: "Unmount a container"
      description: "Unmount a container from the filesystem"
      operationId: "libpodUnmountContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "204":
          description: "ok"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/unpause:
    post:
      tags:
      - "containers"
      summary: "Unpause Container"
      operationId: "libpodUnpauseContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "204":
          description: "no error"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/{name}/wait:
    post:
      tags:
      - "containers"
      summary: "Wait on a container"
      description: "Wait on a container to met a given condition"
      operationId: "libpodWaitContainer"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "condition"
        in: "query"
        description: "wait until container is to a given condition. default is stopped.\
          \ valid conditions are:\n  - configured\n  - created\n  - exited\n  - paused\n\
          \  - running\n  - stopped\n"
        required: false
        type: "string"
        x-exportParamName: "Condition"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Wait container"
          schema:
            $ref: "#/definitions/inline_response_200_3"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/create:
    post:
      tags:
      - "containers"
      summary: "Create a container"
      operationId: "libpodCreateContainer"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "create"
        description: "attributes for creating a container"
        required: false
        schema:
          $ref: "#/definitions/SpecGenerator"
        x-exportParamName: "Create"
      responses:
        "201":
          description: "Create container"
          schema:
            $ref: "#/definitions/inline_response_201"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "Conflict error in operation"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/json:
    get:
      tags:
      - "containers"
      summary: "List containers"
      description: "Returns a list of containers"
      operationId: "libpodListContainers"
      produces:
      - "application/json"
      parameters:
      - name: "all"
        in: "query"
        description: "Return all containers. By default, only running containers are\
          \ shown"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "All"
        x-optionalDataType: "Bool"
      - name: "limit"
        in: "query"
        description: "Return this number of most recently created containers, including\
          \ non-running ones."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "pod"
        in: "query"
        description: "Ignored. Previously included details on pod name and ID that\
          \ are currently included by default."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Pod"
        x-optionalDataType: "Bool"
      - name: "size"
        in: "query"
        description: "Return the size of container as fields SizeRw and SizeRootFs."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Size"
        x-optionalDataType: "Bool"
      - name: "sync"
        in: "query"
        description: "Sync container state with OCI runtime"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Sync"
        x-optionalDataType: "Bool"
      - name: "filters"
        in: "query"
        description: "A JSON encoded value of the filters (a `map[string][]string`)\
          \ to process on the containers list. Available filters:\n- `ancestor`=(`<image-name>[:<tag>]`,\
          \ `<image id>`, or `<image@digest>`)\n- `before`=(`<container id>` or `<container\
          \ name>`)\n- `expose`=(`<port>[/<proto>]` or `<startport-endport>/[<proto>]`)\n\
          - `exited=<int>` containers with exit code of `<int>`\n- `health`=(`starting`,\
          \ `healthy`, `unhealthy` or `none`)\n- `id=<ID>` a container's ID\n- `is-task`=(`true`\
          \ or `false`)\n- `label`=(`key` or `\"key=value\"`) of an container label\n\
          - `name=<name>` a container's name\n- `network`=(`<network id>` or `<network\
          \ name>`)\n- `publish`=(`<port>[/<proto>]` or `<startport-endport>/[<proto>]`)\n\
          - `since`=(`<container id>` or `<container name>`)\n- `status`=(`created`,\
          \ `restarting`, `running`, `removing`, `paused`, `exited` or `dead`)\n-\
          \ `volume`=(`<volume name>` or `<mount point destination>`)\n"
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "List Containers"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ListContainer"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/prune:
    post:
      tags:
      - "containers"
      summary: "Delete stopped containers"
      description: "Remove containers not in use"
      operationId: "libpodPruneContainers"
      produces:
      - "application/json"
      parameters:
      - name: "filters"
        in: "query"
        description: "Filters to process on the prune list, encoded as JSON (a `map[string][]string`).\
          \  Available filters:\n - `until=<timestamp>` Prune containers created before\
          \ this timestamp. The `<timestamp>` can be Unix timestamps, date formatted\
          \ timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative\
          \ to the daemon machine’s time.\n - `label` (`label=<key>`, `label=<key>=<value>`,\
          \ `label!=<key>`, or `label!=<key>=<value>`) Prune containers with (or without,\
          \ in case `label!=...` is used) the specified labels.\n"
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Prune containers"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LibpodContainersPruneReport"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/showmounted:
    get:
      tags:
      - "containers"
      summary: "Show mounted containers"
      description: "Lists all mounted containers mount points"
      operationId: "libpodShowMountedContainers"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "mounted containers"
          schema:
            type: "object"
            additionalProperties:
              type: "string"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/containers/stats:
    get:
      tags:
      - "containers"
      summary: "Get stats for one or more containers"
      description: "Return a live stream of resource usage statistics of one or more\
        \ container. If no container is specified, the statistics of all containers\
        \ are returned."
      operationId: "libpodStatsContainers"
      produces:
      - "application/json"
      parameters:
      - name: "containers"
        in: "query"
        description: "names or IDs of containers"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Containers"
      - name: "stream"
        in: "query"
        description: "Stream the output"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "Stream"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "no error"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/events:
    get:
      tags:
      - "system"
      summary: "Get events"
      description: "Returns events filtered on query parameters"
      operationId: "libpodGetEvents"
      produces:
      - "application/json"
      parameters:
      - name: "since"
        in: "query"
        description: "start streaming events from this time"
        required: false
        type: "string"
        x-exportParamName: "Since"
        x-optionalDataType: "String"
      - name: "until"
        in: "query"
        description: "stop streaming events later than this"
        required: false
        type: "string"
        x-exportParamName: "Until"
        x-optionalDataType: "String"
      - name: "filters"
        in: "query"
        description: "JSON encoded map[string][]string of constraints"
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      - name: "stream"
        in: "query"
        description: "when false, do not follow events"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "Stream"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "returns a string of json data describing an event"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/exec/{id}/json:
    get:
      tags:
      - "exec"
      summary: "Inspect an exec instance"
      description: "Return low-level information about an exec instance."
      operationId: "libpodInspectExec"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Exec instance ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "no error"
        "404":
          description: "No such exec instance"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/exec/{id}/resize:
    post:
      tags:
      - "exec"
      summary: "Resize an exec instance"
      description: "Resize the TTY session used by an exec instance. This endpoint\
        \ only works if tty was specified as part of creating and starting the exec\
        \ instance.\n"
      operationId: "libpodResizeExec"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Exec instance ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "h"
        in: "query"
        description: "Height of the TTY session in characters"
        required: false
        type: "integer"
        x-exportParamName: "H"
        x-optionalDataType: "Int32"
      - name: "w"
        in: "query"
        description: "Width of the TTY session in characters"
        required: false
        type: "integer"
        x-exportParamName: "W"
        x-optionalDataType: "Int32"
      responses:
        "201":
          description: "no error"
        "404":
          description: "No such exec instance"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/exec/{id}/start:
    post:
      tags:
      - "exec"
      summary: "Start an exec instance"
      description: "Starts a previously set up exec instance. If detach is true, this\
        \ endpoint returns immediately after starting the command. Otherwise, it sets\
        \ up an interactive session with the command."
      operationId: "libpodStartExec"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Exec instance ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "control"
        description: "Attributes for start"
        required: false
        schema:
          $ref: "#/definitions/control_3"
        x-exportParamName: "Control"
      responses:
        "200":
          description: "no error"
        "404":
          description: "No such exec instance"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "container is not running."
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/generate/{name:.*}/kube:
    get:
      tags:
      - "containers"
      - "pods"
      summary: "Generate a Kubernetes YAML file."
      description: "Generate Kubernetes YAML based on a pod or container."
      operationId: "libpodGenerateKube"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "Name or ID of the container or pod."
        required: true
        type: "string"
        x-exportParamName: "Name_"
      - name: "service"
        in: "query"
        description: "Generate YAML for a Kubernetes service object."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Service"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "no error"
          schema:
            type: "string"
            format: "binary"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/generate/{name:.*}/systemd:
    get:
      tags:
      - "containers"
      - "pods"
      summary: "Generate Systemd Units"
      description: "Generate Systemd Units based on a pod or container."
      operationId: "libpodGenerateSystemd"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "Name or ID of the container or pod."
        required: true
        type: "string"
        x-exportParamName: "Name_"
      - name: "useName"
        in: "query"
        description: "Use container/pod names instead of IDs."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "UseName"
        x-optionalDataType: "Bool"
      - name: "new"
        in: "query"
        description: "Create a new container instead of starting an existing one."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "New"
        x-optionalDataType: "Bool"
      - name: "time"
        in: "query"
        description: "Stop timeout override."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Time"
        x-optionalDataType: "Int32"
      - name: "restartPolicy"
        in: "query"
        description: "Systemd restart-policy."
        required: false
        type: "string"
        default: "on-failure"
        enum:
        - "no"
        - "on-success"
        - "on-failure"
        - "on-abnormal"
        - "on-watchdog"
        - "on-abort"
        - "always"
        x-exportParamName: "RestartPolicy"
        x-optionalDataType: "String"
      - name: "containerPrefix"
        in: "query"
        description: "Systemd unit name prefix for containers."
        required: false
        type: "string"
        default: "container"
        x-exportParamName: "ContainerPrefix"
        x-optionalDataType: "String"
      - name: "podPrefix"
        in: "query"
        description: "Systemd unit name prefix for pods."
        required: false
        type: "string"
        default: "pod"
        x-exportParamName: "PodPrefix"
        x-optionalDataType: "String"
      - name: "separator"
        in: "query"
        description: "Systemd unit name separator between name/id and prefix."
        required: false
        type: "string"
        default: "-"
        x-exportParamName: "Separator"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "no error"
          schema:
            type: "object"
            additionalProperties:
              type: "string"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/images/{name:.*}:
    delete:
      tags:
      - "images"
      summary: "Remove an image from the local storage."
      description: "Remove an image from the local storage."
      operationId: "libpodRemoveImage"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "name or ID of image to remove"
        required: true
        type: "string"
        x-exportParamName: "Name_"
      - name: "force"
        in: "query"
        description: "remove the image even if used by containers or has other tags"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Delete response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ImageDeleteResponse"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such image"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "Conflict error in operation"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/images/{name:.*}/exists:
    get:
      tags:
      - "images"
      summary: "Image exists"
      description: "Check if image exists in local store"
      operationId: "libpodImageExists"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name_"
      responses:
        "204":
          description: "image exists"
        "404":
          description: "No such image"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/images/{name:.*}/get:
    get:
      tags:
      - "images"
      summary: "Export an image"
      description: "Export an image"
      operationId: "libpodExportImage"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name_"
      - name: "format"
        in: "query"
        description: "format for exported image"
        required: false
        type: "string"
        x-exportParamName: "Format"
        x-optionalDataType: "String"
      - name: "compress"
        in: "query"
        description: "use compression on image"
        required: false
        type: "boolean"
        x-exportParamName: "Compress"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "no error"
          schema:
            type: "string"
            format: "binary"
        "404":
          description: "No such image"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/images/{name:.*}/history:
    get:
      tags:
      - "images"
      summary: "History of an image"
      description: "Return parent layers of an image."
      operationId: "libpodImageHistory"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name_"
      responses:
        "200":
          description: "History response"
          schema:
            $ref: "#/definitions/inline_response_200_4"
        "404":
          description: "No such image"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/images/{name:.*}/json:
    get:
      tags:
      - "images"
      summary: "Inspect an image"
      description: "Obtain low-level information about an image"
      operationId: "libpodInspectImage"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name_"
      responses:
        "200":
          description: "Inspect image"
          schema:
            $ref: "#/definitions/inline_response_200_9"
        "404":
          description: "No such image"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/images/{name:.*}/push:
    post:
      tags:
      - "images"
      summary: "Push Image"
      description: "Push an image to a container registry"
      operationId: "libpodPushImage"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "Name of image to push."
        required: true
        type: "string"
        x-exportParamName: "Name_"
      - name: "destination"
        in: "query"
        description: "Allows for pushing the image to a different destintation than\
          \ the image refers to."
        required: false
        type: "string"
        x-exportParamName: "Destination"
        x-optionalDataType: "String"
      - name: "tlsVerify"
        in: "query"
        description: "Require TLS verification."
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "TlsVerify"
        x-optionalDataType: "Bool"
      - name: "X-Registry-Auth"
        in: "header"
        description: "A base64-encoded auth configuration."
        required: false
        type: "string"
        x-exportParamName: "XRegistryAuth"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "no error"
          schema:
            type: "string"
            format: "binary"
        "404":
          description: "No such image"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/images/{name:.*}/tag:
    post:
      tags:
      - "images"
      summary: "Tag an image"
      description: "Tag an image so that it becomes part of a repository."
      operationId: "libpodTagImage"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name_"
      - name: "repo"
        in: "query"
        description: "the repository to tag in"
        required: false
        type: "string"
        x-exportParamName: "Repo"
        x-optionalDataType: "String"
      - name: "tag"
        in: "query"
        description: "the name of the new tag"
        required: false
        type: "string"
        x-exportParamName: "Tag"
        x-optionalDataType: "String"
      responses:
        "201":
          description: "no error"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such image"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "Conflict error in operation"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/images/{name:.*}/tree:
    get:
      tags:
      - "images"
      summary: "Image tree"
      description: "Retrieve the image tree for the provided image name or ID"
      operationId: "libpodImageTree"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name_"
      - name: "whatrequires"
        in: "query"
        description: "show all child images and layers of the specified image"
        required: false
        type: "boolean"
        x-exportParamName: "Whatrequires"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Image tree response"
          schema:
            $ref: "#/definitions/inline_response_200_10"
        "404":
          description: "No such image"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/images/{name:.*}/untag:
    post:
      tags:
      - "images"
      summary: "Untag an image"
      description: "Untag an image. If not repo and tag are specified, all tags are\
        \ removed from the image."
      operationId: "libpodUntagImage"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "the name or ID of the container"
        required: true
        type: "string"
        x-exportParamName: "Name_"
      - name: "repo"
        in: "query"
        description: "the repository to untag"
        required: false
        type: "string"
        x-exportParamName: "Repo"
        x-optionalDataType: "String"
      - name: "tag"
        in: "query"
        description: "the name of the tag to untag"
        required: false
        type: "string"
        x-exportParamName: "Tag"
        x-optionalDataType: "String"
      responses:
        "201":
          description: "no error"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such image"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "Conflict error in operation"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/images/{name}/changes:
    get:
      tags:
      - "images"
      summary: "Report on changes to images's filesystem; adds, deletes or modifications."
      description: "Returns which files in a images's filesystem have been added,\
        \ deleted, or modified. The Kind of modification can be one of:\n\n0: Modified\n\
        1: Added\n2: Deleted\n"
      operationId: "libpodChangesImages"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or id of the container"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "Array of Changes"
        "404":
          description: "No such container"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/images/export:
    get:
      tags:
      - "images"
      summary: "Export multiple images"
      description: "Export multiple images into a single object. Only `docker-archive`\
        \ is currently supported."
      operationId: "libpodExportImages"
      produces:
      - "application/json"
      parameters:
      - name: "format"
        in: "query"
        description: "format for exported image (only docker-archive is supported)"
        required: false
        type: "string"
        x-exportParamName: "Format"
        x-optionalDataType: "String"
      - name: "references"
        in: "query"
        description: "references to images to export"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "References"
      - name: "compress"
        in: "query"
        description: "use compression on image"
        required: false
        type: "boolean"
        x-exportParamName: "Compress"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "no error"
          schema:
            type: "string"
            format: "binary"
        "404":
          description: "No such image"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/images/import:
    post:
      tags:
      - "images"
      summary: "Import image"
      description: "Import a previously exported tarball as an image."
      operationId: "libpodImagesImport"
      produces:
      - "application/json"
      parameters:
      - name: "changes"
        in: "query"
        description: "Apply the following possible instructions to the created image:\
          \ CMD | ENTRYPOINT | ENV | EXPOSE | LABEL | STOPSIGNAL | USER | VOLUME |\
          \ WORKDIR.  JSON encoded string"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Changes"
      - name: "message"
        in: "query"
        description: "Set commit message for imported image"
        required: false
        type: "string"
        x-exportParamName: "Message"
        x-optionalDataType: "String"
      - name: "reference"
        in: "query"
        description: "Optional Name[:TAG] for the image"
        required: false
        type: "string"
        x-exportParamName: "Reference"
        x-optionalDataType: "String"
      - name: "url"
        in: "query"
        description: "Load image from the specified URL"
        required: false
        type: "string"
        x-exportParamName: "Url"
        x-optionalDataType: "String"
      - name: "upload"
        in: "formData"
        description: "tarball for imported image"
        required: true
        type: "file"
        x-exportParamName: "Upload"
      responses:
        "200":
          description: "Import response"
          schema:
            $ref: "#/definitions/ImageImportReport"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/images/json:
    get:
      tags:
      - "images"
      summary: "List Images"
      description: "Returns a list of images on the server"
      operationId: "libpodListImages"
      produces:
      - "application/json"
      parameters:
      - name: "all"
        in: "query"
        description: "Show all images. Only images from a final layer (no children)\
          \ are shown by default."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "All"
        x-optionalDataType: "Bool"
      - name: "filters"
        in: "query"
        description: "A JSON encoded value of the filters (a `map[string][]string`)\
          \ to process on the images list. Available filters:\n- `before`=(`<image-name>[:<tag>]`,\
          \  `<image id>` or `<image@digest>`)\n- `dangling=true`\n- `label=key` or\
          \ `label=\"key=value\"` of an image label\n- `reference`=(`<image-name>[:<tag>]`)\n\
          - `id`=(`<image-id>`)\n- `since`=(`<image-name>[:<tag>]`,  `<image id>`\
          \ or `<image@digest>`)\n"
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Image summary"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ImageSummary"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/images/load:
    post:
      tags:
      - "images"
      summary: "Load image"
      description: "Load an image (oci-archive or docker-archive) stream."
      operationId: "libpodImagesLoad"
      produces:
      - "application/json"
      parameters:
      - name: "reference"
        in: "query"
        description: "Optional Name[:TAG] for the image"
        required: false
        type: "string"
        x-exportParamName: "Reference"
        x-optionalDataType: "String"
      - name: "upload"
        in: "formData"
        description: "tarball of container image"
        required: true
        type: "file"
        x-exportParamName: "Upload"
      responses:
        "200":
          description: "Load response"
          schema:
            $ref: "#/definitions/ImageLoadReport"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/images/prune:
    post:
      tags:
      - "images"
      summary: "Prune unused images"
      description: "Remove images that are not being used by a container"
      operationId: "libpodPruneImages"
      produces:
      - "application/json"
      parameters:
      - name: "filters"
        in: "query"
        description: "filters to apply to image pruning, encoded as JSON (map[string][]string).\
          \ Available filters:\n  - `dangling=<boolean>` When set to `true` (or `1`),\
          \ prune only\n     unused *and* untagged images. When set to `false`\n \
          \    (or `0`), all unused images are pruned.\n  - `until=<string>` Prune\
          \ images created before this timestamp. The `<timestamp>` can be Unix timestamps,\
          \ date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`)\
          \ computed relative to the daemon machine’s time.\n  - `label` (`label=<key>`,\
          \ `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune\
          \ images with (or without, in case `label!=...` is used) the specified labels.\n"
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Delete response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ImageDeleteResponse"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/images/pull:
    post:
      tags:
      - "images"
      summary: "Pull images"
      description: "Pull one or more images from a container registry."
      operationId: "libpodImagesPull"
      produces:
      - "application/json"
      parameters:
      - name: "reference"
        in: "query"
        description: "Mandatory reference to the image (e.g., quay.io/image/name:tag)"
        required: false
        type: "string"
        x-exportParamName: "Reference"
        x-optionalDataType: "String"
      - name: "credentials"
        in: "query"
        description: "username:password for the registry"
        required: false
        type: "string"
        x-exportParamName: "Credentials"
        x-optionalDataType: "String"
      - name: "overrideArch"
        in: "query"
        description: "Pull image for the specified architecture."
        required: false
        type: "string"
        x-exportParamName: "OverrideArch"
        x-optionalDataType: "String"
      - name: "overrideOS"
        in: "query"
        description: "Pull image for the specified operating system."
        required: false
        type: "string"
        x-exportParamName: "OverrideOS"
        x-optionalDataType: "String"
      - name: "overrideVariant"
        in: "query"
        description: "Pull image for the specified variant."
        required: false
        type: "string"
        x-exportParamName: "OverrideVariant"
        x-optionalDataType: "String"
      - name: "tlsVerify"
        in: "query"
        description: "Require TLS verification."
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "TlsVerify"
        x-optionalDataType: "Bool"
      - name: "allTags"
        in: "query"
        description: "Pull all tagged images in the repository."
        required: false
        type: "boolean"
        x-exportParamName: "AllTags"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Pull response"
          schema:
            $ref: "#/definitions/LibpodImagesPullReport"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/images/remove:
    delete:
      tags:
      - "images"
      summary: "Remove one or more images from the storage."
      description: "Remove one or more images from the storage."
      operationId: "libpodImagesRemove"
      produces:
      - "application/json"
      parameters:
      - name: "images"
        in: "query"
        description: "Images IDs or names to remove."
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Images"
      - name: "all"
        in: "query"
        description: "Remove all images."
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "All"
        x-optionalDataType: "Bool"
      - name: "force"
        in: "query"
        description: "Force image removal (including containers using the images)."
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Remove response"
          schema:
            $ref: "#/definitions/LibpodImagesRemoveReport"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/images/search:
    get:
      tags:
      - "images"
      summary: "Search images"
      description: "Search registries for images"
      operationId: "libpodSearchImages"
      produces:
      - "application/json"
      parameters:
      - name: "term"
        in: "query"
        description: "term to search"
        required: false
        type: "string"
        x-exportParamName: "Term"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "maximum number of results"
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "noTrunc"
        in: "query"
        description: "do not truncate any of the result strings"
        required: false
        type: "boolean"
        x-exportParamName: "NoTrunc"
        x-optionalDataType: "Bool"
      - name: "filters"
        in: "query"
        description: "A JSON encoded value of the filters (a `map[string][]string`)\
          \ to process on the images list. Available filters:\n- `is-automated=(true|false)`\n\
          - `is-official=(true|false)`\n- `stars=<number>` Matches images that has\
          \ at least 'number' stars.\n"
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Search results"
          schema:
            $ref: "#/definitions/inline_response_200_6"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/info:
    get:
      tags:
      - "system"
      summary: "Get info"
      description: "Returns information on the system and libpod configuration"
      operationId: "libpodGetInfo"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Info"
          schema:
            $ref: "#/definitions/Info"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/manifests/{name:.*}:
    delete:
      tags:
      - "manifests"
      summary: "Remove"
      description: "Remove an image from a manifest list"
      operationId: "RemoveManifest"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "the image associated with the manifest"
        required: true
        type: "string"
        x-exportParamName: "Name_"
      - name: "digest"
        in: "query"
        description: "image digest to be removed"
        required: false
        type: "string"
        x-exportParamName: "Digest"
        x-optionalDataType: "String"
      responses:
        "200":
          $ref: "#/definitions/IDResponse"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such manifest"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/manifests/{name:.*}/add:
    post:
      tags:
      - "manifests"
      description: "Add an image to a manifest list"
      operationId: "AddManifest"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "the name or ID of the manifest"
        required: true
        type: "string"
        x-exportParamName: "Name_"
      - in: "body"
        name: "options"
        description: "options for creating a manifest"
        required: false
        schema:
          $ref: "#/definitions/ManifestAddOpts"
        x-exportParamName: "Options"
      responses:
        "200":
          $ref: "#/definitions/IDResponse"
        "404":
          description: "No such manifest"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/manifests/{name:.*}/json:
    get:
      tags:
      - "manifests"
      summary: "Inspect"
      description: "Display a manifest list"
      operationId: "Inspect"
      produces:
      - "application/json"
      parameters:
      - name: "name:.*"
        in: "path"
        description: "the name or ID of the manifest"
        required: true
        type: "string"
        x-exportParamName: "Name_"
      responses:
        "200":
          description: "Inspect Manifest"
          schema:
            $ref: "#/definitions/List"
        "404":
          description: "No such manifest"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/manifests/{name}/push:
    post:
      tags:
      - "manifests"
      summary: "Push"
      description: "Push a manifest list or image index to a registry"
      operationId: "PushManifest"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the manifest"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "destination"
        in: "query"
        description: "the destination for the manifest"
        required: true
        type: "string"
        x-exportParamName: "Destination"
      - name: "all"
        in: "query"
        description: "push all images"
        required: false
        type: "boolean"
        x-exportParamName: "All"
        x-optionalDataType: "Bool"
      responses:
        "200":
          $ref: "#/definitions/IDResponse"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such manifest"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/manifests/create:
    post:
      tags:
      - "manifests"
      summary: "Create"
      description: "Create a manifest list"
      operationId: "Create"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "manifest list name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "image"
        in: "query"
        description: "name of the image"
        required: false
        type: "string"
        x-exportParamName: "Image"
        x-optionalDataType: "String"
      - name: "all"
        in: "query"
        description: "add all contents if given list"
        required: false
        type: "boolean"
        x-exportParamName: "All"
        x-optionalDataType: "Bool"
      responses:
        "200":
          $ref: "#/definitions/IDResponse"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such image"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/networks/{name}:
    delete:
      tags:
      - "networks"
      summary: "Remove a network"
      description: "Remove a CNI configured network"
      operationId: "libpodRemoveNetwork"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name of the network"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "force"
        in: "query"
        description: "remove containers associated with network"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Network rm"
          schema:
            $ref: "#/definitions/NetworkRmReport"
        "404":
          description: "No such network"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/networks/{name}/json:
    get:
      tags:
      - "networks"
      summary: "Inspect a network"
      description: "Display low level configuration for a CNI network"
      operationId: "libpodInspectNetwork"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name of the network"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "Network inspect"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/NetworkInspectReport"
        "404":
          description: "No such network"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/networks/create:
    post:
      tags:
      - "networks"
      summary: "Create network"
      description: "Create a new CNI network configuration"
      operationId: "libpodCreateNetwork"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "optional name for new network"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - in: "body"
        name: "create"
        description: "attributes for creating a container"
        required: false
        schema:
          $ref: "#/definitions/NetworkCreateOptions"
        x-exportParamName: "Create"
      responses:
        "200":
          description: "Network create"
          schema:
            $ref: "#/definitions/NetworkCreateReport"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/networks/json:
    get:
      tags:
      - "networks"
      summary: "List networks"
      description: "Display summary of network configurations"
      operationId: "libpodListNetwork"
      produces:
      - "application/json"
      parameters:
      - name: "filter"
        in: "query"
        description: "Provide filter values (e.g. 'name=podman')"
        required: false
        type: "string"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Network list"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/NetworkListReport"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/play/kube:
    post:
      tags:
      - "containers"
      - "pods"
      summary: "Play a Kubernetes YAML file."
      description: "Create and run pods based on a Kubernetes YAML file (pod or service\
        \ kind)."
      operationId: "libpodPlayKube"
      produces:
      - "application/json"
      parameters:
      - name: "network"
        in: "query"
        description: "Connect the pod to this network."
        required: false
        type: "string"
        x-exportParamName: "Network"
        x-optionalDataType: "String"
      - name: "tlsVerify"
        in: "query"
        description: "Require HTTPS and verify signatures when contacting registries."
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "TlsVerify"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "request"
        description: "Kubernetes YAML file."
        required: false
        schema:
          type: "string"
        x-exportParamName: "Request"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "PlayKube response"
          schema:
            $ref: "#/definitions/PlayKubeReport"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/pods/{name}:
    delete:
      tags:
      - "pods"
      summary: "Remove pod"
      operationId: "removePod"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the pod"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "force"
        in: "query"
        description: "force removal of a running pod by first stopping all containers,\
          \ then removing all containers in the pod"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Rm pod"
          schema:
            $ref: "#/definitions/PodRmReport"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such pod"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/pods/{name}/exists:
    get:
      tags:
      - "pods"
      summary: "Pod exists"
      description: "Check if a pod exists by name or ID"
      operationId: "podExists"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the pod"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "204":
          description: "pod exists"
        "404":
          description: "No such pod"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/pods/{name}/json:
    get:
      tags:
      - "pods"
      summary: "Inspect pod"
      operationId: "inspectPod"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the pod"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "Inspect pod"
          schema:
            $ref: "#/definitions/inline_response_200_11"
        "404":
          description: "No such pod"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/pods/{name}/kill:
    post:
      tags:
      - "pods"
      summary: "Kill a pod"
      operationId: "killPod"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the pod"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "signal"
        in: "query"
        description: "signal to be sent to pod"
        required: false
        type: "string"
        default: "SIGKILL"
        x-exportParamName: "Signal"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Kill Pod"
          schema:
            $ref: "#/definitions/PodKillReport"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such pod"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "Conflict error in operation"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/pods/{name}/pause:
    post:
      tags:
      - "pods"
      summary: "Pause a pod"
      description: "Pause a pod"
      operationId: "pausePod"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the pod"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "Pause pod"
          schema:
            $ref: "#/definitions/PodPauseReport"
        "404":
          description: "No such pod"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/pods/{name}/restart:
    post:
      tags:
      - "pods"
      summary: "Restart a pod"
      operationId: "restartPod"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the pod"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "Restart pod"
          schema:
            $ref: "#/definitions/PodRestartReport"
        "404":
          description: "No such pod"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/pods/{name}/start:
    post:
      tags:
      - "pods"
      summary: "Start a pod"
      operationId: "startPod"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the pod"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "Start pod"
          schema:
            $ref: "#/definitions/PodStartReport"
        "304":
          description: "Pod already started"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such pod"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/pods/{name}/stop:
    post:
      tags:
      - "pods"
      summary: "Stop a pod"
      operationId: "stopPod"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the pod"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "t"
        in: "query"
        description: "timeout"
        required: false
        type: "integer"
        x-exportParamName: "T"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Stop pod"
          schema:
            $ref: "#/definitions/PodStopReport"
        "304":
          description: "Pod already stopped"
          schema:
            $ref: "#/definitions/inline_response_400"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "404":
          description: "No such pod"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/pods/{name}/top:
    get:
      tags:
      - "pods"
      summary: "List processes"
      description: "List processes running inside a pod"
      operationId: "topPod"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of pod to query for processes\n"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "stream"
        in: "query"
        description: "Stream the output"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "Stream"
        x-optionalDataType: "Bool"
      - name: "ps_args"
        in: "query"
        description: "arguments to pass to ps such as aux. Requires ps(1) to be installed\
          \ in the container if no ps(1) compatible AIX descriptors are used."
        required: false
        type: "string"
        default: "-ef"
        x-exportParamName: "PsArgs"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "List processes in pod"
          schema:
            $ref: "#/definitions/inline_response_200_2"
        "404":
          description: "No such pod"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/pods/{name}/unpause:
    post:
      tags:
      - "pods"
      summary: "Unpause a pod"
      operationId: "unpausePod"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the pod"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "Unpause pod"
          schema:
            $ref: "#/definitions/PodUnpauseReport"
        "404":
          description: "No such pod"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/pods/create:
    post:
      tags:
      - "pods"
      summary: "Create a pod"
      operationId: "CreatePod"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "create"
        description: "attributes for creating a pod"
        required: false
        schema:
          $ref: "#/definitions/PodSpecGenerator"
        x-exportParamName: "Create"
      responses:
        "200":
          $ref: "#/definitions/IdResponse"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/pods/json:
    get:
      tags:
      - "pods"
      summary: "List pods"
      operationId: "ListPods"
      produces:
      - "application/json"
      parameters:
      - name: "filters"
        in: "query"
        description: "needs description and plumbing for filters"
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "List pods"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ListPodsReport"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/pods/prune:
    post:
      tags:
      - "pods"
      summary: "Prune unused pods"
      operationId: "PrunePods"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Prune pod"
          schema:
            $ref: "#/definitions/PodPruneReport"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "pod already exists"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/pods/stats:
    get:
      tags:
      - "pods"
      summary: "Get stats for one or more pods"
      description: "Display a live stream of resource usage statistics for the containers\
        \ in one or more pods"
      operationId: "statsPod"
      produces:
      - "application/json"
      parameters:
      - name: "all"
        in: "query"
        description: "Provide statistics for all running pods."
        required: false
        type: "boolean"
        x-exportParamName: "All"
        x-optionalDataType: "Bool"
      - name: "namesOrIDs"
        in: "query"
        description: "Names or IDs of pods."
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "NamesOrIDs"
      responses:
        "200":
          description: "List processes in pod"
          schema:
            $ref: "#/definitions/inline_response_200_2"
        "404":
          description: "No such pod"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/system/df:
    get:
      tags:
      - "system"
      summary: "Show disk usage"
      description: "Return information about disk usage for containers, images, and\
        \ volumes"
      operationId: "df"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Disk usage"
          schema:
            $ref: "#/definitions/inline_response_200_12"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/system/prune:
    post:
      tags:
      - "system"
      summary: "Prune unused data"
      operationId: "pruneSystem"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Prune report"
          schema:
            $ref: "#/definitions/inline_response_200_13"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/version:
    get:
      tags:
      - "system"
      summary: "Component Version information"
      operationId: "SystemVersion"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Version"
          schema:
            $ref: "#/definitions/inline_response_200_14"
  /libpod/volumes/{name}:
    delete:
      tags:
      - "volumes"
      summary: "Remove volume"
      operationId: "libpodRemoveVolume"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the volume"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "force"
        in: "query"
        description: "force removal"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      responses:
        "204":
          description: "no error"
        "404":
          description: "No such volume"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "Volume is in use and cannot be removed"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/volumes/{name}/json:
    get:
      tags:
      - "volumes"
      summary: "Inspect volume"
      operationId: "libpodInspectVolume"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the volume"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "Volume create response"
          schema:
            $ref: "#/definitions/inline_response_200_15"
        "404":
          description: "No such volume"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/volumes/create:
    post:
      tags:
      - "volumes"
      summary: "Create a volume"
      operationId: "libpodCreateVolume"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "create"
        description: "attributes for creating a container"
        required: false
        schema:
          $ref: "#/definitions/VolumeCreate"
        x-exportParamName: "Create"
      responses:
        "201":
          description: "Volume create response"
          schema:
            $ref: "#/definitions/inline_response_200_15"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/volumes/json:
    get:
      tags:
      - "volumes"
      summary: "List volumes"
      description: "Returns a list of volumes"
      operationId: "libpodListVolumes"
      produces:
      - "application/json"
      parameters:
      - name: "filters"
        in: "query"
        description: "JSON encoded value of the filters (a map[string][]string) to\
          \ process on the volumes list. Available filters:\n  - driver=<volume-driver-name>\
          \ Matches volumes based on their driver.\n  - label=<key> or label=<key>:<value>\
          \ Matches volumes based on the presence of a label alone or a label and\
          \ a value.\n  - name=<volume-name> Matches all of volume name.\n  - opt=<driver-option>\
          \ Matches a storage driver options\n"
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Volume list"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Volume"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /libpod/volumes/prune:
    post:
      tags:
      - "volumes"
      summary: "Prune volumes"
      operationId: "libpodPruneVolumes"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Volume prune response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/VolumePruneReport"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /networks:
    get:
      tags:
      - "networks (compat)"
      summary: "List networks"
      description: "Display summary of network configurations"
      operationId: "compatListNetwork"
      produces:
      - "application/json"
      parameters:
      - name: "filters"
        in: "query"
        description: "JSON encoded value of the filters (a map[string][]string) to\
          \ process on the networks list. Only the name filter is supported."
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Network list"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/NetworkResource"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /networks/{name}:
    get:
      tags:
      - "networks (compat)"
      summary: "Inspect a network"
      description: "Display low level configuration network"
      operationId: "compatInspectNetwork"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name of the network"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "Network inspect"
          schema:
            $ref: "#/definitions/NetworkResource"
        "404":
          description: "No such network"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
    delete:
      tags:
      - "networks (compat)"
      summary: "Remove a network"
      description: "Remove a network"
      operationId: "compatRemoveNetwork"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name of the network"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "204":
          description: "no error"
        "404":
          description: "No such network"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /networks/create:
    post:
      tags:
      - "networks (compat)"
      summary: "Create network"
      description: "Create a network configuration"
      operationId: "compatCreateNetwork"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "create"
        description: "attributes for creating a container"
        required: false
        schema:
          $ref: "#/definitions/NetworkCreateRequest"
        x-exportParamName: "Create"
      responses:
        "200":
          description: "Network create"
          schema:
            $ref: "#/definitions/inline_response_200_16"
        "400":
          description: "Bad parameter in request"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /version:
    get:
      tags:
      - "system (compat)"
      summary: "Component Version information"
      operationId: "CompatSystemVersion"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Version"
          schema:
            $ref: "#/definitions/inline_response_200_14"
  /volumes:
    get:
      tags:
      - "volumes (compat)"
      summary: "List volumes"
      description: "Returns a list of volume"
      operationId: "listVolumes"
      produces:
      - "application/json"
      parameters:
      - name: "filters"
        in: "query"
        description: "JSON encoded value of the filters (a map[string][]string) to\
          \ process on the volumes list. Available filters:\n  - driver=<volume-driver-name>\
          \ Matches volumes based on their driver.\n  - label=<key> or label=<key>:<value>\
          \ Matches volumes based on the presence of a label alone or a label and\
          \ a value.\n  - name=<volume-name> Matches all of volume name.\n\nNote:\n\
          \  The boolean `dangling` filter is not yet implemented for this endpoint.\n"
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Volume list response"
          schema:
            $ref: "#/definitions/inline_response_200_17"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /volumes/{name}:
    get:
      tags:
      - "volumes (compat)"
      summary: "Inspect volume"
      operationId: "inspectVolume"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the volume"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "This response definition is used for both the create and inspect\
            \ endpoints"
          schema:
            $ref: "#/definitions/inline_response_200_18"
        "404":
          description: "No such volume"
          schema:
            $ref: "#/definitions/inline_response_400"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
    delete:
      tags:
      - "volumes (compat)"
      summary: "Remove volume"
      operationId: "removeVolume"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "the name or ID of the volume"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "force"
        in: "query"
        description: "Force removal of the volume. This actually only causes errors\
          \ due\nto the names volume not being found to be suppressed, which is the\n\
          behaviour Docker implements.\n"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      responses:
        "204":
          description: "no error"
        "404":
          description: "No such volume"
          schema:
            $ref: "#/definitions/inline_response_400"
        "409":
          description: "Volume is in use and cannot be removed"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /volumes/create:
    post:
      tags:
      - "volumes (compat)"
      summary: "Create a volume"
      operationId: "createVolume"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "create"
        description: "attributes for creating a container.\nNote: If a volume by the\
          \ same name exists, a 201 response with that volume's information will be\
          \ generated.\n"
        required: false
        schema:
          $ref: "#/definitions/DockerVolumeCreate"
        x-exportParamName: "Create"
      responses:
        "201":
          description: "This response definition is used for both the create and inspect\
            \ endpoints"
          schema:
            $ref: "#/definitions/inline_response_200_18"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
  /volumes/prune:
    post:
      tags:
      - "volumes (compat)"
      summary: "Prune volumes"
      operationId: "pruneVolumes"
      produces:
      - "application/json"
      parameters:
      - name: "filters"
        in: "query"
        description: "JSON encoded value of filters (a map[string][]string) to match\
          \ volumes against before pruning.\n\nNote: No filters are currently supported\
          \ and any filters specified will cause an error response.\n"
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Volume prune response"
          schema:
            $ref: "#/definitions/inline_response_200_19"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/inline_response_400"
definitions:
  Address:
    type: "object"
    properties:
      Addr:
        type: "string"
      PrefixLen:
        type: "integer"
        format: "int64"
    description: "Address represents an IP address"
    example:
      PrefixLen: 3
      Addr: "Addr"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/network"
  AuthenticateOKBody:
    type: "object"
    required:
    - "IdentityToken"
    - "Status"
    properties:
      IdentityToken:
        type: "string"
        description: "An opaque token used to authenticate a user after a successful\
          \ login"
      Status:
        type: "string"
        description: "The status of the authentication"
    description: "AuthenticateOKBody authenticate o k body"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/registry"
  AutoUserNsOptions:
    type: "object"
    properties:
      AdditionalGIDMappings:
        type: "array"
        description: "AdditionalGIDMappings specified additional GID mappings to include\
          \ in\nthe generated user namespace."
        items:
          $ref: "#/definitions/IDMap"
      AdditionalUIDMappings:
        type: "array"
        description: "AdditionalUIDMappings specified additional UID mappings to include\
          \ in\nthe generated user namespace."
        items:
          $ref: "#/definitions/IDMap"
      GroupFile:
        type: "string"
        description: "GroupFile to use if the container uses a volume."
      InitialSize:
        type: "integer"
        format: "uint32"
        description: "InitialSize defines the minimum size for the user namespace.\n\
          The created user namespace will have at least this size."
      PasswdFile:
        type: "string"
        description: "PasswdFile to use if the container uses a volume."
      Size:
        type: "integer"
        format: "uint32"
        description: "Size defines the size for the user namespace.  If it is set\
          \ to a\nvalue bigger than 0, the user namespace will have exactly this size.\n\
          If it is not set, some heuristics will be used to find its size."
    title: "AutoUserNsOptions defines how to automatically create a user namespace."
    example:
      PasswdFile: "PasswdFile"
      AdditionalGIDMappings:
      - size: 7
        container_id: 5
        host_id: 2
      - size: 7
        container_id: 5
        host_id: 2
      Size: 3
      InitialSize: 9
      AdditionalUIDMappings:
      - size: 7
        container_id: 5
        host_id: 2
      - size: 7
        container_id: 5
        host_id: 2
      GroupFile: "GroupFile"
    x-go-package: "github.com/containers/podman/vendor/github.com/containers/storage"
  CgroupConfig:
    type: "object"
    properties:
      CgroupMode:
        $ref: "#/definitions/CgroupMode"
      CgroupParent:
        type: "string"
      Cgroupns:
        type: "string"
      Cgroups:
        type: "string"
    description: "CgroupConfig configures the cgroup namespace for the container"
    x-go-package: "github.com/containers/podman/pkg/spec"
  CgroupMode:
    type: "string"
    title: "CgroupMode represents cgroup mode in the container."
    x-go-package: "github.com/containers/podman/pkg/namespaces"
  CgroupSpec:
    type: "string"
    title: "CgroupSpec represents the cgroup to use for the container."
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/container"
  CgroupnsMode:
    type: "string"
    description: "CgroupnsMode represents the cgroup namespace mode of the container"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/container"
  Change:
    type: "object"
    properties:
      Kind:
        $ref: "#/definitions/ChangeType"
      Path:
        type: "string"
    title: "Change represents a change, it wraps the change type and path."
    description: "It describes changes of the files in the path respect to the\nparent\
      \ layers. The change could be modify, add, delete.\nThis is used for layer diff."
    x-go-package: "github.com/containers/podman/vendor/github.com/containers/storage/pkg/archive"
  ChangeType:
    type: "integer"
    title: "ChangeType represents the change type."
    format: "int64"
    x-go-package: "github.com/containers/podman/vendor/github.com/containers/storage/pkg/archive"
  Config:
    type: "object"
    properties:
      ArgsEscaped:
        type: "boolean"
      AttachStderr:
        type: "boolean"
      AttachStdin:
        type: "boolean"
      AttachStdout:
        type: "boolean"
      Cmd:
        $ref: "#/definitions/StrSlice"
      Domainname:
        type: "string"
      Entrypoint:
        $ref: "#/definitions/StrSlice"
      Env:
        type: "array"
        items:
          type: "string"
      ExposedPorts:
        $ref: "#/definitions/PortSet"
      Healthcheck:
        $ref: "#/definitions/HealthConfig"
      Hostname:
        type: "string"
      Image:
        type: "string"
      Labels:
        type: "object"
        additionalProperties:
          type: "string"
      MacAddress:
        type: "string"
      NetworkDisabled:
        type: "boolean"
      OnBuild:
        type: "array"
        items:
          type: "string"
      OpenStdin:
        type: "boolean"
      Shell:
        $ref: "#/definitions/StrSlice"
      StdinOnce:
        type: "boolean"
      StopSignal:
        type: "string"
      StopTimeout:
        type: "integer"
        format: "int64"
      Tty:
        type: "boolean"
      User:
        type: "string"
      Volumes:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
      WorkingDir:
        type: "string"
    title: "Config contains the configuration data about a container."
    description: "It should hold only portable information about the container.\n\
      Here, \"portable\" means \"independent from the host we are running on\".\n\
      Non-portable information *should* appear in HostConfig.\nAll fields added to\
      \ this struct must be marked `omitempty` to keep getting\npredictable hashes\
      \ from the old `v1Compatibility` configuration."
    example:
      User: "User"
      OpenStdin: true
      Env:
      - "Env"
      - "Env"
      Image: "Image"
      StdinOnce: true
      AttachStdout: true
      Shell: ""
      Volumes:
        key: "{}"
      AttachStdin: true
      Domainname: "Domainname"
      Tty: true
      Cmd: ""
      StopTimeout: 6
      StopSignal: "StopSignal"
      Entrypoint: ""
      AttachStderr: true
      ArgsEscaped: true
      Hostname: "Hostname"
      Labels:
        key: "Labels"
      Healthcheck:
        Test:
        - "Test"
        - "Test"
        Retries: 0
        Interval: {}
      MacAddress: "MacAddress"
      NetworkDisabled: true
      ExposedPorts: {}
      WorkingDir: "WorkingDir"
      OnBuild:
      - "OnBuild"
      - "OnBuild"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/container"
  ConfigReference:
    type: "object"
    properties:
      Network:
        type: "string"
    description: "ConfigReference specifies the source which provides a network's\
      \ configuration"
    example:
      Network: "Network"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/network"
  ConmonInfo:
    type: "object"
    properties:
      package:
        type: "string"
        x-go-name: "Package"
      path:
        type: "string"
        x-go-name: "Path"
      version:
        type: "string"
        x-go-name: "Version"
    description: "ConmonInfo describes the conmon executable being used"
    example:
      path: "path"
      package: "package"
      version: "version"
    x-go-package: "github.com/containers/podman/libpod/define"
  ContainerBasicConfig:
    type: "object"
    properties:
      annotations:
        type: "object"
        description: "Annotations are key-value options passed into the container\
          \ runtime\nthat can be used to trigger special behavior.\nOptional."
        additionalProperties:
          type: "string"
        x-go-name: "Annotations"
      command:
        type: "array"
        description: "Command is the container's command.\nIf not given and Image\
          \ is specified, this will be populated by the\nimage's configuration.\n\
          Optional."
        items:
          type: "string"
        x-go-name: "Command"
      conmon_pid_file:
        type: "string"
        description: "ConmonPidFile is a path at which a PID file for Conmon will\
          \ be\nplaced.\nIf not given, a default location will be used.\nOptional."
        x-go-name: "ConmonPidFile"
      containerCreateCommand:
        type: "array"
        description: "ContainerCreateCommand is the command that was used to create\
          \ this\ncontainer.\nThis will be shown in the output of Inspect() on the\
          \ container, and\nmay also be used by some tools that wish to recreate the\
          \ container\n(e.g. `podman generate systemd --new`).\nOptional."
        items:
          type: "string"
        x-go-name: "ContainerCreateCommand"
      entrypoint:
        type: "array"
        description: "Entrypoint is the container's entrypoint.\nIf not given and\
          \ Image is specified, this will be populated by the\nimage's configuration.\n\
          Optional."
        items:
          type: "string"
        x-go-name: "Entrypoint"
      env:
        type: "object"
        description: "Env is a set of environment variables that will be set in the\n\
          container.\nOptional."
        additionalProperties:
          type: "string"
        x-go-name: "Env"
      env_host:
        type: "boolean"
        description: "EnvHost indicates that the host environment should be added\
          \ to container\nOptional."
        x-go-name: "EnvHost"
      hostname:
        type: "string"
        description: "Hostname is the container's hostname. If not set, the hostname\
          \ will\nnot be modified (if UtsNS is not private) or will be set to the\n\
          container ID (if UtsNS is private).\nConflicts with UtsNS if UtsNS is not\
          \ set to private.\nOptional."
        x-go-name: "Hostname"
      httpproxy:
        type: "boolean"
        description: "EnvHTTPProxy indicates that the http host proxy environment\
          \ variables\nshould be added to container\nOptional."
        x-go-name: "HTTPProxy"
      labels:
        type: "object"
        description: "Labels are key-value pairs that are used to add metadata to\n\
          containers.\nOptional."
        additionalProperties:
          type: "string"
        x-go-name: "Labels"
      log_configuration:
        $ref: "#/definitions/LogConfig"
      name:
        type: "string"
        description: "Name is the name the container will be given.\nIf no name is\
          \ provided, one will be randomly generated.\nOptional."
        x-go-name: "Name"
      namespace:
        type: "string"
        description: "Namespace is the libpod namespace the container will be placed\
          \ in.\nOptional."
        x-go-name: "Namespace"
      oci_runtime:
        type: "string"
        description: "OCIRuntime is the name of the OCI runtime that will be used\
          \ to create\nthe container.\nIf not specified, the default will be used.\n\
          Optional."
        x-go-name: "OCIRuntime"
      pidns:
        $ref: "#/definitions/Namespace"
      pod:
        type: "string"
        description: "Pod is the ID of the pod the container will join.\nOptional."
        x-go-name: "Pod"
      raw_image_name:
        type: "string"
        description: "RawImageName is the user-specified and unprocessed input referring\n\
          to a local or a remote image."
        x-go-name: "RawImageName"
      remove:
        type: "boolean"
        description: "Remove indicates if the container should be removed once it\
          \ has been started\nand exits"
        x-go-name: "Remove"
      restart_policy:
        type: "string"
        description: "RestartPolicy is the container's restart policy - an action\
          \ which\nwill be taken when the container exits.\nIf not given, the default\
          \ policy, which does nothing, will be used.\nOptional."
        x-go-name: "RestartPolicy"
      restart_tries:
        type: "integer"
        format: "uint64"
        description: "RestartRetries is the number of attempts that will be made to\
          \ restart\nthe container.\nOnly available when RestartPolicy is set to \"\
          on-failure\".\nOptional."
        x-go-name: "RestartRetries"
      sdnotifyMode:
        type: "string"
        description: "Determine how to handle the NOTIFY_SOCKET - do we participate\
          \ or pass it through\n\"container\" - let the OCI runtime deal with it,\
          \ advertise conmon's MAINPID\n\"conmon-only\" - advertise conmon's MAINPID,\
          \ send READY when started, don't pass to OCI\n\"ignore\" - unset NOTIFY_SOCKET"
        x-go-name: "SdNotifyMode"
      stdin:
        type: "boolean"
        description: "Stdin is whether the container will keep its STDIN open."
        x-go-name: "Stdin"
      stop_signal:
        $ref: "#/definitions/Signal"
      stop_timeout:
        type: "integer"
        format: "uint64"
        description: "StopTimeout is a timeout between the container's stop signal\
          \ being\nsent and SIGKILL being sent.\nIf not provided, the default will\
          \ be used.\nIf 0 is used, stop signal will not be sent, and SIGKILL will\
          \ be sent\ninstead.\nOptional."
        x-go-name: "StopTimeout"
      sysctl:
        type: "object"
        description: "Sysctl sets kernel parameters for the container"
        additionalProperties:
          type: "string"
        x-go-name: "Sysctl"
      systemd:
        type: "string"
        description: "Systemd is whether the container will be started in systemd\
          \ mode.\nValid options are \"true\", \"false\", and \"always\".\n\"true\"\
          \ enables this mode only if the binary run in the container is\nsbin/init\
          \ or systemd. \"always\" unconditionally enables systemd mode.\n\"false\"\
          \ unconditionally disables systemd mode.\nIf enabled, mounts and stop signal\
          \ will be modified.\nIf set to \"always\" or set to \"true\" and conditionally\
          \ triggered,\nconflicts with StopSignal.\nIf not specified, \"false\" will\
          \ be assumed.\nOptional."
        x-go-name: "Systemd"
      terminal:
        type: "boolean"
        description: "Terminal is whether the container will create a PTY.\nOptional."
        x-go-name: "Terminal"
      timezone:
        type: "string"
        description: "Timezone is the timezone inside the container.\nLocal means\
          \ it has the same timezone as the host machine"
        x-go-name: "Timezone"
      utsns:
        $ref: "#/definitions/Namespace"
    title: "ContainerBasicConfig contains the basic parts of a container."
    x-go-package: "github.com/containers/podman/pkg/specgen"
  ContainerCgroupConfig:
    type: "object"
    properties:
      cgroup_parent:
        type: "string"
        description: "CgroupParent is the container's CGroup parent.\nIf not set,\
          \ the default for the current cgroup driver will be used.\nOptional."
        x-go-name: "CgroupParent"
      cgroupns:
        $ref: "#/definitions/Namespace"
      cgroups_mode:
        type: "string"
        description: "CgroupsMode sets a policy for how cgroups will be created in\
          \ the\ncontainer, including the ability to disable creation entirely."
        x-go-name: "CgroupsMode"
    description: "ContainerCgroupConfig contains configuration information about a\
      \ container's\ncgroups."
    x-go-package: "github.com/containers/podman/pkg/specgen"
  ContainerChangeResponseItem:
    type: "object"
    required:
    - "Kind"
    - "Path"
    properties:
      Kind:
        type: "integer"
        format: "uint8"
        description: "Kind of change"
      Path:
        type: "string"
        description: "Path to file that has changed"
    description: "ContainerChangeResponseItem change item in response to ContainerChanges\
      \ operation"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/container"
  ContainerCreateCreatedBody:
    type: "object"
    required:
    - "Id"
    - "Warnings"
    properties:
      Id:
        type: "string"
        description: "The ID of the created container"
        x-go-name: "ID"
      Warnings:
        type: "array"
        description: "Warnings encountered when creating the container"
        items:
          type: "string"
    description: "ContainerCreateCreatedBody OK response to ContainerCreate operation"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/container"
  ContainerHealthCheckConfig:
    type: "object"
    properties:
      healthconfig:
        $ref: "#/definitions/Schema2HealthConfig"
    description: "ContainerHealthCheckConfig describes a container healthcheck with\
      \ attributes\nlike command, retries, interval, start period, and timeout."
    x-go-package: "github.com/containers/podman/pkg/specgen"
  ContainerNamedVolume:
    type: "object"
    properties:
      dest:
        type: "string"
        description: "Dest is the mount's destination"
        x-go-name: "Dest"
      options:
        type: "array"
        description: "Options are fstab style mount options"
        items:
          type: "string"
        x-go-name: "Options"
      volumeName:
        type: "string"
        description: "Name is the name of the volume to mount in.\nMust resolve to\
          \ a valid volume present in this Podman."
        x-go-name: "Name"
    description: "ContainerNamedVolume is a named volume that will be mounted into\
      \ the\ncontainer. Each named volume is a libpod Volume present in the state."
    x-go-package: "github.com/containers/podman/libpod"
  ContainerNetworkConfig:
    type: "object"
    properties:
      cni_networks:
        type: "array"
        description: "CNINetworks is a list of CNI networks to join the container\
          \ to.\nIf this list is empty, the default CNI network will be joined\ninstead.\
          \ If at least one entry is present, we will not join the\ndefault network\
          \ (unless it is part of this list).\nOnly available if NetNS is set to bridge.\n\
          Optional."
        items:
          type: "string"
        x-go-name: "CNINetworks"
      dns_option:
        type: "array"
        description: "DNSOptions is a set of DNS options that will be used in the\n\
          container's resolv.conf, replacing the host's DNS options which are\nused\
          \ by default.\nConflicts with UseImageResolvConf.\nOptional."
        items:
          type: "string"
        x-go-name: "DNSOptions"
      dns_search:
        type: "array"
        description: "DNSSearch is a set of DNS search domains that will be used in\
          \ the\ncontainer's resolv.conf, replacing the host's DNS search domains\n\
          which are used by default.\nConflicts with UseImageResolvConf.\nOptional."
        items:
          type: "string"
        x-go-name: "DNSSearch"
      dns_server:
        type: "array"
        description: "DNSServers is a set of DNS servers that will be used in the\n\
          container's resolv.conf, replacing the host's DNS Servers which are\nused\
          \ by default.\nConflicts with UseImageResolvConf.\nOptional."
        items:
          $ref: "#/definitions/IP"
        x-go-name: "DNSServers"
      expose:
        description: "Expose is a number of ports that will be forwarded to the container\n\
          if PublishExposedPorts is set.\nExpose is a map of uint16 (port number)\
          \ to a string representing\nprotocol. Allowed protocols are \"tcp\", \"\
          udp\", and \"sctp\", or some\ncombination of the three separated by commas.\n\
          If protocol is set to \"\" we will assume TCP.\nOnly available if NetNS\
          \ is set to Bridge or Slirp, and\nPublishExposedPorts is set.\nOptional."
        x-go-name: "Expose"
      hostadd:
        type: "array"
        description: "HostAdd is a set of hosts which will be added to the container's\n\
          etc/hosts file.\nConflicts with UseImageHosts.\nOptional."
        items:
          type: "string"
        x-go-name: "HostAdd"
      netns:
        $ref: "#/definitions/Namespace"
      network_options:
        type: "object"
        description: "NetworkOptions are additional options for each network\nOptional."
        additionalProperties:
          type: "array"
          items:
            type: "string"
        x-go-name: "NetworkOptions"
      portmappings:
        type: "array"
        description: "PortBindings is a set of ports to map into the container.\n\
          Only available if NetNS is set to bridge or slirp.\nOptional."
        items:
          $ref: "#/definitions/PortMapping"
        x-go-name: "PortMappings"
      publish_image_ports:
        type: "boolean"
        description: "PublishExposedPorts will publish ports specified in the image\
          \ to\nrandom unused ports (guaranteed to be above 1024) on the host.\nThis\
          \ is based on ports set in Expose below, and any ports specified\nby the\
          \ Image (if one is given).\nOnly available if NetNS is set to Bridge or\
          \ Slirp."
        x-go-name: "PublishExposedPorts"
      static_ip:
        $ref: "#/definitions/IP"
      static_ipv6:
        $ref: "#/definitions/IP"
      static_mac:
        $ref: "#/definitions/HardwareAddr"
      use_image_hosts:
        type: "boolean"
        description: "UseImageHosts indicates that /etc/hosts should not be managed\
          \ by\nPodman, and instead sourced from the image.\nConflicts with HostAdd."
        x-go-name: "UseImageHosts"
      use_image_resolve_conf:
        type: "boolean"
        description: "UseImageResolvConf indicates that resolv.conf should not be\
          \ managed\nby Podman, but instead sourced from the image.\nConflicts with\
          \ DNSServer, DNSSearch, DNSOption."
        x-go-name: "UseImageResolvConf"
    description: "ContainerNetworkConfig contains information on a container's network\n\
      configuration."
    x-go-package: "github.com/containers/podman/pkg/specgen"
  ContainerNode:
    type: "object"
    properties:
      Addr:
        type: "string"
      Cpus:
        type: "integer"
        format: "int64"
      ID:
        type: "string"
      IP:
        type: "string"
        x-go-name: "IPAddress"
      Labels:
        type: "object"
        additionalProperties:
          type: "string"
      Memory:
        type: "integer"
        format: "int64"
      Name:
        type: "string"
    description: "ContainerNode stores information about the node that a container\n\
      is running on.  It's only used by the Docker Swarm standalone API"
    example:
      Memory: 7
      IP: "IP"
      Labels:
        key: "Labels"
      Cpus: 3
      ID: "ID"
      Addr: "Addr"
      Name: "Name"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  ContainerResourceConfig:
    type: "object"
    properties:
      oom_score_adj:
        type: "integer"
        format: "int64"
        description: "OOMScoreAdj adjusts the score used by the OOM killer to determine\n\
          processes to kill for the container's process.\nOptional."
        x-go-name: "OOMScoreAdj"
      r_limits:
        type: "array"
        description: "Rlimits are POSIX rlimits to apply to the container.\nOptional."
        items:
          $ref: "#/definitions/POSIXRlimit"
        x-go-name: "Rlimits"
      resource_limits:
        $ref: "#/definitions/LinuxResources"
      throttleReadBpsDevice:
        type: "object"
        description: "IO read rate limit per cgroup per device, bytes per second"
        additionalProperties:
          $ref: "#/definitions/LinuxThrottleDevice"
        x-go-name: "ThrottleReadBpsDevice"
      throttleReadIOPSDevice:
        type: "object"
        description: "IO read rate limit per cgroup per device, IO per second"
        additionalProperties:
          $ref: "#/definitions/LinuxThrottleDevice"
        x-go-name: "ThrottleReadIOPSDevice"
      throttleWriteBpsDevice:
        type: "object"
        description: "IO write rate limit per cgroup per device, bytes per second"
        additionalProperties:
          $ref: "#/definitions/LinuxThrottleDevice"
        x-go-name: "ThrottleWriteBpsDevice"
      throttleWriteIOPSDevice:
        type: "object"
        description: "IO write rate limit per cgroup per device, IO per second"
        additionalProperties:
          $ref: "#/definitions/LinuxThrottleDevice"
        x-go-name: "ThrottleWriteIOPSDevice"
      unified:
        type: "object"
        description: "CgroupConf are key-value options passed into the container runtime\n\
          that are used to configure cgroup v2.\nOptional."
        additionalProperties:
          type: "string"
        x-go-name: "CgroupConf"
      weightDevice:
        type: "object"
        description: "Weight per cgroup per device, can override BlkioWeight"
        additionalProperties:
          $ref: "#/definitions/LinuxWeightDevice"
        x-go-name: "WeightDevice"
    title: "ContainerResourceConfig contains information on container resource limits."
    x-go-package: "github.com/containers/podman/pkg/specgen"
  ContainerSecurityConfig:
    type: "object"
    properties:
      apparmor_profile:
        type: "string"
        description: "ApparmorProfile is the name of the Apparmor profile the container\n\
          will use.\nOptional."
        x-go-name: "ApparmorProfile"
      cap_add:
        type: "array"
        description: "CapAdd are capabilities which will be added to the container.\n\
          Conflicts with Privileged.\nOptional."
        items:
          type: "string"
        x-go-name: "CapAdd"
      cap_drop:
        type: "array"
        description: "CapDrop are capabilities which will be removed from the container.\n\
          Conflicts with Privileged.\nOptional."
        items:
          type: "string"
        x-go-name: "CapDrop"
      groups:
        type: "array"
        description: "Groups are a list of supplemental groups the container's user\
          \ will\nbe granted access to.\nOptional."
        items:
          type: "string"
        x-go-name: "Groups"
      idmappings:
        $ref: "#/definitions/IDMappingOptions"
      no_new_privileges:
        type: "boolean"
        description: "NoNewPrivileges is whether the container will set the no new\n\
          privileges flag on create, which disables gaining additional\nprivileges\
          \ (e.g. via setuid) in the container."
        x-go-name: "NoNewPrivileges"
      privileged:
        type: "boolean"
        description: "Privileged is whether the container is privileged.\nPrivileged\
          \ does the following:\nAdds all devices on the system to the container.\n\
          Adds all capabilities to the container.\nDisables Seccomp, SELinux, and\
          \ Apparmor confinement.\n(Though SELinux can be manually re-enabled).\n\
          TODO: this conflicts with things.\nTODO: this does more."
        x-go-name: "Privileged"
      procfs_opts:
        type: "array"
        description: "ProcOpts are the options used for the proc mount."
        items:
          type: "string"
        x-go-name: "ProcOpts"
      read_only_filesystem:
        type: "boolean"
        description: "ReadOnlyFilesystem indicates that everything will be mounted\n\
          as read-only"
        x-go-name: "ReadOnlyFilesystem"
      seccomp_policy:
        type: "string"
        description: "SeccompPolicy determines which seccomp profile gets applied\n\
          the container. valid values: empty,default,image"
        x-go-name: "SeccompPolicy"
      seccomp_profile_path:
        type: "string"
        description: "SeccompProfilePath is the path to a JSON file containing the\n\
          container's Seccomp profile.\nIf not specified, no Seccomp profile will\
          \ be used.\nOptional."
        x-go-name: "SeccompProfilePath"
      selinux_opts:
        type: "array"
        description: "SelinuxProcessLabel is the process label the container will\
          \ use.\nIf SELinux is enabled and this is not specified, a label will be\n\
          automatically generated if not specified.\nOptional."
        items:
          type: "string"
        x-go-name: "SelinuxOpts"
      umask:
        type: "string"
        description: "Umask is the umask the init process of the container will be\
          \ run with."
        x-go-name: "Umask"
      user:
        type: "string"
        description: "User is the user the container will be run as.\nCan be given\
          \ as a UID or a username; if a username, it will be\nresolved within the\
          \ container, using the container's /etc/passwd.\nIf unset, the container\
          \ will be run as root.\nOptional."
        x-go-name: "User"
      userns:
        $ref: "#/definitions/Namespace"
    description: "ContainerSecurityConfig is a container's security features, including\n\
      SELinux, Apparmor, and Seccomp."
    x-go-package: "github.com/containers/podman/pkg/specgen"
  ContainerSize:
    type: "object"
    properties:
      rootFsSize:
        type: "integer"
        format: "int64"
        x-go-name: "RootFsSize"
      rwSize:
        type: "integer"
        format: "int64"
        x-go-name: "RwSize"
    description: "ContainerSize holds the size of the container's root filesystem\
      \ and top\nread-write layer."
    example:
      rootFsSize: 5
      rwSize: 2
    x-go-package: "github.com/containers/podman/pkg/ps/define"
  ContainerState:
    type: "object"
    properties:
      Dead:
        type: "boolean"
      Error:
        type: "string"
      ExitCode:
        type: "integer"
        format: "int64"
      FinishedAt:
        type: "string"
      Health:
        $ref: "#/definitions/Health"
      OOMKilled:
        type: "boolean"
      Paused:
        type: "boolean"
      Pid:
        type: "integer"
        format: "int64"
      Restarting:
        type: "boolean"
      Running:
        type: "boolean"
      StartedAt:
        type: "string"
      Status:
        type: "string"
    description: "ContainerState stores container's running state\nit's part of ContainerJSONBase\
      \ and will return by \"inspect\" command"
    example:
      Status: "Status"
      Restarting: true
      Dead: true
      Health:
        Status: "Status"
        Log:
        - Start: "2000-01-23T04:56:07.000+00:00"
          ExitCode: 8
          Output: "Output"
          End: "2000-01-23T04:56:07.000+00:00"
        - Start: "2000-01-23T04:56:07.000+00:00"
          ExitCode: 8
          Output: "Output"
          End: "2000-01-23T04:56:07.000+00:00"
        FailingStreak: 4
      ExitCode: 0
      Running: true
      Error: "Error"
      FinishedAt: "FinishedAt"
      OOMKilled: true
      Pid: 7
      StartedAt: "StartedAt"
      Paused: true
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  ContainerStorageConfig:
    type: "object"
    properties:
      devices:
        type: "array"
        description: "Devices are devices that will be added to the container.\nOptional."
        items:
          $ref: "#/definitions/LinuxDevice"
        x-go-name: "Devices"
      image:
        type: "string"
        description: "Image is the image the container will be based on. The image\
          \ will be\nused as the container's root filesystem, and its environment\
          \ vars,\nvolumes, and other configuration will be applied to the container.\n\
          Conflicts with Rootfs.\nAt least one of Image or Rootfs must be specified."
        x-go-name: "Image"
      image_volume_mode:
        type: "string"
        description: "ImageVolumeMode indicates how image volumes will be created.\n\
          Supported modes are \"ignore\" (do not create), \"tmpfs\" (create as\ntmpfs),\
          \ and \"anonymous\" (create as anonymous volumes).\nThe default if unset\
          \ is anonymous.\nOptional."
        x-go-name: "ImageVolumeMode"
      init:
        type: "boolean"
        description: "Init specifies that an init binary will be mounted into the\n\
          container, and will be used as PID1."
        x-go-name: "Init"
      init_path:
        type: "string"
        description: "InitPath specifies the path to the init binary that will be\
          \ added if\nInit is specified above. If not specified, the default set in\
          \ the\nLibpod config will be used. Ignored if Init above is not set.\nOptional."
        x-go-name: "InitPath"
      ipcns:
        $ref: "#/definitions/Namespace"
      mounts:
        type: "array"
        description: "Mounts are mounts that will be added to the container.\nThese\
          \ will supersede Image Volumes and VolumesFrom volumes where\nthere are\
          \ conflicts.\nOptional."
        items:
          $ref: "#/definitions/Mount"
        x-go-name: "Mounts"
      overlay_volumes:
        type: "array"
        description: "Overlay volumes are named volumes that will be added to the\
          \ container.\nOptional."
        items:
          $ref: "#/definitions/OverlayVolume"
        x-go-name: "OverlayVolumes"
      rootfs:
        type: "string"
        description: "Rootfs is the path to a directory that will be used as the\n\
          container's root filesystem. No modification will be made to the\ndirectory,\
          \ it will be directly mounted into the container as root.\nConflicts with\
          \ Image.\nAt least one of Image or Rootfs must be specified."
        x-go-name: "Rootfs"
      rootfs_propagation:
        type: "string"
        description: "RootfsPropagation is the rootfs propagation mode for the container.\n\
          If not set, the default of rslave will be used.\nOptional."
        x-go-name: "RootfsPropagation"
      shm_size:
        type: "integer"
        format: "int64"
        description: "ShmSize is the size of the tmpfs to mount in at /dev/shm, in\
          \ bytes.\nConflicts with ShmSize if IpcNS is not private.\nOptional."
        x-go-name: "ShmSize"
      volumes:
        type: "array"
        description: "Volumes are named volumes that will be added to the container.\n\
          These will supersede Image Volumes and VolumesFrom volumes where\nthere\
          \ are conflicts.\nOptional."
        items:
          $ref: "#/definitions/NamedVolume"
        x-go-name: "Volumes"
      volumes_from:
        type: "array"
        description: "VolumesFrom is a set of containers whose volumes will be added\
          \ to\nthis container. The name or ID of the container must be provided,\
          \ and\nmay optionally be followed by a : and then one or more\ncomma-separated\
          \ options. Valid options are 'ro', 'rw', and 'z'.\nOptions will be used\
          \ for all volumes sourced from the container."
        items:
          type: "string"
        x-go-name: "VolumesFrom"
      work_dir:
        type: "string"
        description: "WorkDir is the container's working directory.\nIf unset, the\
          \ default, /, will be used.\nOptional."
        x-go-name: "WorkDir"
    description: "ContainerStorageConfig contains information on the storage configuration\
      \ of a\ncontainer."
    x-go-package: "github.com/containers/podman/pkg/specgen"
  ContainerStore:
    type: "object"
    properties:
      number:
        type: "integer"
        format: "int64"
        x-go-name: "Number"
      paused:
        type: "integer"
        format: "int64"
        x-go-name: "Paused"
      running:
        type: "integer"
        format: "int64"
        x-go-name: "Running"
      stopped:
        type: "integer"
        format: "int64"
        x-go-name: "Stopped"
    description: "ContainerStore describes the quantity of containers in the\nstore\
      \ by status"
    example:
      running: 9
      number: 2
      paused: 7
      stopped: 3
    x-go-package: "github.com/containers/podman/libpod/define"
  ContainerTopOKBody:
    type: "object"
    required:
    - "Processes"
    - "Titles"
    properties:
      Processes:
        type: "array"
        description: "Each process running in the container, where each is process\n\
          is an array of values corresponding to the titles."
        items:
          type: "array"
          items:
            type: "string"
      Titles:
        type: "array"
        description: "The ps column titles"
        items:
          type: "string"
    description: "ContainerTopOKBody OK response to ContainerTop operation"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/container"
  ContainerUpdateOKBody:
    type: "object"
    required:
    - "Warnings"
    properties:
      Warnings:
        type: "array"
        description: "warnings"
        items:
          type: "string"
    description: "ContainerUpdateOKBody OK response to ContainerUpdate operation"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/container"
  ContainerWaitOKBody:
    type: "object"
    required:
    - "Error"
    - "StatusCode"
    properties:
      Error:
        $ref: "#/definitions/ContainerWaitOKBodyError"
      StatusCode:
        type: "integer"
        format: "int64"
        description: "Exit code of the container"
    description: "ContainerWaitOKBody OK response to ContainerWait operation"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/container"
  ContainerWaitOKBodyError:
    type: "object"
    properties:
      Message:
        type: "string"
        description: "Details of an error"
    description: "ContainerWaitOKBodyError container waiting error, if any"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/container"
  ContainersPruneReport:
    type: "object"
    properties:
      ContainersDeleted:
        type: "array"
        items:
          type: "string"
      SpaceReclaimed:
        type: "integer"
        format: "uint64"
    example:
      SpaceReclaimed: 0
      ContainersDeleted:
      - "ContainersDeleted"
      - "ContainersDeleted"
    x-go-package: "github.com/containers/podman/pkg/api/handlers"
  CreateConfig:
    type: "object"
    properties:
      Annotations:
        type: "object"
        additionalProperties:
          type: "string"
      Args:
        type: "array"
        items:
          type: "string"
      BuiltinImgVolumes:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
      Cgroup:
        $ref: "#/definitions/CgroupConfig"
      CidFile:
        type: "string"
      Command:
        type: "array"
        items:
          type: "string"
      ConmonPidFile:
        type: "string"
      Detach:
        type: "boolean"
      Devices:
        type: "array"
        items:
          type: "string"
      Entrypoint:
        type: "array"
        items:
          type: "string"
      Env:
        type: "object"
        additionalProperties:
          type: "string"
      HealthCheck:
        $ref: "#/definitions/Schema2HealthConfig"
      Image:
        type: "string"
      ImageID:
        type: "string"
      ImageVolumeType:
        type: "string"
      Init:
        type: "boolean"
      InitPath:
        type: "string"
      Interactive:
        type: "boolean"
      Ipc:
        $ref: "#/definitions/IpcConfig"
      Labels:
        type: "object"
        additionalProperties:
          type: "string"
      LogDriver:
        type: "string"
      LogDriverOpt:
        type: "array"
        items:
          type: "string"
      Mounts:
        type: "array"
        items:
          $ref: "#/definitions/Mount"
      MountsFlag:
        type: "array"
        items:
          type: "string"
      Name:
        type: "string"
      NamedVolumes:
        type: "array"
        items:
          $ref: "#/definitions/ContainerNamedVolume"
      Network:
        $ref: "#/definitions/NetworkConfig"
      Pid:
        $ref: "#/definitions/PidConfig"
      Pod:
        type: "string"
      PodmanPath:
        type: "string"
      Quiet:
        type: "boolean"
      RawImageName:
        type: "string"
      Resources:
        $ref: "#/definitions/CreateResourceConfig"
      RestartPolicy:
        type: "string"
      Rm:
        type: "boolean"
      Rmi:
        type: "boolean"
      Rootfs:
        type: "string"
      Security:
        $ref: "#/definitions/SecurityConfig"
      StopSignal:
        $ref: "#/definitions/Signal"
      StopTimeout:
        type: "integer"
        format: "uint64"
      Syslog:
        type: "boolean"
      Systemd:
        type: "boolean"
      Tmpfs:
        type: "array"
        items:
          type: "string"
      Tty:
        type: "boolean"
      User:
        $ref: "#/definitions/UserConfig"
      UserCommand:
        type: "array"
        items:
          type: "string"
      Uts:
        $ref: "#/definitions/UtsConfig"
      Volumes:
        type: "array"
        items:
          type: "string"
      VolumesFrom:
        type: "array"
        items:
          type: "string"
      WorkDir:
        type: "string"
    description: "CreateConfig is a pre OCI spec structure.  It represents user input\
      \ from varlink or the CLI"
    x-go-package: "github.com/containers/podman/pkg/spec"
  CreateResourceConfig:
    type: "object"
    properties:
      BlkioWeight:
        type: "integer"
        format: "uint16"
      BlkioWeightDevice:
        type: "array"
        items:
          type: "string"
      CPUPeriod:
        type: "integer"
        format: "uint64"
      CPUQuota:
        type: "integer"
        format: "int64"
      CPURtPeriod:
        type: "integer"
        format: "uint64"
      CPURtRuntime:
        type: "integer"
        format: "int64"
      CPUShares:
        type: "integer"
        format: "uint64"
      CPUs:
        type: "number"
        format: "double"
      CPUsetCPUs:
        type: "string"
      CPUsetMems:
        type: "string"
      CgroupConf:
        type: "object"
        additionalProperties:
          type: "string"
      DeviceCgroupRules:
        type: "array"
        items:
          type: "string"
      DeviceReadBps:
        type: "array"
        items:
          type: "string"
      DeviceReadIOps:
        type: "array"
        items:
          type: "string"
      DeviceWriteBps:
        type: "array"
        items:
          type: "string"
      DeviceWriteIOps:
        type: "array"
        items:
          type: "string"
      DisableOomKiller:
        type: "boolean"
      KernelMemory:
        type: "integer"
        format: "int64"
      Memory:
        type: "integer"
        format: "int64"
      MemoryReservation:
        type: "integer"
        format: "int64"
      MemorySwap:
        type: "integer"
        format: "int64"
      MemorySwappiness:
        type: "integer"
        format: "int64"
      OomScoreAdj:
        type: "integer"
        format: "int64"
      PidsLimit:
        type: "integer"
        format: "int64"
      ShmSize:
        type: "integer"
        format: "int64"
      Ulimit:
        type: "array"
        items:
          type: "string"
    description: "CreateResourceConfig represents resource elements in CreateConfig\n\
      structures"
    x-go-package: "github.com/containers/podman/pkg/spec"
  Data:
    type: "object"
    properties:
      Data:
        type: "object"
        additionalProperties:
          type: "string"
      Name:
        type: "string"
    description: "Data handles the data for a storage driver"
    example:
      Data:
        key: "Data"
      Name: "Name"
    x-go-package: "github.com/containers/podman/libpod/driver"
  DeviceMapping:
    type: "object"
    properties:
      CgroupPermissions:
        type: "string"
      PathInContainer:
        type: "string"
      PathOnHost:
        type: "string"
    title: "DeviceMapping represents the device mapping between the host and the container."
    example:
      CgroupPermissions: "CgroupPermissions"
      PathInContainer: "PathInContainer"
      PathOnHost: "PathOnHost"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/container"
  DeviceRequest:
    type: "object"
    properties:
      Capabilities:
        type: "array"
        items:
          type: "array"
          items:
            type: "string"
      Count:
        type: "integer"
        format: "int64"
      DeviceIDs:
        type: "array"
        items:
          type: "string"
      Driver:
        type: "string"
      Options:
        type: "object"
        additionalProperties:
          type: "string"
    title: "DeviceRequest represents a request for devices from a device driver."
    description: "Used by GPU device drivers."
    example:
      DeviceIDs:
      - "DeviceIDs"
      - "DeviceIDs"
      Options:
        key: "Options"
      Capabilities:
      - - "Capabilities"
        - "Capabilities"
      - - "Capabilities"
        - "Capabilities"
      Driver: "Driver"
      Count: 1
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/container"
  Digest:
    type: "string"
    title: "Digest allows simple protection of hex formatted digest strings, prefixed\n\
      by their algorithm. Strings of type Digest have some guarantee of being in\n\
      the correct format and it provides quick access to the components of a\ndigest\
      \ string."
    description: "The following is an example of the contents of Digest types:\n\n\
      sha256:7173b809ca12ec5dee4506cd86be934c4596dd234ee82c0662eac04a8c2c71dc\n\n\
      This allows to abstract the digest behind this type and work only in those\n\
      terms."
    x-go-package: "github.com/containers/podman/vendor/github.com/opencontainers/go-digest"
  DistributionInfo:
    type: "object"
    properties:
      distribution:
        type: "string"
        x-go-name: "Distribution"
      version:
        type: "string"
        x-go-name: "Version"
    description: "DistributionInfo describes the host distribution\nfor libpod"
    example:
      distribution: "distribution"
      version: "version"
    x-go-package: "github.com/containers/podman/libpod/define"
  DockerVolumeCreate:
    $ref: "#/definitions/VolumeCreateBody"
  Duration:
    type: "integer"
    format: "int64"
    description: "A Duration represents the elapsed time between two instants\nas\
      \ an int64 nanosecond count. The representation limits the\nlargest representable\
      \ duration to approximately 290 years."
    x-go-package: "time"
  EndpointIPAMConfig:
    type: "object"
    properties:
      IPv4Address:
        type: "string"
      IPv6Address:
        type: "string"
      LinkLocalIPs:
        type: "array"
        items:
          type: "string"
    description: "EndpointIPAMConfig represents IPAM configurations for the endpoint"
    example:
      LinkLocalIPs:
      - "LinkLocalIPs"
      - "LinkLocalIPs"
      IPv6Address: "IPv6Address"
      IPv4Address: "IPv4Address"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/network"
  EndpointResource:
    type: "object"
    properties:
      EndpointID:
        type: "string"
      IPv4Address:
        type: "string"
      IPv6Address:
        type: "string"
      MacAddress:
        type: "string"
      Name:
        type: "string"
    description: "EndpointResource contains network resources allocated and used for\
      \ a container in a network"
    example:
      EndpointID: "EndpointID"
      IPv6Address: "IPv6Address"
      MacAddress: "MacAddress"
      IPv4Address: "IPv4Address"
      Name: "Name"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  EndpointSettings:
    type: "object"
    properties:
      Aliases:
        type: "array"
        items:
          type: "string"
      DriverOpts:
        type: "object"
        additionalProperties:
          type: "string"
      EndpointID:
        type: "string"
      Gateway:
        type: "string"
      GlobalIPv6Address:
        type: "string"
      GlobalIPv6PrefixLen:
        type: "integer"
        format: "int64"
      IPAMConfig:
        $ref: "#/definitions/EndpointIPAMConfig"
      IPAddress:
        type: "string"
      IPPrefixLen:
        type: "integer"
        format: "int64"
      IPv6Gateway:
        type: "string"
      Links:
        type: "array"
        items:
          type: "string"
      MacAddress:
        type: "string"
      NetworkID:
        type: "string"
        description: "Operational data"
    description: "EndpointSettings stores the network endpoint details"
    example:
      GlobalIPv6Address: "GlobalIPv6Address"
      GlobalIPv6PrefixLen: 5
      IPPrefixLen: 6
      Aliases:
      - "Aliases"
      - "Aliases"
      MacAddress: "MacAddress"
      NetworkID: "NetworkID"
      IPAMConfig:
        LinkLocalIPs:
        - "LinkLocalIPs"
        - "LinkLocalIPs"
        IPv6Address: "IPv6Address"
        IPv4Address: "IPv4Address"
      DriverOpts:
        key: "DriverOpts"
      Gateway: "Gateway"
      EndpointID: "EndpointID"
      Links:
      - "Links"
      - "Links"
      IPv6Gateway: "IPv6Gateway"
      IPAddress: "IPAddress"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/network"
  ErrorResponse:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        description: "The error message."
        x-go-name: "Message"
    title: "ErrorResponse Represents an error."
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  FileMode:
    type: "integer"
    title: "A FileMode represents a file's mode and permission bits."
    format: "uint32"
    description: "The bits have the same definition on all systems, so that\ninformation\
      \ about files can be moved from one system\nto another portably. Not all bits\
      \ apply to all systems.\nThe only required bit is ModeDir for directories."
    x-go-package: "os"
  GraphDriverData:
    type: "object"
    required:
    - "Data"
    - "Name"
    properties:
      Data:
        type: "object"
        description: "data"
        additionalProperties:
          type: "string"
      Name:
        type: "string"
        description: "name"
    title: "GraphDriverData Information about a container's graph driver."
    example:
      Data:
        key: "Data"
      Name: "Name"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  HardwareAddr:
    title: "A HardwareAddr represents a physical hardware address."
    type: "array"
    items:
      type: "integer"
      format: "uint8"
    x-go-package: "net"
  Health:
    type: "object"
    properties:
      FailingStreak:
        type: "integer"
        format: "int64"
      Log:
        type: "array"
        items:
          $ref: "#/definitions/HealthcheckResult"
      Status:
        type: "string"
    description: "Health stores information about the container's healthcheck results"
    example:
      Status: "Status"
      Log:
      - Start: "2000-01-23T04:56:07.000+00:00"
        ExitCode: 8
        Output: "Output"
        End: "2000-01-23T04:56:07.000+00:00"
      - Start: "2000-01-23T04:56:07.000+00:00"
        ExitCode: 8
        Output: "Output"
        End: "2000-01-23T04:56:07.000+00:00"
      FailingStreak: 4
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  HealthCheckLog:
    type: "object"
    properties:
      End:
        type: "string"
        description: "End time as a string"
      ExitCode:
        type: "integer"
        format: "int64"
        description: "Exitcode is 0 or 1"
      Output:
        type: "string"
        description: "Output is the stdout/stderr from the healthcheck command"
      Start:
        type: "string"
        description: "Start time as string"
    description: "HealthCheckLog describes the results of a single healthcheck"
    example:
      Start: "Start"
      ExitCode: 6
      Output: "Output"
      End: "End"
    x-go-package: "github.com/containers/podman/libpod/define"
  HealthCheckResults:
    type: "object"
    properties:
      FailingStreak:
        type: "integer"
        format: "int64"
        description: "FailingStreak is the number of consecutive failed healthchecks"
      Log:
        type: "array"
        description: "Log describes healthcheck attempts and results"
        items:
          $ref: "#/definitions/HealthCheckLog"
      Status:
        type: "string"
        description: "Status healthy or unhealthy"
    description: "HealthCheckResults describes the results/logs from a healthcheck"
    example:
      Status: "Status"
      Log:
      - Start: "Start"
        ExitCode: 6
        Output: "Output"
        End: "End"
      - Start: "Start"
        ExitCode: 6
        Output: "Output"
        End: "End"
      FailingStreak: 7
    x-go-package: "github.com/containers/podman/libpod/define"
  HealthConfig:
    type: "object"
    properties:
      Interval:
        $ref: "#/definitions/Duration"
      Retries:
        type: "integer"
        format: "int64"
        description: "Retries is the number of consecutive failures needed to consider\
          \ a container as unhealthy.\nZero means inherit."
      StartPeriod:
        $ref: "#/definitions/Duration"
      Test:
        type: "array"
        description: "Test is the test to perform to check that the container is healthy.\n\
          An empty slice means to inherit the default.\nThe options are:\n{} : inherit\
          \ healthcheck\n{\"NONE\"} : disable healthcheck\n{\"CMD\", args...} : exec\
          \ arguments directly\n{\"CMD-SHELL\", command} : run command with system's\
          \ default shell"
        items:
          type: "string"
      Timeout:
        $ref: "#/definitions/Duration"
    title: "HealthConfig holds configuration settings for the HEALTHCHECK feature."
    example:
      Test:
      - "Test"
      - "Test"
      Retries: 0
      Interval: {}
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/container"
  HealthcheckResult:
    type: "object"
    properties:
      End:
        type: "string"
        format: "date-time"
      ExitCode:
        type: "integer"
        format: "int64"
      Output:
        type: "string"
      Start:
        type: "string"
        format: "date-time"
    description: "HealthcheckResult stores information about a single run of a healthcheck\
      \ probe"
    example:
      Start: "2000-01-23T04:56:07.000+00:00"
      ExitCode: 8
      Output: "Output"
      End: "2000-01-23T04:56:07.000+00:00"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  History:
    type: "object"
    properties:
      author:
        type: "string"
        description: "Author is the author of the build point."
        x-go-name: "Author"
      comment:
        type: "string"
        description: "Comment is a custom message set when creating the layer."
        x-go-name: "Comment"
      created:
        type: "string"
        format: "date-time"
        description: "Created is the combined date and time at which the layer was\
          \ created, formatted as defined by RFC 3339, section 5.6."
        x-go-name: "Created"
      created_by:
        type: "string"
        description: "CreatedBy is the command which created the layer."
        x-go-name: "CreatedBy"
      empty_layer:
        type: "boolean"
        description: "EmptyLayer is used to mark if the history item created a filesystem\
          \ diff."
        x-go-name: "EmptyLayer"
    title: "History describes the history of a layer."
    example:
      author: "author"
      created: "2000-01-23T04:56:07.000+00:00"
      empty_layer: true
      comment: "comment"
      created_by: "created_by"
    x-go-package: "github.com/containers/podman/vendor/github.com/opencontainers/image-spec/specs-go/v1"
  HistoryResponseItem:
    type: "object"
    required:
    - "Comment"
    - "Created"
    - "CreatedBy"
    - "Id"
    - "Size"
    - "Tags"
    properties:
      Comment:
        type: "string"
        description: "comment"
      Created:
        type: "integer"
        format: "int64"
        description: "created"
      CreatedBy:
        type: "string"
        description: "created by"
      Id:
        type: "string"
        description: "Id"
        x-go-name: "ID"
      Size:
        type: "integer"
        format: "int64"
        description: "size"
      Tags:
        type: "array"
        description: "tags"
        items:
          type: "string"
    description: "HistoryResponseItem individual image layer information in response\
      \ to ImageHistory operation"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/image"
  HostConfig:
    type: "object"
    properties:
      AutoRemove:
        type: "boolean"
      Binds:
        type: "array"
        description: "Applicable to all platforms"
        items:
          type: "string"
      BlkioDeviceReadBps:
        type: "array"
        items:
          $ref: "#/definitions/ThrottleDevice"
      BlkioDeviceReadIOps:
        type: "array"
        items:
          $ref: "#/definitions/ThrottleDevice"
      BlkioDeviceWriteBps:
        type: "array"
        items:
          $ref: "#/definitions/ThrottleDevice"
      BlkioDeviceWriteIOps:
        type: "array"
        items:
          $ref: "#/definitions/ThrottleDevice"
      BlkioWeight:
        type: "integer"
        format: "uint16"
      BlkioWeightDevice:
        type: "array"
        items:
          $ref: "#/definitions/WeightDevice"
      CapAdd:
        $ref: "#/definitions/StrSlice"
      CapDrop:
        $ref: "#/definitions/StrSlice"
      Cgroup:
        $ref: "#/definitions/CgroupSpec"
      CgroupParent:
        type: "string"
        description: "Applicable to UNIX platforms"
      CgroupnsMode:
        $ref: "#/definitions/CgroupnsMode"
      ConsoleSize:
        type: "array"
        description: "Applicable to Windows"
        items:
          type: "integer"
          format: "uint64"
      ContainerIDFile:
        type: "string"
      CpuCount:
        type: "integer"
        format: "int64"
        description: "Applicable to Windows"
        x-go-name: "CPUCount"
      CpuPercent:
        type: "integer"
        format: "int64"
        x-go-name: "CPUPercent"
      CpuPeriod:
        type: "integer"
        format: "int64"
        x-go-name: "CPUPeriod"
      CpuQuota:
        type: "integer"
        format: "int64"
        x-go-name: "CPUQuota"
      CpuRealtimePeriod:
        type: "integer"
        format: "int64"
        x-go-name: "CPURealtimePeriod"
      CpuRealtimeRuntime:
        type: "integer"
        format: "int64"
        x-go-name: "CPURealtimeRuntime"
      CpuShares:
        type: "integer"
        format: "int64"
        description: "Applicable to all platforms"
        x-go-name: "CPUShares"
      CpusetCpus:
        type: "string"
      CpusetMems:
        type: "string"
      DeviceCgroupRules:
        type: "array"
        items:
          type: "string"
      DeviceRequests:
        type: "array"
        items:
          $ref: "#/definitions/DeviceRequest"
      Devices:
        type: "array"
        items:
          $ref: "#/definitions/DeviceMapping"
      Dns:
        type: "array"
        items:
          type: "string"
        x-go-name: "DNS"
      DnsOptions:
        type: "array"
        items:
          type: "string"
        x-go-name: "DNSOptions"
      DnsSearch:
        type: "array"
        items:
          type: "string"
        x-go-name: "DNSSearch"
      ExtraHosts:
        type: "array"
        items:
          type: "string"
      GroupAdd:
        type: "array"
        items:
          type: "string"
      IOMaximumBandwidth:
        type: "integer"
        format: "uint64"
      IOMaximumIOps:
        type: "integer"
        format: "uint64"
      Init:
        type: "boolean"
        description: "Run a custom init inside the container, if null, use the daemon's\
          \ configured settings"
      IpcMode:
        $ref: "#/definitions/IpcMode"
      Isolation:
        $ref: "#/definitions/Isolation"
      KernelMemory:
        type: "integer"
        format: "int64"
      KernelMemoryTCP:
        type: "integer"
        format: "int64"
      Links:
        type: "array"
        items:
          type: "string"
      LogConfig:
        $ref: "#/definitions/LogConfig"
      MaskedPaths:
        type: "array"
        description: "MaskedPaths is the list of paths to be masked inside the container\
          \ (this overrides the default set of paths)"
        items:
          type: "string"
      Memory:
        type: "integer"
        format: "int64"
      MemoryReservation:
        type: "integer"
        format: "int64"
      MemorySwap:
        type: "integer"
        format: "int64"
      MemorySwappiness:
        type: "integer"
        format: "int64"
      Mounts:
        type: "array"
        description: "Mounts specs used by the container"
        items:
          $ref: "#/definitions/Mount"
      NanoCpus:
        type: "integer"
        format: "int64"
        x-go-name: "NanoCPUs"
      NetworkMode:
        $ref: "#/definitions/NetworkMode"
      OomKillDisable:
        type: "boolean"
      OomScoreAdj:
        type: "integer"
        format: "int64"
      PidMode:
        $ref: "#/definitions/PidMode"
      PidsLimit:
        type: "integer"
        format: "int64"
      PortBindings:
        $ref: "#/definitions/PortMap"
      Privileged:
        type: "boolean"
      PublishAllPorts:
        type: "boolean"
      ReadonlyPaths:
        type: "array"
        description: "ReadonlyPaths is the list of paths to be set as read-only inside\
          \ the container (this overrides the default set of paths)"
        items:
          type: "string"
      ReadonlyRootfs:
        type: "boolean"
      RestartPolicy:
        $ref: "#/definitions/RestartPolicy"
      Runtime:
        type: "string"
      SecurityOpt:
        type: "array"
        items:
          type: "string"
      ShmSize:
        type: "integer"
        format: "int64"
      StorageOpt:
        type: "object"
        additionalProperties:
          type: "string"
      Sysctls:
        type: "object"
        additionalProperties:
          type: "string"
      Tmpfs:
        type: "object"
        additionalProperties:
          type: "string"
      UTSMode:
        $ref: "#/definitions/UTSMode"
      Ulimits:
        type: "array"
        items:
          $ref: "#/definitions/Ulimit"
      UsernsMode:
        $ref: "#/definitions/UsernsMode"
      VolumeDriver:
        type: "string"
      VolumesFrom:
        type: "array"
        items:
          type: "string"
    title: "HostConfig the non-portable Config structure of a container."
    description: "Here, \"non-portable\" means \"dependent of the host we are running\
      \ on\".\nPortable information *should* appear in Config."
    example:
      ReadonlyRootfs: true
      StorageOpt:
        key: "StorageOpt"
      BlkioWeightDevice:
      - Path: "Path"
        Weight: 5
      - Path: "Path"
        Weight: 5
      DnsOptions:
      - "DnsOptions"
      - "DnsOptions"
      Memory: 4
      CpuPeriod: 3
      Dns:
      - "Dns"
      - "Dns"
      PortBindings: {}
      VolumesFrom:
      - "VolumesFrom"
      - "VolumesFrom"
      MaskedPaths:
      - "MaskedPaths"
      - "MaskedPaths"
      Devices:
      - CgroupPermissions: "CgroupPermissions"
        PathInContainer: "PathInContainer"
        PathOnHost: "PathOnHost"
      - CgroupPermissions: "CgroupPermissions"
        PathInContainer: "PathInContainer"
        PathOnHost: "PathOnHost"
      MemorySwappiness: 9
      BlkioWeight: 5
      CgroupnsMode: {}
      Init: true
      Runtime: "Runtime"
      DeviceCgroupRules:
      - "DeviceCgroupRules"
      - "DeviceCgroupRules"
      UsernsMode: {}
      Ulimits:
      - Hard: 6
        Soft: 1
        Name: "Name"
      - Hard: 6
        Soft: 1
        Name: "Name"
      CpusetCpus: "CpusetCpus"
      MemoryReservation: 5
      Mounts:
      - destination: "destination"
        options:
        - "options"
        - "options"
        source: "source"
        type: "type"
      - destination: "destination"
        options:
        - "options"
        - "options"
        source: "source"
        type: "type"
      ExtraHosts:
      - "ExtraHosts"
      - "ExtraHosts"
      BlkioDeviceWriteIOps:
      - Path: "Path"
        Rate: 1
      - Path: "Path"
        Rate: 1
      ReadonlyPaths:
      - "ReadonlyPaths"
      - "ReadonlyPaths"
      UTSMode: {}
      Cgroup: {}
      CpuQuota: 2
      CpuRealtimeRuntime: 7
      DnsSearch:
      - "DnsSearch"
      - "DnsSearch"
      CpuShares: 1
      ContainerIDFile: "ContainerIDFile"
      OomScoreAdj: 8
      KernelMemory: 7
      LogConfig:
        path: "path"
        driver: "driver"
        options:
          key: "options"
      DeviceRequests:
      - DeviceIDs:
        - "DeviceIDs"
        - "DeviceIDs"
        Options:
          key: "Options"
        Capabilities:
        - - "Capabilities"
          - "Capabilities"
        - - "Capabilities"
          - "Capabilities"
        Driver: "Driver"
        Count: 1
      - DeviceIDs:
        - "DeviceIDs"
        - "DeviceIDs"
        Options:
          key: "Options"
        Capabilities:
        - - "Capabilities"
          - "Capabilities"
        - - "Capabilities"
          - "Capabilities"
        Driver: "Driver"
        Count: 1
      OomKillDisable: true
      IOMaximumBandwidth: 1
      Privileged: true
      Sysctls:
        key: "Sysctls"
      GroupAdd:
      - "GroupAdd"
      - "GroupAdd"
      AutoRemove: true
      KernelMemoryTCP: 1
      CpuPercent: 9
      ConsoleSize:
      - 2
      - 2
      IOMaximumIOps: 6
      CapAdd: ""
      VolumeDriver: "VolumeDriver"
      CapDrop: ""
      CpuCount: 7
      PublishAllPorts: true
      Tmpfs:
        key: "Tmpfs"
      CpuRealtimePeriod: 4
      IpcMode: {}
      Binds:
      - "Binds"
      - "Binds"
      CpusetMems: "CpusetMems"
      BlkioDeviceWriteBps:
      - Path: "Path"
        Rate: 1
      - Path: "Path"
        Rate: 1
      RestartPolicy:
        MaximumRetryCount: 6
        Name: "Name"
      NetworkMode: {}
      PidMode: {}
      BlkioDeviceReadBps:
      - Path: "Path"
        Rate: 1
      - Path: "Path"
        Rate: 1
      CgroupParent: "CgroupParent"
      NanoCpus: 6
      MemorySwap: 9
      Isolation: {}
      Links:
      - "Links"
      - "Links"
      PidsLimit: 9
      BlkioDeviceReadIOps:
      - Path: "Path"
        Rate: 1
      - Path: "Path"
        Rate: 1
      SecurityOpt:
      - "SecurityOpt"
      - "SecurityOpt"
      ShmSize: 3
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/container"
  HostInfo:
    type: "object"
    properties:
      arch:
        type: "string"
        x-go-name: "Arch"
      buildahVersion:
        type: "string"
        x-go-name: "BuildahVersion"
      cgroupManager:
        type: "string"
        x-go-name: "CgroupManager"
      cgroupVersion:
        type: "string"
        x-go-name: "CGroupsVersion"
      conmon:
        $ref: "#/definitions/ConmonInfo"
      cpus:
        type: "integer"
        format: "int64"
        x-go-name: "CPUs"
      distribution:
        $ref: "#/definitions/DistributionInfo"
      eventLogger:
        type: "string"
        x-go-name: "EventLogger"
      hostname:
        type: "string"
        x-go-name: "Hostname"
      idMappings:
        $ref: "#/definitions/IDMappings"
      kernel:
        type: "string"
        x-go-name: "Kernel"
      linkmode:
        type: "string"
        x-go-name: "Linkmode"
      memFree:
        type: "integer"
        format: "int64"
        x-go-name: "MemFree"
      memTotal:
        type: "integer"
        format: "int64"
        x-go-name: "MemTotal"
      ociRuntime:
        $ref: "#/definitions/OCIRuntimeInfo"
      os:
        type: "string"
        x-go-name: "OS"
      remoteSocket:
        $ref: "#/definitions/RemoteSocket"
      rootless:
        type: "boolean"
        x-go-name: "Rootless"
      runtimeInfo:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
        x-go-name: "RuntimeInfo"
      slirp4netns:
        $ref: "#/definitions/SlirpInfo"
      swapFree:
        type: "integer"
        format: "int64"
        x-go-name: "SwapFree"
      swapTotal:
        type: "integer"
        format: "int64"
        x-go-name: "SwapTotal"
      uptime:
        type: "string"
        x-go-name: "Uptime"
    description: "HostInfo describes the libpod host"
    example:
      swapFree: 5
      memFree: 6
      rootless: true
      buildahVersion: "buildahVersion"
      linkmode: "linkmode"
      os: "os"
      cpus: 0
      kernel: "kernel"
      memTotal: 1
      swapTotal: 5
      remoteSocket:
        path: "path"
        exists: true
      distribution:
        distribution: "distribution"
        version: "version"
      idMappings:
        uidmap:
        - size: 7
          container_id: 5
          host_id: 2
        - size: 7
          container_id: 5
          host_id: 2
        gidmap:
        - size: 7
          container_id: 5
          host_id: 2
        - size: 7
          container_id: 5
          host_id: 2
      eventLogger: "eventLogger"
      uptime: "uptime"
      cgroupVersion: "cgroupVersion"
      cgroupManager: "cgroupManager"
      hostname: "hostname"
      conmon:
        path: "path"
        package: "package"
        version: "version"
      ociRuntime:
        path: "path"
        package: "package"
        name: "name"
        version: "version"
      arch: "arch"
      runtimeInfo:
        key: "{}"
      slirp4netns:
        package: "package"
        version: "version"
        executable: "executable"
    x-go-package: "github.com/containers/podman/libpod/define"
  IDMap:
    type: "object"
    properties:
      container_id:
        type: "integer"
        format: "int64"
        x-go-name: "ContainerID"
      host_id:
        type: "integer"
        format: "int64"
        x-go-name: "HostID"
      size:
        type: "integer"
        format: "int64"
        x-go-name: "Size"
    description: "IDMap contains a single entry for user namespace range remapping.\
      \ An array\nof IDMap entries represents the structure that will be provided\
      \ to the Linux\nkernel for creating a user namespace."
    example:
      size: 7
      container_id: 5
      host_id: 2
    x-go-package: "github.com/containers/podman/vendor/github.com/containers/storage/pkg/idtools"
  IDMappingOptions:
    type: "object"
    properties:
      AutoUserNs:
        type: "boolean"
      AutoUserNsOpts:
        $ref: "#/definitions/AutoUserNsOptions"
      GIDMap:
        type: "array"
        items:
          $ref: "#/definitions/IDMap"
      HostGIDMapping:
        type: "boolean"
      HostUIDMapping:
        type: "boolean"
        description: "UIDMap and GIDMap are used for setting up a layer's root filesystem\n\
          for use inside of a user namespace where ID mapping is being used.\nIf HostUIDMapping/HostGIDMapping\
          \ is true, no mapping of the\nrespective type will be used.  Otherwise,\
          \ if UIDMap and/or GIDMap\ncontain at least one mapping, one or both will\
          \ be used.  By default,\nif neither of those conditions apply, if the layer\
          \ has a parent\nlayer, the parent layer's mapping will be used, and if it\
          \ does not\nhave a parent layer, the mapping which was passed to the Store\n\
          object when it was initialized will be used."
      UIDMap:
        type: "array"
        items:
          $ref: "#/definitions/IDMap"
    description: "IDMappingOptions are used for specifying how ID mapping should be\
      \ set up for\na layer or container."
    example:
      HostGIDMapping: true
      AutoUserNsOpts:
        PasswdFile: "PasswdFile"
        AdditionalGIDMappings:
        - size: 7
          container_id: 5
          host_id: 2
        - size: 7
          container_id: 5
          host_id: 2
        Size: 3
        InitialSize: 9
        AdditionalUIDMappings:
        - size: 7
          container_id: 5
          host_id: 2
        - size: 7
          container_id: 5
          host_id: 2
        GroupFile: "GroupFile"
      GIDMap:
      - size: 7
        container_id: 5
        host_id: 2
      - size: 7
        container_id: 5
        host_id: 2
      AutoUserNs: true
      UIDMap:
      - size: 7
        container_id: 5
        host_id: 2
      - size: 7
        container_id: 5
        host_id: 2
      HostUIDMapping: true
    x-go-package: "github.com/containers/podman/vendor/github.com/containers/storage"
  IDMappings:
    type: "object"
    properties:
      gidmap:
        type: "array"
        items:
          $ref: "#/definitions/IDMap"
        x-go-name: "GIDMap"
      uidmap:
        type: "array"
        items:
          $ref: "#/definitions/IDMap"
        x-go-name: "UIDMap"
    description: "IDMappings describe the GID and UID mappings"
    example:
      uidmap:
      - size: 7
        container_id: 5
        host_id: 2
      - size: 7
        container_id: 5
        host_id: 2
      gidmap:
      - size: 7
        container_id: 5
        host_id: 2
      - size: 7
        container_id: 5
        host_id: 2
    x-go-package: "github.com/containers/podman/libpod/define"
  IDResponse:
    type: "object"
    properties:
      Id:
        type: "string"
        description: "ID"
        x-go-name: "ID"
    x-go-package: "github.com/containers/podman/pkg/api/handlers"
  IP:
    title: "An IP is a single IP address, a slice of bytes.\nFunctions in this package\
      \ accept either 4-byte (IPv4)\nor 16-byte (IPv6) slices as input."
    type: "array"
    description: "Note that in this documentation, referring to an\nIP address as\
      \ an IPv4 address or an IPv6 address\nis a semantic property of the address,\
      \ not just the\nlength of the byte slice: a 16-byte slice can still\nbe an IPv4\
      \ address."
    items:
      type: "integer"
      format: "uint8"
    x-go-package: "net"
  IPAM:
    type: "object"
    properties:
      Config:
        type: "array"
        items:
          $ref: "#/definitions/IPAMConfig"
      Driver:
        type: "string"
      Options:
        type: "object"
        additionalProperties:
          type: "string"
    description: "IPAM represents IP Address Management"
    example:
      Options:
        key: "Options"
      Config:
      - AuxiliaryAddresses:
          key: "AuxiliaryAddresses"
        Gateway: "Gateway"
        Subnet: "Subnet"
        IPRange: "IPRange"
      - AuxiliaryAddresses:
          key: "AuxiliaryAddresses"
        Gateway: "Gateway"
        Subnet: "Subnet"
        IPRange: "IPRange"
      Driver: "Driver"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/network"
  IPAMConfig:
    type: "object"
    properties:
      AuxiliaryAddresses:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "AuxAddress"
      Gateway:
        type: "string"
      IPRange:
        type: "string"
      Subnet:
        type: "string"
    description: "IPAMConfig represents IPAM configurations"
    example:
      AuxiliaryAddresses:
        key: "AuxiliaryAddresses"
      Gateway: "Gateway"
      Subnet: "Subnet"
      IPRange: "IPRange"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/network"
  IPMask:
    title: "An IPMask is a bitmask that can be used to manipulate\nIP addresses for\
      \ IP addressing and routing."
    type: "array"
    description: "See type IPNet and func ParseCIDR for details."
    items:
      type: "integer"
      format: "uint8"
    x-go-package: "net"
  IPNet:
    type: "object"
    properties:
      IP:
        $ref: "#/definitions/IP"
      Mask:
        $ref: "#/definitions/IPMask"
    title: "An IPNet represents an IP network."
    example:
      IP: ""
      Mask: ""
    x-go-package: "net"
  IdResponse:
    type: "object"
    required:
    - "Id"
    properties:
      Id:
        type: "string"
        description: "The id of the newly created object."
        x-go-name: "ID"
    description: "IDResponse Response to an API call that returns just an Id"
    x-go-name: "IDResponse"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  ImageConfig:
    type: "object"
    properties:
      Cmd:
        type: "array"
        description: "Cmd defines the default arguments to the entrypoint of the container."
        items:
          type: "string"
      Entrypoint:
        type: "array"
        description: "Entrypoint defines a list of arguments to use as the command\
          \ to execute when the container starts."
        items:
          type: "string"
      Env:
        type: "array"
        description: "Env is a list of environment variables to be used in a container."
        items:
          type: "string"
      ExposedPorts:
        type: "object"
        description: "ExposedPorts a set of ports to expose from a container running\
          \ this image."
        additionalProperties:
          type: "object"
          properties: {}
      Labels:
        type: "object"
        description: "Labels contains arbitrary metadata for the container."
        additionalProperties:
          type: "string"
      StopSignal:
        type: "string"
        description: "StopSignal contains the system call signal that will be sent\
          \ to the container to exit."
      User:
        type: "string"
        description: "User defines the username or UID which the process in the container\
          \ should run as."
      Volumes:
        type: "object"
        description: "Volumes is a set of directories describing where the process\
          \ is likely write data specific to a container instance."
        additionalProperties:
          type: "object"
          properties: {}
      WorkingDir:
        type: "string"
        description: "WorkingDir sets the current working directory of the entrypoint\
          \ process in the container."
    title: "ImageConfig defines the execution parameters which should be used as a\
      \ base when running a container using an image."
    example:
      WorkingDir: "WorkingDir"
      StopSignal: "StopSignal"
      User: "User"
      Volumes:
        key: "{}"
      Entrypoint:
      - "Entrypoint"
      - "Entrypoint"
      Labels:
        key: "Labels"
      Cmd:
      - "Cmd"
      - "Cmd"
      Env:
      - "Env"
      - "Env"
      ExposedPorts:
        key: "{}"
    x-go-package: "github.com/containers/podman/vendor/github.com/opencontainers/image-spec/specs-go/v1"
  ImageDeleteResponse:
    type: "object"
    properties:
      deleted:
        type: "string"
        x-go-name: "Deleted"
      untagged:
        type: "array"
        items:
          type: "string"
        x-go-name: "Untagged"
    description: "ImageDeleteResponse is the response for removing an image from storage\
      \ and containers\nwhat was untagged vs actually removed"
    example:
      deleted: "deleted"
      untagged:
      - "untagged"
      - "untagged"
    x-go-package: "github.com/containers/podman/libpod/image"
  ImageDeleteResponseItem:
    type: "object"
    properties:
      Deleted:
        type: "string"
        description: "The image ID of an image that was deleted"
      Untagged:
        type: "string"
        description: "The image ID of an image that was untagged"
    description: "ImageDeleteResponseItem image delete response item"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  ImageImportReport:
    type: "object"
    properties:
      Id:
        type: "string"
    example:
      Id: "Id"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  ImageLayer:
    type: "object"
    x-go-package: "github.com/containers/podman/pkg/api/handlers"
  ImageLoadReport:
    type: "object"
    properties:
      Names:
        type: "array"
        items:
          type: "string"
    example:
      Names:
      - "Names"
      - "Names"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  ImageMetadata:
    type: "object"
    properties:
      LastTagTime:
        type: "string"
        format: "date-time"
    description: "ImageMetadata contains engine-local data about the image"
    example:
      LastTagTime: "2000-01-23T04:56:07.000+00:00"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  ImageStore:
    type: "object"
    properties:
      number:
        type: "integer"
        format: "int64"
        x-go-name: "Number"
    description: "ImageStore describes the image store.  Right now only the number\n\
      of images present"
    example:
      number: 2
    x-go-package: "github.com/containers/podman/libpod/define"
  ImageSummary:
    type: "object"
    required:
    - "Containers"
    - "Created"
    - "Id"
    - "Labels"
    - "ParentId"
    - "RepoDigests"
    - "RepoTags"
    - "SharedSize"
    - "Size"
    - "VirtualSize"
    properties:
      Containers:
        type: "integer"
        format: "int64"
        description: "containers"
      Created:
        type: "integer"
        format: "int64"
        description: "created"
      Id:
        type: "string"
        description: "Id"
        x-go-name: "ID"
      Labels:
        type: "object"
        description: "labels"
        additionalProperties:
          type: "string"
      ParentId:
        type: "string"
        description: "parent Id"
        x-go-name: "ParentID"
      RepoDigests:
        type: "array"
        description: "repo digests"
        items:
          type: "string"
      RepoTags:
        type: "array"
        description: "repo tags"
        items:
          type: "string"
      SharedSize:
        type: "integer"
        format: "int64"
        description: "shared size"
      Size:
        type: "integer"
        format: "int64"
        description: "size"
      VirtualSize:
        type: "integer"
        format: "int64"
        description: "virtual size"
    description: "ImageSummary image summary"
    example:
      ParentId: "ParentId"
      RepoDigests:
      - "RepoDigests"
      - "RepoDigests"
      SharedSize: 1
      VirtualSize: 5
      RepoTags:
      - "RepoTags"
      - "RepoTags"
      Size: 5
      Containers: 0
      Labels:
        key: "Labels"
      Id: "Id"
      Created: 6
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  Info:
    type: "object"
    properties:
      host:
        $ref: "#/definitions/HostInfo"
      registries:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
        x-go-name: "Registries"
      store:
        $ref: "#/definitions/StoreInfo"
      version:
        $ref: "#/definitions/Version"
    description: "Info is the overall struct that describes the host system\nrunning\
      \ libpod/podman"
    example:
      host:
        swapFree: 5
        memFree: 6
        rootless: true
        buildahVersion: "buildahVersion"
        linkmode: "linkmode"
        os: "os"
        cpus: 0
        kernel: "kernel"
        memTotal: 1
        swapTotal: 5
        remoteSocket:
          path: "path"
          exists: true
        distribution:
          distribution: "distribution"
          version: "version"
        idMappings:
          uidmap:
          - size: 7
            container_id: 5
            host_id: 2
          - size: 7
            container_id: 5
            host_id: 2
          gidmap:
          - size: 7
            container_id: 5
            host_id: 2
          - size: 7
            container_id: 5
            host_id: 2
        eventLogger: "eventLogger"
        uptime: "uptime"
        cgroupVersion: "cgroupVersion"
        cgroupManager: "cgroupManager"
        hostname: "hostname"
        conmon:
          path: "path"
          package: "package"
          version: "version"
        ociRuntime:
          path: "path"
          package: "package"
          name: "name"
          version: "version"
        arch: "arch"
        runtimeInfo:
          key: "{}"
        slirp4netns:
          package: "package"
          version: "version"
          executable: "executable"
      registries:
        key: "{}"
      store:
        graphStatus:
          key: "graphStatus"
        configFile: "configFile"
        containerStore:
          running: 9
          number: 2
          paused: 7
          stopped: 3
        graphRoot: "graphRoot"
        graphDriverName: "graphDriverName"
        volumePath: "volumePath"
        graphOptions:
          key: "{}"
        imageStore:
          number: 2
        runRoot: "runRoot"
      version:
        GitCommit: "GitCommit"
        APIVersion: "APIVersion"
        Version: "Version"
        Built: 4
        OsArch: "OsArch"
        BuiltTime: "BuiltTime"
        GoVersion: "GoVersion"
    x-go-package: "github.com/containers/podman/libpod/define"
  InspectAdditionalNetwork:
    type: "object"
    properties:
      AdditionalMACAddresses:
        type: "array"
        description: "AdditionalMacAddresses is a set of additional MAC Addresses\
          \ beyond\nthe first. CNI may configure more than one interface for a single\n\
          network, which can cause this."
        items:
          type: "string"
        x-go-name: "AdditionalMacAddresses"
      DriverOpts:
        type: "object"
        description: "DriverOpts is presently unused and maintained exclusively for\n\
          compatibility."
        additionalProperties:
          type: "string"
      EndpointID:
        type: "string"
        description: "EndpointID is unused, maintained exclusively for compatibility."
      Gateway:
        type: "string"
        description: "Gateway is the IP address of the gateway this network will use."
      GlobalIPv6Address:
        type: "string"
        description: "GlobalIPv6Address is the global-scope IPv6 Address for this\
          \ network."
      GlobalIPv6PrefixLen:
        type: "integer"
        format: "int64"
        description: "GlobalIPv6PrefixLen is the length of the subnet mask of this\
          \ network."
      IPAMConfig:
        type: "object"
        description: "IPAMConfig is presently unused and maintained exclusively for\n\
          compatibility."
        additionalProperties:
          type: "string"
      IPAddress:
        type: "string"
        description: "IPAddress is the IP address for this network."
      IPPrefixLen:
        type: "integer"
        format: "int64"
        description: "IPPrefixLen is the length of the subnet mask of this network."
      IPv6Gateway:
        type: "string"
        description: "IPv6Gateway is the IPv6 gateway this network will use."
      Links:
        type: "array"
        description: "Links is presently unused and maintained exclusively for\ncompatibility."
        items:
          type: "string"
      MacAddress:
        type: "string"
        description: "MacAddress is the MAC address for the interface in this network."
      NetworkID:
        type: "string"
        description: "Name of the network we're connecting to."
      SecondaryIPAddresses:
        type: "array"
        description: "SecondaryIPAddresses is a list of extra IP Addresses that the\n\
          container has been assigned in this network."
        items:
          type: "string"
      SecondaryIPv6Addresses:
        type: "array"
        description: "SecondaryIPv6Addresses is a list of extra IPv6 Addresses that\
          \ the\ncontainer has been assigned in this networ."
        items:
          type: "string"
    description: "InspectAdditionalNetwork holds information about non-default CNI\
      \ networks the\ncontainer has been connected to.\nAs with InspectNetworkSettings,\
      \ many fields are unused and maintained only\nfor compatibility with Docker."
    example:
      GlobalIPv6Address: "GlobalIPv6Address"
      GlobalIPv6PrefixLen: 6
      IPPrefixLen: 5
      AdditionalMACAddresses:
      - "AdditionalMACAddresses"
      - "AdditionalMACAddresses"
      MacAddress: "MacAddress"
      NetworkID: "NetworkID"
      IPAMConfig:
        key: "IPAMConfig"
      DriverOpts:
        key: "DriverOpts"
      Gateway: "Gateway"
      EndpointID: "EndpointID"
      Links:
      - "Links"
      - "Links"
      SecondaryIPv6Addresses:
      - "SecondaryIPv6Addresses"
      - "SecondaryIPv6Addresses"
      IPv6Gateway: "IPv6Gateway"
      SecondaryIPAddresses:
      - "SecondaryIPAddresses"
      - "SecondaryIPAddresses"
      IPAddress: "IPAddress"
    x-go-package: "github.com/containers/podman/libpod/define"
  InspectBlkioThrottleDevice:
    type: "object"
    properties:
      Path:
        type: "string"
        description: "Path is the path to the device this applies to."
      Rate:
        type: "integer"
        format: "uint64"
        description: "Rate is the maximum rate. It is in either bytes per second or\
          \ iops\nper second, determined by where it is used - documentation will\n\
          indicate which is appropriate."
    description: "InspectBlkioThrottleDevice holds information about a speed cap for\
      \ a device\nnode. This cap applies to a specific operation (read, write, etc)\
      \ on the given\nnode."
    example:
      Path: "Path"
      Rate: 1
    x-go-package: "github.com/containers/podman/libpod/define"
  InspectBlkioWeightDevice:
    type: "object"
    properties:
      Path:
        type: "string"
        description: "Path is the path to the device this applies to."
      Weight:
        type: "integer"
        format: "uint16"
        description: "Weight is the relative weight the scheduler will use when scheduling\n\
          I/O."
    description: "InspectBlkioWeightDevice holds information about the relative weight\n\
      of an individual device node. Weights are used in the I/O scheduler to give\n\
      relative priority to some accesses."
    example:
      Path: "Path"
      Weight: 5
    x-go-package: "github.com/containers/podman/libpod/define"
  InspectContainerConfig:
    type: "object"
    properties:
      Annotations:
        type: "object"
        description: "Container annotations"
        additionalProperties:
          type: "string"
      AttachStderr:
        type: "boolean"
        description: "Unused, at present"
      AttachStdin:
        type: "boolean"
        description: "Unused, at present"
      AttachStdout:
        type: "boolean"
        description: "Unused, at present"
      Cmd:
        type: "array"
        description: "Container command"
        items:
          type: "string"
      CreateCommand:
        type: "array"
        description: "CreateCommand is the full command plus arguments of the process\
          \ the\ncontainer has been created with."
        items:
          type: "string"
      Domainname:
        type: "string"
        description: "Container domain name - unused at present"
        x-go-name: "DomainName"
      Entrypoint:
        type: "string"
        description: "Container entrypoint"
      Env:
        type: "array"
        description: "Container environment variables"
        items:
          type: "string"
      Healthcheck:
        $ref: "#/definitions/Schema2HealthConfig"
      Hostname:
        type: "string"
        description: "Container hostname"
      Image:
        type: "string"
        description: "Container image"
      Labels:
        type: "object"
        description: "Container labels"
        additionalProperties:
          type: "string"
      OnBuild:
        type: "string"
        description: "On-build arguments - presently unused. More of Buildah's domain."
      OpenStdin:
        type: "boolean"
        description: "Whether the container leaves STDIN open"
      StdinOnce:
        type: "boolean"
        description: "Whether STDIN is only left open once.\nPresently not supported\
          \ by Podman, unused."
      StopSignal:
        type: "integer"
        format: "uint64"
        description: "Container stop signal"
      SystemdMode:
        type: "boolean"
        description: "SystemdMode is whether the container is running in systemd mode.\
          \ In\nsystemd mode, the container configuration is customized to optimize\n\
          running systemd in the container."
      Timezone:
        type: "string"
        description: "Timezone is the timezone inside the container.\nLocal means\
          \ it has the same timezone as the host machine"
      Tty:
        type: "boolean"
        description: "Whether the container creates a TTY"
      Umask:
        type: "string"
        description: "Umask is the umask inside the container."
      User:
        type: "string"
        description: "User the container was launched with"
      Volumes:
        type: "object"
        description: "Unused, at present. I've never seen this field populated."
        additionalProperties:
          type: "object"
          properties: {}
      WorkingDir:
        type: "string"
        description: "Container working directory"
    description: "InspectContainerConfig holds further data about how a container\
      \ was initially\nconfigured."
    example:
      Timezone: "Timezone"
      Umask: "Umask"
      StopSignal: 6
      CreateCommand:
      - "CreateCommand"
      - "CreateCommand"
      User: "User"
      Entrypoint: "Entrypoint"
      AttachStderr: true
      SystemdMode: true
      Hostname: "Hostname"
      Labels:
        key: "Labels"
      OpenStdin: true
      Healthcheck:
        Test:
        - "Test"
        - "Test"
        Retries: 0
        Interval: {}
      Env:
      - "Env"
      - "Env"
      Image: "Image"
      StdinOnce: true
      AttachStdout: true
      WorkingDir: "WorkingDir"
      Annotations:
        key: "Annotations"
      Volumes:
        key: "{}"
      OnBuild: "OnBuild"
      AttachStdin: true
      Domainname: "Domainname"
      Tty: true
      Cmd:
      - "Cmd"
      - "Cmd"
    x-go-package: "github.com/containers/podman/libpod/define"
  InspectContainerHostConfig:
    type: "object"
    properties:
      AutoRemove:
        type: "boolean"
        description: "AutoRemove is whether the container will be automatically removed\
          \ on\nexiting.\nIt is not handled directly within libpod and is stored in\
          \ an\nannotation."
      Binds:
        type: "array"
        description: "Binds contains an array of user-added mounts.\nBoth volume mounts\
          \ and named volumes are included.\nTmpfs mounts are NOT included.\nIn 'docker\
          \ inspect' this is separated into 'Binds' and 'Mounts' based\non how a mount\
          \ was added. We do not make this distinction and do not\ninclude a Mounts\
          \ field in inspect.\nFormat: <src>:<destination>[:<comma-separated options>]"
        items:
          type: "string"
      BlkioDeviceReadBps:
        type: "array"
        description: "BlkioDeviceReadBps is an array of I/O throttle parameters for\n\
          individual device nodes.\nThis specifically sets read rate cap in bytes\
          \ per second for device\nnodes.\nAs with BlkioWeightDevice, we pull the\
          \ path from /sys/dev, and we\ndon't guarantee the path will be identical\
          \ to the original (though\nthe node will be)."
        items:
          $ref: "#/definitions/InspectBlkioThrottleDevice"
      BlkioDeviceReadIOps:
        type: "array"
        description: "BlkioDeviceReadIOps is an array of I/O throttle parameters for\n\
          individual device nodes.\nThis specifically sets the read rate cap in iops\
          \ per second for\ndevice nodes.\nAs with BlkioWeightDevice, we pull the\
          \ path from /sys/dev, and we\ndon't guarantee the path will be identical\
          \ to the original (though\nthe node will be)."
        items:
          $ref: "#/definitions/InspectBlkioThrottleDevice"
      BlkioDeviceWriteBps:
        type: "array"
        description: "BlkioDeviceWriteBps is an array of I/O throttle parameters for\n\
          individual device nodes.\nthis specifically sets write rate cap in bytes\
          \ per second for device\nnodes.\nas with BlkioWeightDevice, we pull the\
          \ path from /sys/dev, and we\ndon't guarantee the path will be identical\
          \ to the original (though\nthe node will be)."
        items:
          $ref: "#/definitions/InspectBlkioThrottleDevice"
      BlkioDeviceWriteIOps:
        type: "array"
        description: "BlkioDeviceWriteIOps is an array of I/O throttle parameters\
          \ for\nindividual device nodes.\nThis specifically sets the write rate cap\
          \ in iops per second for\ndevice nodes.\nAs with BlkioWeightDevice, we pull\
          \ the path from /sys/dev, and we\ndon't guarantee the path will be identical\
          \ to the original (though\nthe node will be)."
        items:
          $ref: "#/definitions/InspectBlkioThrottleDevice"
      BlkioWeight:
        type: "integer"
        format: "uint16"
        description: "BlkioWeight indicates the I/O resources allocated to the container.\n\
          It is a relative weight in the scheduler for assigning I/O time\nversus\
          \ other CGroups."
      BlkioWeightDevice:
        type: "array"
        description: "BlkioWeightDevice is an array of I/O resource priorities for\n\
          individual device nodes.\nUnfortunately, the spec only stores the device's\
          \ Major/Minor numbers\nand not the path, which is used here.\nFortunately,\
          \ the kernel provides an interface for retrieving the path\nof a given node\
          \ by major:minor at /sys/dev/. However, the exact path\nin use may not be\
          \ what was used in the original CLI invocation -\nthough it is guaranteed\
          \ that the device node will be the same, and\nusing the given path will\
          \ be functionally identical."
        items:
          $ref: "#/definitions/InspectBlkioWeightDevice"
      CapAdd:
        type: "array"
        description: "CapAdd is a list of capabilities added to the container.\nIt\
          \ is not directly stored by Libpod, and instead computed from the\ncapabilities\
          \ listed in the container's spec, compared against a set\nof default capabilities."
        items:
          type: "string"
      CapDrop:
        type: "array"
        description: "CapDrop is a list of capabilities removed from the container.\n\
          It is not directly stored by libpod, and instead computed from the\ncapabilities\
          \ listed in the container's spec, compared against a set\nof default capabilities."
        items:
          type: "string"
      Cgroup:
        type: "string"
        description: "Cgroup contains the container's cgroup. It is presently not\n\
          populated.\nTODO."
      CgroupConf:
        type: "object"
        description: "CgroupConf is the configuration for cgroup v2."
        additionalProperties:
          type: "string"
      CgroupMode:
        type: "string"
        description: "CgroupMode is the configuration of the container's cgroup namespace.\n\
          Populated as follows:\nprivate - a cgroup namespace has been created\nhost\
          \ - No cgroup namespace created\ncontainer:<id> - Using another container's\
          \ cgroup namespace\nns:<path> - A path to a cgroup namespace has been specified"
      CgroupParent:
        type: "string"
        description: "CgroupParent is the CGroup parent of the container.\nOnly set\
          \ if not default."
      Cgroups:
        type: "string"
        description: "Cgroups contains the container's CGroup mode.\nAllowed values\
          \ are \"default\" (container is creating CGroups) and\n\"disabled\" (container\
          \ is not creating CGroups).\nThis is Libpod-specific and not included in\
          \ `docker inspect`."
      ConsoleSize:
        type: "array"
        description: "ConsoleSize is an array of 2 integers showing the size of the\n\
          container's console.\nIt is only set if the container is creating a terminal.\n\
          TODO."
        items:
          type: "integer"
          format: "uint64"
      ContainerIDFile:
        type: "string"
        description: "ContainerIDFile is a file created during container creation\
          \ to hold\nthe ID of the created container.\nThis is not handled within\
          \ libpod and is stored in an annotation."
      CpuCount:
        type: "integer"
        format: "uint64"
        description: "CpuCount is Windows-only and not presently implemented."
      CpuPercent:
        type: "integer"
        format: "uint64"
        description: "CpuPercent is Windows-only and not presently implemented."
      CpuPeriod:
        type: "integer"
        format: "uint64"
        description: "CpuPeriod is the length of a CPU period in microseconds.\nIt\
          \ relates directly to CpuQuota."
      CpuQuota:
        type: "integer"
        format: "int64"
        description: "CpuPeriod is the amount of time (in microseconds) that a container\n\
          can use the CPU in every CpuPeriod."
      CpuRealtimePeriod:
        type: "integer"
        format: "uint64"
        description: "CpuRealtimePeriod is the length of time (in microseconds) of\
          \ the CPU\nrealtime period. If set to 0, no time will be allocated to realtime\n\
          tasks."
      CpuRealtimeRuntime:
        type: "integer"
        format: "int64"
        description: "CpuRealtimeRuntime is the length of time (in microseconds) allocated\n\
          for realtime tasks within every CpuRealtimePeriod."
      CpuShares:
        type: "integer"
        format: "uint64"
        description: "CpuShares indicates the CPU resources allocated to the container.\n\
          It is a relative weight in the scheduler for assigning CPU time\nversus\
          \ other CGroups."
      CpusetCpus:
        type: "string"
        description: "CpusetCpus is the is the set of CPUs that the container will\
          \ execute\non. Formatted as `0-3` or `0,2`. Default (if unset) is all CPUs."
      CpusetMems:
        type: "string"
        description: "CpusetMems is the set of memory nodes the container will use.\n\
          Formatted as `0-3` or `0,2`. Default (if unset) is all memory nodes."
      Devices:
        type: "array"
        description: "Devices is a list of device nodes that will be added to the\n\
          container.\nThese are stored in the OCI spec only as type, major, minor\
          \ while we\ndisplay the host path. We convert this with /sys/dev, but we\
          \ cannot\nguarantee that the host path will be identical - only that the\
          \ actual\ndevice will be."
        items:
          $ref: "#/definitions/InspectDevice"
      DiskQuota:
        type: "integer"
        format: "uint64"
        description: "DiskQuota is the maximum amount of disk space the container\
          \ may use\n(in bytes).\nPresently not populated.\nTODO."
      Dns:
        type: "array"
        description: "Dns is a list of DNS nameservers that will be added to the\n\
          container's resolv.conf"
        items:
          type: "string"
      DnsOptions:
        type: "array"
        description: "DnsOptions is a list of DNS options that will be set in the\n\
          container's resolv.conf"
        items:
          type: "string"
      DnsSearch:
        type: "array"
        description: "DnsSearch is a list of DNS search domains that will be set in\
          \ the\ncontainer's resolv.conf"
        items:
          type: "string"
      ExtraHosts:
        type: "array"
        description: "ExtraHosts contains hosts that will be aded to the container's\n\
          etc/hosts."
        items:
          type: "string"
      GroupAdd:
        type: "array"
        description: "GroupAdd contains groups that the user inside the container\
          \ will be\nadded to."
        items:
          type: "string"
      IOMaximumBandwidth:
        type: "integer"
        format: "uint64"
        description: "IOMaximumBandwidth is Windows-only and not presently implemented."
      IOMaximumIOps:
        type: "integer"
        format: "uint64"
        description: "IOMaximumIOps is Windows-only and not presently implemented."
      Init:
        type: "boolean"
        description: "Init indicates whether the container has an init mounted into\
          \ it."
      IpcMode:
        type: "string"
        description: "IpcMode represents the configuration of the container's IPC\n\
          namespace.\nPopulated as follows:\n\"\" (empty string) - Default, an IPC\
          \ namespace will be created\nhost - No IPC namespace created\ncontainer:<id>\
          \ - Using another container's IPC namespace\nns:<path> - A path to an IPC\
          \ namespace has been specified"
      Isolation:
        type: "string"
        description: "Isolation is presently unused and provided solely for Docker\n\
          compatibility."
      KernelMemory:
        type: "integer"
        format: "int64"
        description: "KernelMemory is the maximum amount of memory the kernel will\
          \ devote\nto the container."
      Links:
        type: "array"
        description: "Links is unused, and provided purely for Docker compatibility."
        items:
          type: "string"
      LogConfig:
        $ref: "#/definitions/InspectLogConfig"
      Memory:
        type: "integer"
        format: "int64"
        description: "Memory indicates the memory resources allocated to the container.\n\
          This is the limit (in bytes) of RAM the container may use."
      MemoryReservation:
        type: "integer"
        format: "int64"
        description: "MemoryReservation is the reservation (soft limit) of memory\
          \ available\nto the container. Soft limits are warnings only and can be\
          \ exceeded."
      MemorySwap:
        type: "integer"
        format: "int64"
        description: "MemorySwap is the total limit for all memory available to the\n\
          container, including swap. 0 indicates that there is no limit to the\namount\
          \ of memory available."
      MemorySwappiness:
        type: "integer"
        format: "int64"
        description: "MemorySwappiness is the willingness of the kernel to page container\n\
          memory to swap. It is an integer from 0 to 100, with low numbers\nbeing\
          \ more likely to be put into swap.\n1, the default, will not set swappiness\
          \ and use the system defaults."
      NanoCpus:
        type: "integer"
        format: "int64"
        description: "NanoCpus indicates number of CPUs allocated to the container.\n\
          It is an integer where one full CPU is indicated by 1000000000 (one\nbillion).\n\
          Thus, 2.5 CPUs (fractional portions of CPUs are allowed) would be\n2500000000\
          \ (2.5 billion).\nIn 'docker inspect' this is set exclusively of two further\
          \ options in\nthe output (CpuPeriod and CpuQuota) which are both used to\
          \ implement\nthis functionality.\nWe can't distinguish here, so if CpuQuota\
          \ is set to the default of\n100000, we will set both CpuQuota, CpuPeriod,\
          \ and NanoCpus. If\nCpuQuota is not the default, we will not set NanoCpus."
      NetworkMode:
        type: "string"
        description: "NetworkMode is the configuration of the container's network\n\
          namespace.\nPopulated as follows:\ndefault - A network namespace is being\
          \ created and configured via CNI\nnone - A network namespace is being created,\
          \ not configured via CNI\nhost - No network namespace created\ncontainer:<id>\
          \ - Using another container's network namespace\nns:<path> - A path to a\
          \ network namespace has been specified"
      OomKillDisable:
        type: "boolean"
        description: "OomKillDisable indicates whether the kernel OOM killer is disabled\n\
          for the container."
      OomScoreAdj:
        type: "integer"
        format: "int64"
        description: "OOMScoreAdj is an adjustment that will be made to the container's\
          \ OOM\nscore."
      PidMode:
        type: "string"
        description: "PidMode represents the configuration of the container's PID\n\
          namespace.\nPopulated as follows:\n\"\" (empty string) - Default, a PID\
          \ namespace will be created\nhost - No PID namespace created\ncontainer:<id>\
          \ - Using another container's PID namespace\nns:<path> - A path to a PID\
          \ namespace has been specified"
      PidsLimit:
        type: "integer"
        format: "int64"
        description: "PidsLimit is the maximum number of PIDs what may be created\
          \ within\nthe container. 0, the default, indicates no limit."
      PortBindings:
        type: "object"
        description: "PortBindings contains the container's port bindings.\nIt is\
          \ formatted as map[string][]InspectHostPort.\nThe string key here is formatted\
          \ as <integer port number>/<protocol>\nand represents the container port.\
          \ A single container port may be\nbound to multiple host ports (on different\
          \ IPs)."
        additionalProperties:
          type: "array"
          items:
            $ref: "#/definitions/InspectHostPort"
      Privileged:
        type: "boolean"
        description: "Privileged indicates whether the container is running with elevated\n\
          privileges.\nThis has a very specific meaning in the Docker sense, so it's\
          \ very\ndifficult to decode from the spec and config, and so is stored as\
          \ an\nannotation."
      PublishAllPorts:
        type: "boolean"
        description: "PublishAllPorts indicates whether image ports are being published.\n\
          This is not directly stored in libpod and is saved as an annotation."
      ReadonlyRootfs:
        type: "boolean"
        description: "ReadonlyRootfs is whether the container will be mounted read-only."
      RestartPolicy:
        $ref: "#/definitions/InspectRestartPolicy"
      Runtime:
        type: "string"
        description: "Runtime is provided purely for Docker compatibility.\nIt is\
          \ set unconditionally to \"oci\" as Podman does not presently\nsupport non-OCI\
          \ runtimes."
      SecurityOpt:
        type: "array"
        description: "SecurityOpt is a list of security-related options that are set\
          \ in the\ncontainer."
        items:
          type: "string"
      ShmSize:
        type: "integer"
        format: "int64"
        description: "ShmSize is the size of the container's SHM device."
      Tmpfs:
        type: "object"
        description: "Tmpfs is a list of tmpfs filesystems that will be mounted into\
          \ the\ncontainer.\nIt is a map of destination path to options for the mount."
        additionalProperties:
          type: "string"
      UTSMode:
        type: "string"
        description: "UTSMode represents the configuration of the container's UID\n\
          namespace.\nPopulated as follows:\n\"\" (empty string) - Default, a UTS\
          \ namespace will be created\nhost - no UTS namespace created\ncontainer:<id>\
          \ - Using another container's UTS namespace\nns:<path> - A path to a UTS\
          \ namespace has been specified"
      Ulimits:
        type: "array"
        description: "Ulimits is a set of ulimits that will be set within the container."
        items:
          $ref: "#/definitions/InspectUlimit"
      UsernsMode:
        type: "string"
        description: "UsernsMode represents the configuration of the container's user\n\
          namespace.\nWhen running rootless, a user namespace is created outside of\
          \ libpod\nto allow some privileged operations. This will not be reflected\
          \ here.\nPopulated as follows:\n\"\" (empty string) - No user namespace\
          \ will be created\nprivate - The container will be run in a user namespace\n\
          container:<id> - Using another container's user namespace\nns:<path> - A\
          \ path to a user namespace has been specified\nTODO Rootless has an additional\
          \ 'keep-id' option, presently not\nreflected here."
      VolumeDriver:
        type: "string"
        description: "VolumeDriver is presently unused and is retained for Docker\n\
          compatibility."
      VolumesFrom:
        type: "array"
        description: "VolumesFrom is a list of containers which this container uses\
          \ volumes\nfrom. This is not handled directly within libpod and is stored\
          \ in an\nannotation.\nIt is formatted as an array of container names and\
          \ IDs."
        items:
          type: "string"
    description: "InspectContainerHostConfig holds information used when the container\
      \ was\ncreated.\nIt's very much a Docker-specific struct, retained (mostly)\
      \ as-is for\ncompatibility. We fill individual fields as best as we can, inferring\
      \ as much\nas possible from the spec and container config.\nSome things cannot\
      \ be inferred. These will be populated by spec annotations\n(if available).\n\
      Field names are fixed for compatibility and cannot be changed.\nAs such, silence\
      \ lint warnings about them.\nnolint"
    example:
      ReadonlyRootfs: true
      DiskQuota: 1
      BlkioWeightDevice:
      - Path: "Path"
        Weight: 5
      - Path: "Path"
        Weight: 5
      DnsOptions:
      - "DnsOptions"
      - "DnsOptions"
      Memory: 1
      CpuPeriod: 3
      Dns:
      - "Dns"
      - "Dns"
      PortBindings:
        key:
        - HostIp: "HostIp"
          HostPort: "HostPort"
        - HostIp: "HostIp"
          HostPort: "HostPort"
      VolumesFrom:
      - "VolumesFrom"
      - "VolumesFrom"
      Devices:
      - CgroupPermissions: "CgroupPermissions"
        PathInContainer: "PathInContainer"
        PathOnHost: "PathOnHost"
      - CgroupPermissions: "CgroupPermissions"
        PathInContainer: "PathInContainer"
        PathOnHost: "PathOnHost"
      MemorySwappiness: 9
      BlkioWeight: 5
      CgroupMode: "CgroupMode"
      Init: true
      Runtime: "Runtime"
      UsernsMode: "UsernsMode"
      Ulimits:
      - Hard: 3
        Soft: 6
        Name: "Name"
      - Hard: 3
        Soft: 6
        Name: "Name"
      CpusetCpus: "CpusetCpus"
      MemoryReservation: 4
      ExtraHosts:
      - "ExtraHosts"
      - "ExtraHosts"
      BlkioDeviceWriteIOps:
      - Path: "Path"
        Rate: 1
      - Path: "Path"
        Rate: 1
      Cgroups: "Cgroups"
      UTSMode: "UTSMode"
      Cgroup: "Cgroup"
      CpuQuota: 2
      CpuRealtimeRuntime: 7
      DnsSearch:
      - "DnsSearch"
      - "DnsSearch"
      CgroupConf:
        key: "CgroupConf"
      CpuShares: 1
      ContainerIDFile: "ContainerIDFile"
      OomScoreAdj: 6
      KernelMemory: 7
      LogConfig:
        Type: "Type"
        Config:
          key: "Config"
      OomKillDisable: true
      IOMaximumBandwidth: 1
      Privileged: true
      GroupAdd:
      - "GroupAdd"
      - "GroupAdd"
      AutoRemove: true
      CpuPercent: 9
      ConsoleSize:
      - 2
      - 2
      IOMaximumIOps: 6
      CapAdd:
      - "CapAdd"
      - "CapAdd"
      VolumeDriver: "VolumeDriver"
      CapDrop:
      - "CapDrop"
      - "CapDrop"
      CpuCount: 7
      PublishAllPorts: true
      Tmpfs:
        key: "Tmpfs"
      CpuRealtimePeriod: 4
      IpcMode: "IpcMode"
      Binds:
      - "Binds"
      - "Binds"
      CpusetMems: "CpusetMems"
      BlkioDeviceWriteBps:
      - Path: "Path"
        Rate: 1
      - Path: "Path"
        Rate: 1
      RestartPolicy:
        MaximumRetryCount: 9
        Name: "Name"
      NetworkMode: "NetworkMode"
      PidMode: "PidMode"
      BlkioDeviceReadBps:
      - Path: "Path"
        Rate: 1
      - Path: "Path"
        Rate: 1
      CgroupParent: "CgroupParent"
      NanoCpus: 9
      MemorySwap: 5
      Isolation: "Isolation"
      Links:
      - "Links"
      - "Links"
      PidsLimit: 8
      BlkioDeviceReadIOps:
      - Path: "Path"
        Rate: 1
      - Path: "Path"
        Rate: 1
      SecurityOpt:
      - "SecurityOpt"
      - "SecurityOpt"
      ShmSize: 6
    x-go-package: "github.com/containers/podman/libpod/define"
  InspectContainerState:
    type: "object"
    properties:
      ConmonPid:
        type: "integer"
        format: "int64"
      Dead:
        type: "boolean"
      Error:
        type: "string"
      ExitCode:
        type: "integer"
        format: "int32"
      FinishedAt:
        type: "string"
        format: "date-time"
      Healthcheck:
        $ref: "#/definitions/HealthCheckResults"
      OOMKilled:
        type: "boolean"
      OciVersion:
        type: "string"
      Paused:
        type: "boolean"
      Pid:
        type: "integer"
        format: "int64"
      Restarting:
        type: "boolean"
      Running:
        type: "boolean"
      StartedAt:
        type: "string"
        format: "date-time"
      Status:
        type: "string"
    description: "InspectContainerState provides a detailed record of a container's\
      \ current\nstate. It is returned as part of InspectContainerData.\nAs with InspectContainerData,\
      \ many portions of this struct are matched to\nDocker, but here we see more\
      \ fields that are unused (nonsensical in the\ncontext of Libpod)."
    example:
      Status: "Status"
      Dead: true
      ExitCode: 0
      ConmonPid: 7
      Error: "Error"
      OciVersion: "OciVersion"
      Pid: 6
      Healthcheck:
        Status: "Status"
        Log:
        - Start: "Start"
          ExitCode: 6
          Output: "Output"
          End: "End"
        - Start: "Start"
          ExitCode: 6
          Output: "Output"
          End: "End"
        FailingStreak: 7
      Restarting: true
      Running: true
      FinishedAt: "2000-01-23T04:56:07.000+00:00"
      OOMKilled: true
      StartedAt: "2000-01-23T04:56:07.000+00:00"
      Paused: true
    x-go-package: "github.com/containers/podman/libpod/define"
  InspectDevice:
    type: "object"
    properties:
      CgroupPermissions:
        type: "string"
        description: "CgroupPermissions is the permissions of the mounted device.\n\
          Presently not populated.\nTODO."
      PathInContainer:
        type: "string"
        description: "PathInContainer is the path of the device within the container."
      PathOnHost:
        type: "string"
        description: "PathOnHost is the path of the device on the host."
    title: "InspectDevice is a single device that will be mounted into the container."
    example:
      CgroupPermissions: "CgroupPermissions"
      PathInContainer: "PathInContainer"
      PathOnHost: "PathOnHost"
    x-go-package: "github.com/containers/podman/libpod/define"
  InspectHostPort:
    type: "object"
    properties:
      HostIp:
        type: "string"
        description: "IP on the host we are bound to. \"\" if not specified (binding\
          \ to all\nIPs)."
        x-go-name: "HostIP"
      HostPort:
        type: "string"
        description: "Port on the host we are bound to. No special formatting - just\
          \ an\ninteger stuffed into a string."
    description: "InspectHostPort provides information on a port on the host that\
      \ a container's\nport is bound to."
    example:
      HostIp: "HostIp"
      HostPort: "HostPort"
    x-go-package: "github.com/containers/podman/libpod/define"
  InspectLogConfig:
    type: "object"
    properties:
      Config:
        type: "object"
        additionalProperties:
          type: "string"
      Type:
        type: "string"
    description: "InspectLogConfig holds information about a container's configured\
      \ log driver\nand is presently unused. It is retained for Docker compatibility."
    example:
      Type: "Type"
      Config:
        key: "Config"
    x-go-package: "github.com/containers/podman/libpod/define"
  InspectMount:
    type: "object"
    properties:
      Destination:
        type: "string"
        description: "The destination directory for the volume. Specified as a path\
          \ within\nthe container, as it would be passed into the OCI runtime."
      Driver:
        type: "string"
        description: "The driver used for the named volume. Empty for bind mounts."
      Mode:
        type: "string"
        description: "Contains SELinux :z/:Z mount options. Unclear what, if anything,\
          \ else\ngoes in here."
      Name:
        type: "string"
        description: "The name of the volume. Empty for bind mounts."
      Options:
        type: "array"
        description: "All remaining mount options. Additional data, not present in\
          \ the\noriginal output."
        items:
          type: "string"
      Propagation:
        type: "string"
        description: "Mount propagation for the mount. Can be empty if not specified,\
          \ but\nis always printed - no omitempty."
      RW:
        type: "boolean"
        description: "Whether the volume is read-write"
      Source:
        type: "string"
        description: "The source directory for the volume."
      Type:
        type: "string"
        description: "Whether the mount is a volume or bind mount. Allowed values\
          \ are\n\"volume\" and \"bind\"."
    description: "InspectMount provides a record of a single mount in a container.\
      \ It contains\nfields for both named and normal volumes. Only user-specified\
      \ volumes will be\nincluded, and tmpfs volumes are not included even if the\
      \ user specified them."
    example:
      Destination: "Destination"
      Options:
      - "Options"
      - "Options"
      Type: "Type"
      Propagation: "Propagation"
      RW: true
      Mode: "Mode"
      Driver: "Driver"
      Source: "Source"
      Name: "Name"
    x-go-package: "github.com/containers/podman/libpod/define"
  InspectNetworkSettings:
    type: "object"
    properties:
      AdditionalMACAddresses:
        type: "array"
        description: "AdditionalMacAddresses is a set of additional MAC Addresses\
          \ beyond\nthe first. CNI may configure more than one interface for a single\n\
          network, which can cause this."
        items:
          type: "string"
        x-go-name: "AdditionalMacAddresses"
      Bridge:
        type: "string"
      EndpointID:
        type: "string"
        description: "EndpointID is unused, maintained exclusively for compatibility."
      Gateway:
        type: "string"
        description: "Gateway is the IP address of the gateway this network will use."
      GlobalIPv6Address:
        type: "string"
        description: "GlobalIPv6Address is the global-scope IPv6 Address for this\
          \ network."
      GlobalIPv6PrefixLen:
        type: "integer"
        format: "int64"
        description: "GlobalIPv6PrefixLen is the length of the subnet mask of this\
          \ network."
      HairpinMode:
        type: "boolean"
      IPAddress:
        type: "string"
        description: "IPAddress is the IP address for this network."
      IPPrefixLen:
        type: "integer"
        format: "int64"
        description: "IPPrefixLen is the length of the subnet mask of this network."
      IPv6Gateway:
        type: "string"
        description: "IPv6Gateway is the IPv6 gateway this network will use."
      LinkLocalIPv6Address:
        type: "string"
      LinkLocalIPv6PrefixLen:
        type: "integer"
        format: "int64"
      MacAddress:
        type: "string"
        description: "MacAddress is the MAC address for the interface in this network."
      Networks:
        type: "object"
        description: "Networks contains information on non-default CNI networks this\n\
          container has joined.\nIt is a map of network name to network information."
        additionalProperties:
          $ref: "#/definitions/InspectAdditionalNetwork"
      Ports:
        type: "object"
        additionalProperties:
          type: "array"
          items:
            $ref: "#/definitions/InspectHostPort"
      SandboxID:
        type: "string"
      SandboxKey:
        type: "string"
      SecondaryIPAddresses:
        type: "array"
        description: "SecondaryIPAddresses is a list of extra IP Addresses that the\n\
          container has been assigned in this network."
        items:
          type: "string"
      SecondaryIPv6Addresses:
        type: "array"
        description: "SecondaryIPv6Addresses is a list of extra IPv6 Addresses that\
          \ the\ncontainer has been assigned in this networ."
        items:
          type: "string"
    description: "InspectNetworkSettings holds information about the network settings\
      \ of the\ncontainer.\nMany fields are maintained only for compatibility with\
      \ `docker inspect` and\nare unused within Libpod."
    example:
      HairpinMode: true
      Networks:
        key:
          GlobalIPv6Address: "GlobalIPv6Address"
          GlobalIPv6PrefixLen: 6
          IPPrefixLen: 5
          AdditionalMACAddresses:
          - "AdditionalMACAddresses"
          - "AdditionalMACAddresses"
          MacAddress: "MacAddress"
          NetworkID: "NetworkID"
          IPAMConfig:
            key: "IPAMConfig"
          DriverOpts:
            key: "DriverOpts"
          Gateway: "Gateway"
          EndpointID: "EndpointID"
          Links:
          - "Links"
          - "Links"
          SecondaryIPv6Addresses:
          - "SecondaryIPv6Addresses"
          - "SecondaryIPv6Addresses"
          IPv6Gateway: "IPv6Gateway"
          SecondaryIPAddresses:
          - "SecondaryIPAddresses"
          - "SecondaryIPAddresses"
          IPAddress: "IPAddress"
      SandboxKey: "SandboxKey"
      GlobalIPv6Address: "GlobalIPv6Address"
      Ports:
        key:
        - HostIp: "HostIp"
          HostPort: "HostPort"
        - HostIp: "HostIp"
          HostPort: "HostPort"
      GlobalIPv6PrefixLen: 1
      IPPrefixLen: 2
      AdditionalMACAddresses:
      - "AdditionalMACAddresses"
      - "AdditionalMACAddresses"
      MacAddress: "MacAddress"
      SandboxID: "SandboxID"
      LinkLocalIPv6Address: "LinkLocalIPv6Address"
      LinkLocalIPv6PrefixLen: 6
      Gateway: "Gateway"
      EndpointID: "EndpointID"
      SecondaryIPv6Addresses:
      - "SecondaryIPv6Addresses"
      - "SecondaryIPv6Addresses"
      IPv6Gateway: "IPv6Gateway"
      SecondaryIPAddresses:
      - "SecondaryIPAddresses"
      - "SecondaryIPAddresses"
      IPAddress: "IPAddress"
      Bridge: "Bridge"
    x-go-package: "github.com/containers/podman/libpod/define"
  InspectPodContainerInfo:
    type: "object"
    properties:
      Id:
        type: "string"
        description: "ID is the ID of the container."
        x-go-name: "ID"
      Name:
        type: "string"
        description: "Name is the name of the container."
      State:
        type: "string"
        description: "State is the current status of the container."
    title: "InspectPodContainerInfo contains information on a container in a pod."
    example:
      State: "State"
      Id: "Id"
      Name: "Name"
    x-go-package: "github.com/containers/podman/libpod/define"
  InspectPodInfraConfig:
    type: "object"
    properties:
      DNSOption:
        type: "array"
        description: "DNSOption is a set of DNS options that will be used by the infra\n\
          container's resolv.conf and shared with the remainder of the pod."
        items:
          type: "string"
      DNSSearch:
        type: "array"
        description: "DNSSearch is a set of DNS search domains that will be used by\
          \ the\ninfra container's resolv.conf and shared with the remainder of the\n\
          pod."
        items:
          type: "string"
      DNSServer:
        type: "array"
        description: "DNSServer is a set of DNS Servers that will be used by the infra\n\
          container's resolv.conf and shared with the remainder of the pod."
        items:
          type: "string"
      HostAdd:
        type: "array"
        description: "HostAdd adds a number of hosts to the infra container's resolv.conf\n\
          which will be shared with the rest of the pod."
        items:
          type: "string"
      HostNetwork:
        type: "boolean"
        description: "HostNetwork is whether the infra container (and thus the whole\
          \ pod)\nwill use the host's network and not create a network namespace."
      NetworkOptions:
        type: "object"
        description: "NetworkOptions are additional options for each network"
        additionalProperties:
          type: "array"
          items:
            type: "string"
      Networks:
        type: "array"
        description: "Networks is a list of CNI networks the pod will join."
        items:
          type: "string"
      NoManageHosts:
        type: "boolean"
        description: "NoManageHosts indicates that the pod will not manage /etc/hosts\
          \ and\ninstead each container will handle their own."
      NoManageResolvConf:
        type: "boolean"
        description: "NoManageResolvConf indicates that the pod will not manage resolv.conf\n\
          and instead each container will handle their own."
      PortBindings:
        type: "object"
        description: "PortBindings are ports that will be forwarded to the infra container\n\
          and then shared with the pod."
        additionalProperties:
          type: "array"
          items:
            $ref: "#/definitions/InspectHostPort"
      StaticIP:
        $ref: "#/definitions/IP"
      StaticMAC:
        $ref: "#/definitions/HardwareAddr"
    description: "InspectPodInfraConfig contains the configuration of the pod's infra\n\
      container."
    example:
      NetworkOptions:
        key:
        - "NetworkOptions"
        - "NetworkOptions"
      Networks:
      - "Networks"
      - "Networks"
      DNSOption:
      - "DNSOption"
      - "DNSOption"
      NoManageHosts: true
      PortBindings:
        key:
        - HostIp: "HostIp"
          HostPort: "HostPort"
        - HostIp: "HostIp"
          HostPort: "HostPort"
      DNSServer:
      - "DNSServer"
      - "DNSServer"
      StaticIP: ""
      DNSSearch:
      - "DNSSearch"
      - "DNSSearch"
      HostNetwork: true
      HostAdd:
      - "HostAdd"
      - "HostAdd"
      NoManageResolvConf: true
      StaticMAC: ""
    x-go-package: "github.com/containers/podman/libpod/define"
  InspectRestartPolicy:
    type: "object"
    properties:
      MaximumRetryCount:
        type: "integer"
        format: "uint64"
        description: "MaximumRetryCount is the maximum number of retries allowed if\
          \ the\n\"on-failure\" restart policy is in use. Not used if \"on-failure\"\
          \ is\nnot set."
      Name:
        type: "string"
        description: "Name contains the container's restart policy.\nAllowable values\
          \ are \"no\" or \"\" (take no action),\n\"on-failure\" (restart on non-zero\
          \ exit code, with an optional max\nretry count), and \"always\" (always\
          \ restart on container stop, unless\nexplicitly requested by API).\nNote\
          \ that this is NOT actually a name of any sort - the poor naming\nis for\
          \ Docker compatibility."
    title: "InspectRestartPolicy holds information about the container's restart policy."
    example:
      MaximumRetryCount: 9
      Name: "Name"
    x-go-package: "github.com/containers/podman/libpod/define"
  InspectUlimit:
    type: "object"
    properties:
      Hard:
        type: "integer"
        format: "uint64"
        description: "Hard is the hard limit that will be applied."
      Name:
        type: "string"
        description: "Name is the name (type) of the ulimit."
      Soft:
        type: "integer"
        format: "uint64"
        description: "Soft is the soft limit that will be applied."
    title: "InspectUlimit is a ulimit that will be applied to the container."
    example:
      Hard: 3
      Soft: 6
      Name: "Name"
    x-go-package: "github.com/containers/podman/libpod/define"
  IpcConfig:
    type: "object"
    properties:
      IpcMode:
        $ref: "#/definitions/IpcMode"
    description: "IpcConfig configures the ipc namespace for the container"
    x-go-package: "github.com/containers/podman/pkg/spec"
  IpcMode:
    type: "string"
    title: "IpcMode represents the container ipc stack."
    x-go-package: "github.com/containers/podman/pkg/namespaces"
  Isolation:
    type: "string"
    description: "Isolation represents the isolation technology of a container. The\
      \ supported\nvalues are platform specific"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/container"
  LibpodContainersPruneReport:
    type: "object"
    properties:
      error:
        type: "string"
        x-go-name: "PruneError"
      id:
        type: "string"
        x-go-name: "ID"
      space:
        type: "integer"
        format: "int64"
        x-go-name: "SpaceReclaimed"
    example:
      id: "id"
      error: "error"
      space: 0
    x-go-package: "github.com/containers/podman/pkg/api/handlers"
  LibpodImagesPullReport:
    type: "object"
    properties:
      error:
        type: "string"
        description: "Error contains text of errors from c/image"
        x-go-name: "Error"
      id:
        type: "string"
        description: "ID contains image id (retained for backwards compatibility)"
        x-go-name: "ID"
      images:
        type: "array"
        description: "Images contains the ID's of the images pulled"
        items:
          type: "string"
        x-go-name: "Images"
      stream:
        type: "string"
        description: "Stream used to provide output from c/image"
        x-go-name: "Stream"
    example:
      images:
      - "images"
      - "images"
      stream: "stream"
      id: "id"
      error: "error"
    x-go-package: "github.com/containers/podman/pkg/api/handlers"
  LibpodImagesRemoveReport:
    type: "object"
    properties:
      Deleted:
        type: "array"
        description: "Deleted images."
        items:
          type: "string"
      Errors:
        type: "array"
        description: "Image removal requires is to return data and an error."
        items:
          type: "string"
      ExitCode:
        type: "integer"
        format: "int64"
        description: "ExitCode describes the exit codes as described in the `podman\
          \ rmi`\nman page."
      Untagged:
        type: "array"
        description: "Untagged images. Can be longer than Deleted."
        items:
          type: "string"
    description: "LibpodImagesRemoveReport is the return type for image removal via\
      \ the rest\napi."
    example:
      Errors:
      - "Errors"
      - "Errors"
      ExitCode: 0
      Deleted:
      - "Deleted"
      - "Deleted"
      Untagged:
      - "Untagged"
      - "Untagged"
    x-go-package: "github.com/containers/podman/pkg/api/handlers"
  LinuxBlockIO:
    type: "object"
    properties:
      leafWeight:
        type: "integer"
        format: "uint16"
        description: "Specifies tasks' weight in the given cgroup while competing\
          \ with the cgroup's child cgroups, CFQ scheduler only"
        x-go-name: "LeafWeight"
      throttleReadBpsDevice:
        type: "array"
        description: "IO read rate limit per cgroup per device, bytes per second"
        items:
          $ref: "#/definitions/LinuxThrottleDevice"
        x-go-name: "ThrottleReadBpsDevice"
      throttleReadIOPSDevice:
        type: "array"
        description: "IO read rate limit per cgroup per device, IO per second"
        items:
          $ref: "#/definitions/LinuxThrottleDevice"
        x-go-name: "ThrottleReadIOPSDevice"
      throttleWriteBpsDevice:
        type: "array"
        description: "IO write rate limit per cgroup per device, bytes per second"
        items:
          $ref: "#/definitions/LinuxThrottleDevice"
        x-go-name: "ThrottleWriteBpsDevice"
      throttleWriteIOPSDevice:
        type: "array"
        description: "IO write rate limit per cgroup per device, IO per second"
        items:
          $ref: "#/definitions/LinuxThrottleDevice"
        x-go-name: "ThrottleWriteIOPSDevice"
      weight:
        type: "integer"
        format: "uint16"
        description: "Specifies per cgroup weight"
        x-go-name: "Weight"
      weightDevice:
        type: "array"
        description: "Weight per cgroup per device, can override BlkioWeight"
        items:
          $ref: "#/definitions/LinuxWeightDevice"
        x-go-name: "WeightDevice"
    description: "LinuxBlockIO for Linux cgroup 'blkio' resource management"
    example:
      throttleWriteBpsDevice:
      - major: 7
        minor: 1
        rate: 4
      - major: 7
        minor: 1
        rate: 4
      throttleReadBpsDevice:
      - major: 7
        minor: 1
        rate: 4
      - major: 7
        minor: 1
        rate: 4
      leafWeight: 6
      weight: 5
      weightDevice:
      - major: 9
        minor: 6
        leafWeight: 9
        weight: 8
      - major: 9
        minor: 6
        leafWeight: 9
        weight: 8
      throttleWriteIOPSDevice:
      - major: 7
        minor: 1
        rate: 4
      - major: 7
        minor: 1
        rate: 4
      throttleReadIOPSDevice:
      - major: 7
        minor: 1
        rate: 4
      - major: 7
        minor: 1
        rate: 4
    x-go-package: "github.com/containers/podman/vendor/github.com/opencontainers/runtime-spec/specs-go"
  LinuxCPU:
    type: "object"
    properties:
      cpus:
        type: "string"
        description: "CPUs to use within the cpuset. Default is to use any CPU available."
        x-go-name: "Cpus"
      mems:
        type: "string"
        description: "List of memory nodes in the cpuset. Default is to use any available\
          \ memory node."
        x-go-name: "Mems"
      period:
        type: "integer"
        format: "uint64"
        description: "CPU period to be used for hardcapping (in usecs)."
        x-go-name: "Period"
      quota:
        type: "integer"
        format: "int64"
        description: "CPU hardcap limit (in usecs). Allowed cpu time in a given period."
        x-go-name: "Quota"
      realtimePeriod:
        type: "integer"
        format: "uint64"
        description: "CPU period to be used for realtime scheduling (in usecs)."
        x-go-name: "RealtimePeriod"
      realtimeRuntime:
        type: "integer"
        format: "int64"
        description: "How much time realtime scheduling may use (in usecs)."
        x-go-name: "RealtimeRuntime"
      shares:
        type: "integer"
        format: "uint64"
        description: "CPU shares (relative weight (ratio) vs. other cgroups with cpu\
          \ shares)."
        x-go-name: "Shares"
    description: "LinuxCPU for Linux cgroup 'cpu' resource management"
    example:
      shares: 1
      period: 9
      cpus: "cpus"
      quota: 6
      realtimePeriod: 3
      realtimeRuntime: 6
      mems: "mems"
    x-go-package: "github.com/containers/podman/vendor/github.com/opencontainers/runtime-spec/specs-go"
  LinuxDevice:
    type: "object"
    properties:
      fileMode:
        $ref: "#/definitions/FileMode"
      gid:
        type: "integer"
        format: "uint32"
        description: "Gid of the device."
        x-go-name: "GID"
      major:
        type: "integer"
        format: "int64"
        description: "Major is the device's major number."
        x-go-name: "Major"
      minor:
        type: "integer"
        format: "int64"
        description: "Minor is the device's minor number."
        x-go-name: "Minor"
      path:
        type: "string"
        description: "Path to the device."
        x-go-name: "Path"
      type:
        type: "string"
        description: "Device type, block, char, etc."
        x-go-name: "Type"
      uid:
        type: "integer"
        format: "uint32"
        description: "UID of the device."
        x-go-name: "UID"
    description: "LinuxDevice represents the mknod information for a Linux special\
      \ device file"
    example:
      path: "path"
      uid: 5
      gid: 0
      major: 6
      minor: 1
      fileMode: {}
      type: "type"
    x-go-package: "github.com/containers/podman/vendor/github.com/opencontainers/runtime-spec/specs-go"
  LinuxDeviceCgroup:
    type: "object"
    properties:
      access:
        type: "string"
        description: "Cgroup access permissions format, rwm."
        x-go-name: "Access"
      allow:
        type: "boolean"
        description: "Allow or deny"
        x-go-name: "Allow"
      major:
        type: "integer"
        format: "int64"
        description: "Major is the device's major number."
        x-go-name: "Major"
      minor:
        type: "integer"
        format: "int64"
        description: "Minor is the device's minor number."
        x-go-name: "Minor"
      type:
        type: "string"
        description: "Device type, block, char, etc."
        x-go-name: "Type"
    description: "LinuxDeviceCgroup represents a device rule for the devices specified\
      \ to\nthe device controller"
    example:
      allow: true
      access: "access"
      major: 2
      minor: 6
      type: "type"
    x-go-package: "github.com/containers/podman/vendor/github.com/opencontainers/runtime-spec/specs-go"
  LinuxHugepageLimit:
    type: "object"
    properties:
      limit:
        type: "integer"
        format: "uint64"
        description: "Limit is the limit of \"hugepagesize\" hugetlb usage"
        x-go-name: "Limit"
      pageSize:
        type: "string"
        description: "Pagesize is the hugepage size\nFormat: \"<size><unit-prefix>B'\
          \ (e.g. 64KB, 2MB, 1GB, etc.)"
        x-go-name: "Pagesize"
    description: "LinuxHugepageLimit structure corresponds to limiting kernel hugepages"
    example:
      limit: 6
      pageSize: "pageSize"
    x-go-package: "github.com/containers/podman/vendor/github.com/opencontainers/runtime-spec/specs-go"
  LinuxInterfacePriority:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name is the name of the network interface"
        x-go-name: "Name"
      priority:
        type: "integer"
        format: "uint32"
        description: "Priority for the interface"
        x-go-name: "Priority"
    description: "LinuxInterfacePriority for network interfaces"
    example:
      name: "name"
      priority: 6
    x-go-package: "github.com/containers/podman/vendor/github.com/opencontainers/runtime-spec/specs-go"
  LinuxMemory:
    type: "object"
    properties:
      disableOOMKiller:
        type: "boolean"
        description: "DisableOOMKiller disables the OOM killer for out of memory conditions"
        x-go-name: "DisableOOMKiller"
      kernel:
        type: "integer"
        format: "int64"
        description: "Kernel memory limit (in bytes)."
        x-go-name: "Kernel"
      kernelTCP:
        type: "integer"
        format: "int64"
        description: "Kernel memory limit for tcp (in bytes)"
        x-go-name: "KernelTCP"
      limit:
        type: "integer"
        format: "int64"
        description: "Memory limit (in bytes)."
        x-go-name: "Limit"
      reservation:
        type: "integer"
        format: "int64"
        description: "Memory reservation or soft_limit (in bytes)."
        x-go-name: "Reservation"
      swap:
        type: "integer"
        format: "int64"
        description: "Total memory limit (memory + swap)."
        x-go-name: "Swap"
      swappiness:
        type: "integer"
        format: "uint64"
        description: "How aggressive the kernel will swap memory pages."
        x-go-name: "Swappiness"
      useHierarchy:
        type: "boolean"
        description: "Enables hierarchical memory accounting"
        x-go-name: "UseHierarchy"
    description: "LinuxMemory for Linux cgroup 'memory' resource management"
    example:
      swappiness: 0
      swap: 7
      useHierarchy: true
      kernel: 5
      disableOOMKiller: true
      limit: 3
      reservation: 3
      kernelTCP: 6
    x-go-package: "github.com/containers/podman/vendor/github.com/opencontainers/runtime-spec/specs-go"
  LinuxNetwork:
    type: "object"
    properties:
      classID:
        type: "integer"
        format: "uint32"
        description: "Set class identifier for container's network packets"
        x-go-name: "ClassID"
      priorities:
        type: "array"
        description: "Set priority of network traffic for container"
        items:
          $ref: "#/definitions/LinuxInterfacePriority"
        x-go-name: "Priorities"
    description: "LinuxNetwork identification and priority configuration"
    example:
      classID: 7
      priorities:
      - name: "name"
        priority: 6
      - name: "name"
        priority: 6
    x-go-package: "github.com/containers/podman/vendor/github.com/opencontainers/runtime-spec/specs-go"
  LinuxPids:
    type: "object"
    properties:
      limit:
        type: "integer"
        format: "int64"
        description: "Maximum number of PIDs. Default is \"no limit\"."
        x-go-name: "Limit"
    description: "LinuxPids for Linux cgroup 'pids' resource management (Linux 4.3)"
    example:
      limit: 0
    x-go-package: "github.com/containers/podman/vendor/github.com/opencontainers/runtime-spec/specs-go"
  LinuxRdma:
    type: "object"
    properties:
      hcaHandles:
        type: "integer"
        format: "uint32"
        description: "Maximum number of HCA handles that can be opened. Default is\
          \ \"no limit\"."
        x-go-name: "HcaHandles"
      hcaObjects:
        type: "integer"
        format: "uint32"
        description: "Maximum number of HCA objects that can be created. Default is\
          \ \"no limit\"."
        x-go-name: "HcaObjects"
    description: "LinuxRdma for Linux cgroup 'rdma' resource management (Linux 4.11)"
    example:
      hcaObjects: 8
      hcaHandles: 4
    x-go-package: "github.com/containers/podman/vendor/github.com/opencontainers/runtime-spec/specs-go"
  LinuxResources:
    type: "object"
    properties:
      blockIO:
        $ref: "#/definitions/LinuxBlockIO"
      cpu:
        $ref: "#/definitions/LinuxCPU"
      devices:
        type: "array"
        description: "Devices configures the device allowlist."
        items:
          $ref: "#/definitions/LinuxDeviceCgroup"
        x-go-name: "Devices"
      hugepageLimits:
        type: "array"
        description: "Hugetlb limit (in bytes)"
        items:
          $ref: "#/definitions/LinuxHugepageLimit"
        x-go-name: "HugepageLimits"
      memory:
        $ref: "#/definitions/LinuxMemory"
      network:
        $ref: "#/definitions/LinuxNetwork"
      pids:
        $ref: "#/definitions/LinuxPids"
      rdma:
        type: "object"
        description: "Rdma resource restriction configuration.\nLimits are a set of\
          \ key value pairs that define RDMA resource limits,\nwhere the key is device\
          \ name and value is resource limits."
        additionalProperties:
          $ref: "#/definitions/LinuxRdma"
        x-go-name: "Rdma"
      unified:
        type: "object"
        description: "Unified resources."
        additionalProperties:
          type: "string"
        x-go-name: "Unified"
    description: "LinuxResources has container runtime resource constraints"
    example:
      memory:
        swappiness: 0
        swap: 7
        useHierarchy: true
        kernel: 5
        disableOOMKiller: true
        limit: 3
        reservation: 3
        kernelTCP: 6
      rdma:
        key:
          hcaObjects: 8
          hcaHandles: 4
      devices:
      - allow: true
        access: "access"
        major: 2
        minor: 6
        type: "type"
      - allow: true
        access: "access"
        major: 2
        minor: 6
        type: "type"
      unified:
        key: "unified"
      cpu:
        shares: 1
        period: 9
        cpus: "cpus"
        quota: 6
        realtimePeriod: 3
        realtimeRuntime: 6
        mems: "mems"
      blockIO:
        throttleWriteBpsDevice:
        - major: 7
          minor: 1
          rate: 4
        - major: 7
          minor: 1
          rate: 4
        throttleReadBpsDevice:
        - major: 7
          minor: 1
          rate: 4
        - major: 7
          minor: 1
          rate: 4
        leafWeight: 6
        weight: 5
        weightDevice:
        - major: 9
          minor: 6
          leafWeight: 9
          weight: 8
        - major: 9
          minor: 6
          leafWeight: 9
          weight: 8
        throttleWriteIOPSDevice:
        - major: 7
          minor: 1
          rate: 4
        - major: 7
          minor: 1
          rate: 4
        throttleReadIOPSDevice:
        - major: 7
          minor: 1
          rate: 4
        - major: 7
          minor: 1
          rate: 4
      hugepageLimits:
      - limit: 6
        pageSize: "pageSize"
      - limit: 6
        pageSize: "pageSize"
      pids:
        limit: 0
      network:
        classID: 7
        priorities:
        - name: "name"
          priority: 6
        - name: "name"
          priority: 6
    x-go-package: "github.com/containers/podman/vendor/github.com/opencontainers/runtime-spec/specs-go"
  LinuxThrottleDevice:
    type: "object"
    properties:
      major:
        type: "integer"
        format: "int64"
        description: "Major is the device's major number."
        x-go-name: "Major"
      minor:
        type: "integer"
        format: "int64"
        description: "Minor is the device's minor number."
        x-go-name: "Minor"
      rate:
        type: "integer"
        format: "uint64"
        description: "Rate is the IO rate limit per cgroup per device"
        x-go-name: "Rate"
    description: "LinuxThrottleDevice struct holds a `major:minor rate_per_second`\
      \ pair"
    example:
      major: 7
      minor: 1
      rate: 4
    x-go-package: "github.com/containers/podman/vendor/github.com/opencontainers/runtime-spec/specs-go"
  LinuxWeightDevice:
    type: "object"
    properties:
      leafWeight:
        type: "integer"
        format: "uint16"
        description: "LeafWeight is the bandwidth rate for the device while competing\
          \ with the cgroup's child cgroups, CFQ scheduler only"
        x-go-name: "LeafWeight"
      major:
        type: "integer"
        format: "int64"
        description: "Major is the device's major number."
        x-go-name: "Major"
      minor:
        type: "integer"
        format: "int64"
        description: "Minor is the device's minor number."
        x-go-name: "Minor"
      weight:
        type: "integer"
        format: "uint16"
        description: "Weight is the bandwidth rate for the device."
        x-go-name: "Weight"
    description: "LinuxWeightDevice struct holds a `major:minor weight` pair for weightDevice"
    example:
      major: 9
      minor: 6
      leafWeight: 9
      weight: 8
    x-go-package: "github.com/containers/podman/vendor/github.com/opencontainers/runtime-spec/specs-go"
  List:
    type: "object"
    properties:
      Clone:
        $ref: "#/definitions/List"
      Instances:
        type: "array"
        description: "Instances returns a list of the manifests that this list knows\
          \ of, other than its own."
        items:
          $ref: "#/definitions/Digest"
      MIMEType:
        type: "string"
        description: "MIMEType returns the MIME type of this particular manifest list."
    title: "List is an interface for parsing, modifying lists of image manifests."
    description: "Callers can either use this abstract interface without understanding\
      \ the details of the formats,\nor instantiate a specific implementation (e.g.\
      \ manifest.OCI1Index) and access the public members\ndirectly."
    example:
      Instances:
      - {}
      - {}
      MIMEType: "MIMEType"
    x-go-package: "github.com/containers/podman/vendor/github.com/containers/image/v5/manifest"
  ListContainer:
    type: "object"
    properties:
      Command:
        type: "array"
        description: "Container command"
        items:
          type: "string"
      Created:
        type: "integer"
        format: "int64"
        description: "Container creation time"
      CreatedAt:
        type: "string"
        description: "Human readable container creation time."
      ExitCode:
        type: "integer"
        format: "int32"
        description: "If container has exited, the return code from the command"
      Exited:
        type: "boolean"
        description: "If container has exited/stopped"
      ExitedAt:
        type: "integer"
        format: "int64"
        description: "Time container exited"
      Id:
        type: "string"
        description: "The unique identifier for the container"
        x-go-name: "ID"
      Image:
        type: "string"
        description: "Container image"
      ImageID:
        type: "string"
        description: "Container image ID"
      IsInfra:
        type: "boolean"
        description: "If this container is a Pod infra container"
      Labels:
        type: "object"
        description: "Labels for container"
        additionalProperties:
          type: "string"
      Mounts:
        type: "array"
        description: "User volume mounts"
        items:
          type: "string"
      Names:
        type: "array"
        description: "The names assigned to the container"
        items:
          type: "string"
      Namespaces:
        $ref: "#/definitions/ListContainerNamespaces"
      Pid:
        type: "integer"
        format: "int64"
        description: "The process id of the container"
      Pod:
        type: "string"
        description: "If the container is part of Pod, the Pod ID. Requires the pod\n\
          boolean to be set"
      PodName:
        type: "string"
        description: "If the container is part of Pod, the Pod name. Requires the\
          \ pod\nboolean to be set"
      Ports:
        type: "array"
        description: "Port mappings"
        items:
          $ref: "#/definitions/PortMapping"
      Size:
        $ref: "#/definitions/ContainerSize"
      StartedAt:
        type: "integer"
        format: "int64"
        description: "Time when container started"
      State:
        type: "string"
        description: "State of container"
      Status:
        type: "string"
        description: "Status is a human-readable approximation of a duration for json\
          \ output"
    description: "Listcontainer describes a container suitable for listing"
    example:
      Status: "Status"
      Namespaces:
        Mnt: "Mnt"
        User: "User"
        Uts: "Uts"
        Pidns: "Pidns"
        Cgroup: "Cgroup"
        Net: "Net"
        Ipc: "Ipc"
      Mounts:
      - "Mounts"
      - "Mounts"
      Pod: "Pod"
      Size:
        rootFsSize: 5
        rwSize: 2
      CreatedAt: "CreatedAt"
      ExitCode: 6
      Ports:
      - container_port: 4
        host_ip: "host_ip"
        protocol: "protocol"
        host_port: 7
        range: 1
      - container_port: 4
        host_ip: "host_ip"
        protocol: "protocol"
        host_port: 7
        range: 1
      Labels:
        key: "Labels"
      Pid: 5
      ExitedAt: 1
      Image: "Image"
      Created: 0
      Names:
      - "Names"
      - "Names"
      PodName: "PodName"
      Command:
      - "Command"
      - "Command"
      State: "State"
      Exited: true
      ImageID: "ImageID"
      IsInfra: true
      Id: "Id"
      StartedAt: 7
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  ListContainerNamespaces:
    type: "object"
    properties:
      Cgroup:
        type: "string"
        description: "Cgroup namespace"
      Ipc:
        type: "string"
        description: "IPC namespace"
        x-go-name: "IPC"
      Mnt:
        type: "string"
        description: "Mount namespace"
        x-go-name: "MNT"
      Net:
        type: "string"
        description: "Network namespace"
        x-go-name: "NET"
      Pidns:
        type: "string"
        description: "PID namespace"
        x-go-name: "PIDNS"
      User:
        type: "string"
        description: "User namespace"
      Uts:
        type: "string"
        description: "UTS namespace"
        x-go-name: "UTS"
    description: "ListContainer Namespaces contains the identifiers of the container's\
      \ Linux namespaces"
    example:
      Mnt: "Mnt"
      User: "User"
      Uts: "Uts"
      Pidns: "Pidns"
      Cgroup: "Cgroup"
      Net: "Net"
      Ipc: "Ipc"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  ListPodContainer:
    type: "object"
    properties:
      Id:
        type: "string"
      Names:
        type: "string"
      Status:
        type: "string"
    example:
      Names: "Names"
      Status: "Status"
      Id: "Id"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  ListPodsReport:
    type: "object"
    properties:
      Cgroup:
        type: "string"
      Containers:
        type: "array"
        items:
          $ref: "#/definitions/ListPodContainer"
      Created:
        type: "string"
        format: "date-time"
      Id:
        type: "string"
      InfraId:
        type: "string"
      Labels:
        type: "object"
        additionalProperties:
          type: "string"
      Name:
        type: "string"
      Namespace:
        type: "string"
      Status:
        type: "string"
    example:
      Status: "Status"
      InfraId: "InfraId"
      Containers:
      - Names: "Names"
        Status: "Status"
        Id: "Id"
      - Names: "Names"
        Status: "Status"
        Id: "Id"
      Cgroup: "Cgroup"
      Labels:
        key: "Labels"
      Id: "Id"
      Namespace: "Namespace"
      Created: "2000-01-23T04:56:07.000+00:00"
      Name: "Name"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  ListRegistriesReport:
    type: "object"
    properties:
      Registries:
        type: "array"
        items:
          type: "string"
    description: "ListRegistriesReport is the report when querying for a sorted list\
      \ of\nregistries which may be contacted during certain operations."
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  LogConfig:
    type: "object"
    properties:
      driver:
        type: "string"
        description: "LogDriver is the container's log driver.\nOptional."
        x-go-name: "Driver"
      options:
        type: "object"
        description: "A set of options to accompany the log driver.\nOptional."
        additionalProperties:
          type: "string"
        x-go-name: "Options"
      path:
        type: "string"
        description: "LogPath is the path the container's logs will be stored at.\n\
          Only available if LogDriver is set to \"json-file\" or \"k8s-file\".\nOptional."
        x-go-name: "Path"
    description: "LogConfig describes the logging characteristics for a container"
    example:
      path: "path"
      driver: "driver"
      options:
        key: "options"
    x-go-package: "github.com/containers/podman/pkg/specgen"
  ManifestAddOpts:
    type: "object"
    properties:
      all:
        type: "boolean"
        x-go-name: "All"
      annotation:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "Annotation"
      arch:
        type: "string"
        x-go-name: "Arch"
      features:
        type: "array"
        items:
          type: "string"
        x-go-name: "Features"
      images:
        type: "array"
        items:
          type: "string"
        x-go-name: "Images"
      os:
        type: "string"
        x-go-name: "OS"
      os_version:
        type: "string"
        x-go-name: "OSVersion"
      variant:
        type: "string"
        x-go-name: "Variant"
    description: "Options for adding a manifest"
    example:
      all: true
      annotation:
        key: "annotation"
      features:
      - "features"
      - "features"
      images:
      - "images"
      - "images"
      os: "os"
      os_version: "os_version"
      variant: "variant"
      arch: "arch"
    x-go-package: "github.com/containers/podman/libpod/image"
  Mount:
    type: "object"
    properties:
      destination:
        type: "string"
        description: "Destination is the absolute path where the mount will be placed\
          \ in the container."
        x-go-name: "Destination"
      options:
        type: "array"
        description: "Options are fstab style mount options."
        items:
          type: "string"
        x-go-name: "Options"
      source:
        type: "string"
        description: "Source specifies the source path of the mount."
        x-go-name: "Source"
      type:
        type: "string"
        description: "Type specifies the mount kind."
        x-go-name: "Type"
    title: "Mount specifies a mount for a container."
    example:
      destination: "destination"
      options:
      - "options"
      - "options"
      source: "source"
      type: "type"
    x-go-package: "github.com/containers/podman/vendor/github.com/opencontainers/runtime-spec/specs-go"
  MountPoint:
    type: "object"
    properties:
      Destination:
        type: "string"
      Driver:
        type: "string"
      Mode:
        type: "string"
      Name:
        type: "string"
      Propagation:
        $ref: "#/definitions/Propagation"
      RW:
        type: "boolean"
      Source:
        type: "string"
      Type:
        $ref: "#/definitions/Type"
    title: "MountPoint represents a mount point configuration inside the container."
    description: "This is used for reporting the mountpoints in use by a container."
    example:
      Destination: "Destination"
      Type: {}
      Propagation: {}
      RW: true
      Mode: "Mode"
      Driver: "Driver"
      Source: "Source"
      Name: "Name"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  NamedVolume:
    type: "object"
    properties:
      Dest:
        type: "string"
        description: "Destination to mount the named volume within the container.\
          \ Must be\nan absolute path. Path will be created if it does not exist."
      Name:
        type: "string"
        description: "Name is the name of the named volume to be mounted. May be empty.\n\
          If empty, a new named volume with a pseudorandomly generated name\nwill\
          \ be mounted at the given destination."
      Options:
        type: "array"
        description: "Options are options that the named volume will be mounted with."
        items:
          type: "string"
    description: "NamedVolume holds information about a named volume that will be\
      \ mounted into\nthe container."
    example:
      Options:
      - "Options"
      - "Options"
      Dest: "Dest"
      Name: "Name"
    x-go-package: "github.com/containers/podman/pkg/specgen"
  Namespace:
    type: "object"
    properties:
      nsmode:
        $ref: "#/definitions/NamespaceMode"
      string:
        type: "string"
        x-go-name: "Value"
    description: "Namespace describes the namespace"
    example:
      nsmode: {}
      string: "string"
    x-go-package: "github.com/containers/podman/pkg/specgen"
  NamespaceMode:
    type: "string"
    x-go-package: "github.com/containers/podman/pkg/specgen"
  NetworkConfig:
    type: "object"
    properties:
      DNSOpt:
        type: "array"
        items:
          type: "string"
      DNSSearch:
        type: "array"
        items:
          type: "string"
      DNSServers:
        type: "array"
        items:
          type: "string"
      ExposedPorts:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
      HTTPProxy:
        type: "boolean"
      IP6Address:
        type: "string"
      IPAddress:
        type: "string"
      LinkLocalIP:
        type: "array"
        items:
          type: "string"
      MacAddress:
        type: "string"
      NetMode:
        $ref: "#/definitions/NetworkMode"
      Network:
        type: "string"
      NetworkAlias:
        type: "array"
        items:
          type: "string"
      PortBindings:
        $ref: "#/definitions/PortMap"
      Publish:
        type: "array"
        items:
          type: "string"
      PublishAll:
        type: "boolean"
    description: "NetworkConfig configures the network namespace for the container"
    example:
      IP6Address: "IP6Address"
      NetMode: {}
      PortBindings: {}
      HTTPProxy: true
      MacAddress: "MacAddress"
      ExposedPorts:
        key: "{}"
      PublishAll: true
      DNSOpt:
      - "DNSOpt"
      - "DNSOpt"
      NetworkAlias:
      - "NetworkAlias"
      - "NetworkAlias"
      LinkLocalIP:
      - "LinkLocalIP"
      - "LinkLocalIP"
      Network: "Network"
      DNSSearch:
      - "DNSSearch"
      - "DNSSearch"
      IPAddress: "IPAddress"
      DNSServers:
      - "DNSServers"
      - "DNSServers"
      Publish:
      - "Publish"
      - "Publish"
    x-go-package: "github.com/containers/podman/pkg/spec"
  NetworkCreate:
    type: "object"
    properties:
      Attachable:
        type: "boolean"
      CheckDuplicate:
        type: "boolean"
        description: "Check for networks with duplicate names.\nNetwork is primarily\
          \ keyed based on a random ID and not on the name.\nNetwork name is strictly\
          \ a user-friendly alias to the network\nwhich is uniquely identified using\
          \ ID.\nAnd there is no guaranteed way to check for duplicates.\nOption CheckDuplicate\
          \ is there to provide a best effort checking of any networks\nwhich has\
          \ the same name but it is not guaranteed to catch all name collisions."
      ConfigFrom:
        $ref: "#/definitions/ConfigReference"
      ConfigOnly:
        type: "boolean"
      Driver:
        type: "string"
      EnableIPv6:
        type: "boolean"
      IPAM:
        $ref: "#/definitions/IPAM"
      Ingress:
        type: "boolean"
      Internal:
        type: "boolean"
      Labels:
        type: "object"
        additionalProperties:
          type: "string"
      Options:
        type: "object"
        additionalProperties:
          type: "string"
      Scope:
        type: "string"
    description: "NetworkCreate is the expected body of the \"create network\" http\
      \ request message"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  NetworkCreateOptions:
    type: "object"
    properties:
      DisableDNS:
        type: "boolean"
      Driver:
        type: "string"
      Gateway:
        $ref: "#/definitions/IP"
      Internal:
        type: "boolean"
      MacVLAN:
        type: "string"
      Range:
        $ref: "#/definitions/IPNet"
      Subnet:
        $ref: "#/definitions/IPNet"
    description: "NetworkCreateOptions describes options to create a network"
    example:
      DisableDNS: true
      MacVLAN: "MacVLAN"
      Gateway: ""
      Internal: true
      Driver: "Driver"
      Range:
        IP: ""
        Mask: ""
      Subnet:
        IP: ""
        Mask: ""
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  NetworkCreateReport:
    type: "object"
    properties:
      Filename:
        type: "string"
    description: "NetworkCreateReport describes a created network for the cli"
    example:
      Filename: "Filename"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  NetworkCreateRequest:
    type: "object"
    properties:
      Attachable:
        type: "boolean"
      CheckDuplicate:
        type: "boolean"
        description: "Check for networks with duplicate names.\nNetwork is primarily\
          \ keyed based on a random ID and not on the name.\nNetwork name is strictly\
          \ a user-friendly alias to the network\nwhich is uniquely identified using\
          \ ID.\nAnd there is no guaranteed way to check for duplicates.\nOption CheckDuplicate\
          \ is there to provide a best effort checking of any networks\nwhich has\
          \ the same name but it is not guaranteed to catch all name collisions."
      ConfigFrom:
        $ref: "#/definitions/ConfigReference"
      ConfigOnly:
        type: "boolean"
      Driver:
        type: "string"
      EnableIPv6:
        type: "boolean"
      IPAM:
        $ref: "#/definitions/IPAM"
      Ingress:
        type: "boolean"
      Internal:
        type: "boolean"
      Labels:
        type: "object"
        additionalProperties:
          type: "string"
      Name:
        type: "string"
      Options:
        type: "object"
        additionalProperties:
          type: "string"
      Scope:
        type: "string"
    title: "NetworkCreateRequest is the request message sent to the server for network\
      \ create call."
    example:
      Options:
        key: "Options"
      Internal: true
      Driver: "Driver"
      Ingress: true
      Labels:
        key: "Labels"
      EnableIPv6: true
      Name: "Name"
      CheckDuplicate: true
      ConfigOnly: true
      IPAM:
        Options:
          key: "Options"
        Config:
        - AuxiliaryAddresses:
            key: "AuxiliaryAddresses"
          Gateway: "Gateway"
          Subnet: "Subnet"
          IPRange: "IPRange"
        - AuxiliaryAddresses:
            key: "AuxiliaryAddresses"
          Gateway: "Gateway"
          Subnet: "Subnet"
          IPRange: "IPRange"
        Driver: "Driver"
      Scope: "Scope"
      ConfigFrom:
        Network: "Network"
      Attachable: true
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  NetworkInspectReport:
    type: "object"
    description: "NetworkInspectReport describes the results from inspect networks"
    additionalProperties:
      type: "object"
      properties: {}
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  NetworkListReport:
    type: "object"
    properties:
      Bytes:
        type: "array"
        items:
          type: "integer"
          format: "uint8"
      CNIVersion:
        type: "string"
      DisableCheck:
        type: "boolean"
      Name:
        type: "string"
      Plugins:
        type: "array"
        items:
          $ref: "#/definitions/NetworkConfig"
    description: "NetworkListReport describes the results from listing networks"
    example:
      Bytes:
      - 0
      - 0
      DisableCheck: true
      CNIVersion: "CNIVersion"
      Name: "Name"
      Plugins:
      - IP6Address: "IP6Address"
        NetMode: {}
        PortBindings: {}
        HTTPProxy: true
        MacAddress: "MacAddress"
        ExposedPorts:
          key: "{}"
        PublishAll: true
        DNSOpt:
        - "DNSOpt"
        - "DNSOpt"
        NetworkAlias:
        - "NetworkAlias"
        - "NetworkAlias"
        LinkLocalIP:
        - "LinkLocalIP"
        - "LinkLocalIP"
        Network: "Network"
        DNSSearch:
        - "DNSSearch"
        - "DNSSearch"
        IPAddress: "IPAddress"
        DNSServers:
        - "DNSServers"
        - "DNSServers"
        Publish:
        - "Publish"
        - "Publish"
      - IP6Address: "IP6Address"
        NetMode: {}
        PortBindings: {}
        HTTPProxy: true
        MacAddress: "MacAddress"
        ExposedPorts:
          key: "{}"
        PublishAll: true
        DNSOpt:
        - "DNSOpt"
        - "DNSOpt"
        NetworkAlias:
        - "NetworkAlias"
        - "NetworkAlias"
        LinkLocalIP:
        - "LinkLocalIP"
        - "LinkLocalIP"
        Network: "Network"
        DNSSearch:
        - "DNSSearch"
        - "DNSSearch"
        IPAddress: "IPAddress"
        DNSServers:
        - "DNSServers"
        - "DNSServers"
        Publish:
        - "Publish"
        - "Publish"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  NetworkMode:
    type: "string"
    title: "NetworkMode represents the container network stack."
    x-go-package: "github.com/containers/podman/pkg/namespaces"
  NetworkResource:
    type: "object"
    properties:
      Attachable:
        type: "boolean"
      ConfigFrom:
        $ref: "#/definitions/ConfigReference"
      ConfigOnly:
        type: "boolean"
      Containers:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/EndpointResource"
      Created:
        type: "string"
        format: "date-time"
      Driver:
        type: "string"
      EnableIPv6:
        type: "boolean"
      IPAM:
        $ref: "#/definitions/IPAM"
      Id:
        type: "string"
        x-go-name: "ID"
      Ingress:
        type: "boolean"
      Internal:
        type: "boolean"
      Labels:
        type: "object"
        additionalProperties:
          type: "string"
      Name:
        type: "string"
      Options:
        type: "object"
        additionalProperties:
          type: "string"
      Peers:
        type: "array"
        items:
          $ref: "#/definitions/PeerInfo"
      Scope:
        type: "string"
      Services:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/ServiceInfo"
    description: "NetworkResource is the body of the \"get network\" http response\
      \ message"
    example:
      Options:
        key: "Options"
      Internal: true
      Peers:
      - IP: "IP"
        Name: "Name"
      - IP: "IP"
        Name: "Name"
      Containers:
        key:
          EndpointID: "EndpointID"
          IPv6Address: "IPv6Address"
          MacAddress: "MacAddress"
          IPv4Address: "IPv4Address"
          Name: "Name"
      Driver: "Driver"
      Ingress: true
      Labels:
        key: "Labels"
      EnableIPv6: true
      Created: "2000-01-23T04:56:07.000+00:00"
      Name: "Name"
      ConfigOnly: true
      IPAM:
        Options:
          key: "Options"
        Config:
        - AuxiliaryAddresses:
            key: "AuxiliaryAddresses"
          Gateway: "Gateway"
          Subnet: "Subnet"
          IPRange: "IPRange"
        - AuxiliaryAddresses:
            key: "AuxiliaryAddresses"
          Gateway: "Gateway"
          Subnet: "Subnet"
          IPRange: "IPRange"
        Driver: "Driver"
      Services:
        key:
          Tasks:
          - EndpointID: "EndpointID"
            EndpointIP: "EndpointIP"
            Info:
              key: "Info"
            Name: "Name"
          - EndpointID: "EndpointID"
            EndpointIP: "EndpointIP"
            Info:
              key: "Info"
            Name: "Name"
          Ports:
          - "Ports"
          - "Ports"
          LocalLBIndex: 0
          VIP: "VIP"
      Scope: "Scope"
      ConfigFrom:
        Network: "Network"
      Id: "Id"
      Attachable: true
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  NetworkRmReport:
    type: "object"
    properties:
      Err:
        type: "string"
      Name:
        type: "string"
    description: "NetworkRmReport describes the results of network removal"
    example:
      Err: "Err"
      Name: "Name"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  NetworkSettings:
    type: "object"
    properties:
      Bridge:
        type: "string"
      EndpointID:
        type: "string"
      Gateway:
        type: "string"
      GlobalIPv6Address:
        type: "string"
      GlobalIPv6PrefixLen:
        type: "integer"
        format: "int64"
      HairpinMode:
        type: "boolean"
      IPAddress:
        type: "string"
      IPPrefixLen:
        type: "integer"
        format: "int64"
      IPv6Gateway:
        type: "string"
      LinkLocalIPv6Address:
        type: "string"
      LinkLocalIPv6PrefixLen:
        type: "integer"
        format: "int64"
      MacAddress:
        type: "string"
      Networks:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/EndpointSettings"
      Ports:
        $ref: "#/definitions/PortMap"
      SandboxID:
        type: "string"
      SandboxKey:
        type: "string"
      SecondaryIPAddresses:
        type: "array"
        items:
          $ref: "#/definitions/Address"
      SecondaryIPv6Addresses:
        type: "array"
        items:
          $ref: "#/definitions/Address"
    description: "NetworkSettings exposes the network settings in the api"
    example:
      HairpinMode: true
      Networks:
        key:
          GlobalIPv6Address: "GlobalIPv6Address"
          GlobalIPv6PrefixLen: 5
          IPPrefixLen: 6
          Aliases:
          - "Aliases"
          - "Aliases"
          MacAddress: "MacAddress"
          NetworkID: "NetworkID"
          IPAMConfig:
            LinkLocalIPs:
            - "LinkLocalIPs"
            - "LinkLocalIPs"
            IPv6Address: "IPv6Address"
            IPv4Address: "IPv4Address"
          DriverOpts:
            key: "DriverOpts"
          Gateway: "Gateway"
          EndpointID: "EndpointID"
          Links:
          - "Links"
          - "Links"
          IPv6Gateway: "IPv6Gateway"
          IPAddress: "IPAddress"
      SandboxKey: "SandboxKey"
      GlobalIPv6Address: "GlobalIPv6Address"
      GlobalIPv6PrefixLen: 2
      IPPrefixLen: 6
      MacAddress: "MacAddress"
      SandboxID: "SandboxID"
      LinkLocalIPv6Address: "LinkLocalIPv6Address"
      LinkLocalIPv6PrefixLen: 6
      Gateway: "Gateway"
      EndpointID: "EndpointID"
      SecondaryIPv6Addresses:
      - PrefixLen: 3
        Addr: "Addr"
      - PrefixLen: 3
        Addr: "Addr"
      IPv6Gateway: "IPv6Gateway"
      SecondaryIPAddresses:
      - PrefixLen: 3
        Addr: "Addr"
      - PrefixLen: 3
        Addr: "Addr"
      IPAddress: "IPAddress"
      Bridge: "Bridge"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  OCIRuntimeInfo:
    type: "object"
    properties:
      name:
        type: "string"
        x-go-name: "Name"
      package:
        type: "string"
        x-go-name: "Package"
      path:
        type: "string"
        x-go-name: "Path"
      version:
        type: "string"
        x-go-name: "Version"
    description: "OCIRuntimeInfo describes the runtime (crun or runc) being\nused\
      \ with podman"
    example:
      path: "path"
      package: "package"
      name: "name"
      version: "version"
    x-go-package: "github.com/containers/podman/libpod/define"
  OverlayVolume:
    type: "object"
    properties:
      destination:
        type: "string"
        description: "Destination is the absolute path where the mount will be placed\
          \ in the container."
        x-go-name: "Destination"
      source:
        type: "string"
        description: "Source specifies the source path of the mount."
        x-go-name: "Source"
    description: "OverlayVolume holds information about a overlay volume that will\
      \ be mounted into\nthe container."
    example:
      destination: "destination"
      source: "source"
    x-go-package: "github.com/containers/podman/pkg/specgen"
  POSIXRlimit:
    type: "object"
    properties:
      hard:
        type: "integer"
        format: "uint64"
        description: "Hard is the hard limit for the specified type"
        x-go-name: "Hard"
      soft:
        type: "integer"
        format: "uint64"
        description: "Soft is the soft limit for the specified type"
        x-go-name: "Soft"
      type:
        type: "string"
        description: "Type of the rlimit to set"
        x-go-name: "Type"
    description: "POSIXRlimit type and restrictions"
    example:
      hard: 1
      type: "type"
      soft: 1
    x-go-package: "github.com/containers/podman/vendor/github.com/opencontainers/runtime-spec/specs-go"
  PeerInfo:
    type: "object"
    properties:
      IP:
        type: "string"
      Name:
        type: "string"
    description: "PeerInfo represents one peer of an overlay network"
    example:
      IP: "IP"
      Name: "Name"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/network"
  PidConfig:
    type: "object"
    properties:
      PidMode:
        $ref: "#/definitions/PidMode"
    description: "PidConfig configures the pid namespace for the container"
    x-go-package: "github.com/containers/podman/pkg/spec"
  PidMode:
    type: "string"
    title: "PidMode represents the pid namespace of the container."
    x-go-package: "github.com/containers/podman/pkg/namespaces"
  PlayKubePod:
    type: "object"
    properties:
      Containers:
        type: "array"
        description: "Containers - the IDs of the containers running in the created\
          \ pod."
        items:
          type: "string"
      ID:
        type: "string"
        description: "ID - ID of the pod created as a result of play kube."
      Logs:
        type: "array"
        description: "Logs - non-fatal errors and log messages while processing."
        items:
          type: "string"
    description: "PlayKubePod represents a single pod and associated containers created\
      \ by play kube"
    example:
      Containers:
      - "Containers"
      - "Containers"
      ID: "ID"
      Logs:
      - "Logs"
      - "Logs"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  PlayKubeReport:
    type: "object"
    properties:
      Pods:
        type: "array"
        description: "Pods - pods created by play kube."
        items:
          $ref: "#/definitions/PlayKubePod"
    title: "PlayKubeReport contains the results of running play kube."
    example:
      Pods:
      - Containers:
        - "Containers"
        - "Containers"
        ID: "ID"
        Logs:
        - "Logs"
        - "Logs"
      - Containers:
        - "Containers"
        - "Containers"
        ID: "ID"
        Logs:
        - "Logs"
        - "Logs"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  Plugin:
    type: "object"
    required:
    - "Config"
    - "Enabled"
    - "Name"
    - "Settings"
    properties:
      Config:
        $ref: "#/definitions/PluginConfig"
      Enabled:
        type: "boolean"
        description: "True if the plugin is running. False if the plugin is not running,\
          \ only installed."
      Id:
        type: "string"
        description: "Id"
        x-go-name: "ID"
      Name:
        type: "string"
        description: "name"
      PluginReference:
        type: "string"
        description: "plugin remote reference used to push/pull the plugin"
      Settings:
        $ref: "#/definitions/PluginSettings"
    description: "Plugin A plugin for the Engine API"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  PluginConfig:
    type: "object"
    required:
    - "Args"
    - "Description"
    - "Documentation"
    - "Entrypoint"
    - "Env"
    - "Interface"
    - "IpcHost"
    - "Linux"
    - "Mounts"
    - "Network"
    - "PidHost"
    - "PropagatedMount"
    - "WorkDir"
    properties:
      Args:
        $ref: "#/definitions/PluginConfigArgs"
      Description:
        type: "string"
        description: "description"
      DockerVersion:
        type: "string"
        description: "Docker Version used to create the plugin"
      Documentation:
        type: "string"
        description: "documentation"
      Entrypoint:
        type: "array"
        description: "entrypoint"
        items:
          type: "string"
      Env:
        type: "array"
        description: "env"
        items:
          $ref: "#/definitions/PluginEnv"
      Interface:
        $ref: "#/definitions/PluginConfigInterface"
      IpcHost:
        type: "boolean"
        description: "ipc host"
      Linux:
        $ref: "#/definitions/PluginConfigLinux"
      Mounts:
        type: "array"
        description: "mounts"
        items:
          $ref: "#/definitions/PluginMount"
      Network:
        $ref: "#/definitions/PluginConfigNetwork"
      PidHost:
        type: "boolean"
        description: "pid host"
      PropagatedMount:
        type: "string"
        description: "propagated mount"
      User:
        $ref: "#/definitions/PluginConfigUser"
      WorkDir:
        type: "string"
        description: "work dir"
      rootfs:
        $ref: "#/definitions/PluginConfigRootfs"
    title: "PluginConfig The config of a plugin."
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  PluginConfigArgs:
    type: "object"
    required:
    - "Description"
    - "Name"
    - "Settable"
    - "Value"
    properties:
      Description:
        type: "string"
        description: "description"
      Name:
        type: "string"
        description: "name"
      Settable:
        type: "array"
        description: "settable"
        items:
          type: "string"
      Value:
        type: "array"
        description: "value"
        items:
          type: "string"
    description: "PluginConfigArgs plugin config args"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  PluginConfigInterface:
    type: "object"
    required:
    - "Socket"
    - "Types"
    properties:
      ProtocolScheme:
        type: "string"
        description: "Protocol to use for clients connecting to the plugin."
      Socket:
        type: "string"
        description: "socket"
      Types:
        type: "array"
        description: "types"
        items:
          $ref: "#/definitions/PluginInterfaceType"
    description: "PluginConfigInterface The interface between Docker and the plugin"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  PluginConfigLinux:
    type: "object"
    required:
    - "AllowAllDevices"
    - "Capabilities"
    - "Devices"
    properties:
      AllowAllDevices:
        type: "boolean"
        description: "allow all devices"
      Capabilities:
        type: "array"
        description: "capabilities"
        items:
          type: "string"
      Devices:
        type: "array"
        description: "devices"
        items:
          $ref: "#/definitions/PluginDevice"
    description: "PluginConfigLinux plugin config linux"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  PluginConfigNetwork:
    type: "object"
    required:
    - "Type"
    properties:
      Type:
        type: "string"
        description: "type"
    description: "PluginConfigNetwork plugin config network"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  PluginConfigRootfs:
    type: "object"
    properties:
      diff_ids:
        type: "array"
        description: "diff ids"
        items:
          type: "string"
        x-go-name: "DiffIds"
      type:
        type: "string"
        description: "type"
        x-go-name: "Type"
    description: "PluginConfigRootfs plugin config rootfs"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  PluginConfigUser:
    type: "object"
    properties:
      GID:
        type: "integer"
        format: "uint32"
        description: "g ID"
      UID:
        type: "integer"
        format: "uint32"
        description: "UID"
    description: "PluginConfigUser plugin config user"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  PluginDevice:
    type: "object"
    required:
    - "Description"
    - "Name"
    - "Path"
    - "Settable"
    properties:
      Description:
        type: "string"
        description: "description"
      Name:
        type: "string"
        description: "name"
      Path:
        type: "string"
        description: "path"
      Settable:
        type: "array"
        description: "settable"
        items:
          type: "string"
    description: "PluginDevice plugin device"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  PluginEnv:
    type: "object"
    required:
    - "Description"
    - "Name"
    - "Settable"
    - "Value"
    properties:
      Description:
        type: "string"
        description: "description"
      Name:
        type: "string"
        description: "name"
      Settable:
        type: "array"
        description: "settable"
        items:
          type: "string"
      Value:
        type: "string"
        description: "value"
    description: "PluginEnv plugin env"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  PluginInterfaceType:
    type: "object"
    required:
    - "Capability"
    - "Prefix"
    - "Version"
    properties:
      Capability:
        type: "string"
        description: "capability"
      Prefix:
        type: "string"
        description: "prefix"
      Version:
        type: "string"
        description: "version"
    description: "PluginInterfaceType plugin interface type"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  PluginMount:
    type: "object"
    required:
    - "Description"
    - "Destination"
    - "Name"
    - "Options"
    - "Settable"
    - "Source"
    - "Type"
    properties:
      Description:
        type: "string"
        description: "description"
      Destination:
        type: "string"
        description: "destination"
      Name:
        type: "string"
        description: "name"
      Options:
        type: "array"
        description: "options"
        items:
          type: "string"
      Settable:
        type: "array"
        description: "settable"
        items:
          type: "string"
      Source:
        type: "string"
        description: "source"
      Type:
        type: "string"
        description: "type"
    description: "PluginMount plugin mount"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  PluginSettings:
    type: "object"
    required:
    - "Args"
    - "Devices"
    - "Env"
    - "Mounts"
    properties:
      Args:
        type: "array"
        description: "args"
        items:
          type: "string"
      Devices:
        type: "array"
        description: "devices"
        items:
          $ref: "#/definitions/PluginDevice"
      Env:
        type: "array"
        description: "env"
        items:
          type: "string"
      Mounts:
        type: "array"
        description: "mounts"
        items:
          $ref: "#/definitions/PluginMount"
    title: "PluginSettings Settings that can be modified by users."
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  PodBasicConfig:
    type: "object"
    properties:
      hostname:
        type: "string"
        description: "Hostname is the pod's hostname. If not set, the name of the\
          \ pod will\nbe used (if a name was not provided here, the name auto-generated\
          \ for\nthe pod will be used). This will be used by the infra container and\n\
          all containers in the pod as long as the UTS namespace is shared.\nOptional."
        x-go-name: "Hostname"
      infra_command:
        type: "array"
        description: "InfraCommand sets the command that will be used to start the\
          \ infra\ncontainer.\nIf not set, the default set in the Libpod configuration\
          \ file will be\nused.\nConflicts with NoInfra=true.\nOptional."
        items:
          type: "string"
        x-go-name: "InfraCommand"
      infra_conmon_pid_file:
        type: "string"
        description: "InfraConmonPidFile is a custom path to store the infra container's\n\
          conmon PID."
        x-go-name: "InfraConmonPidFile"
      infra_image:
        type: "string"
        description: "InfraImage is the image that will be used for the infra container.\n\
          If not set, the default set in the Libpod configuration file will be\nused.\n\
          Conflicts with NoInfra=true.\nOptional."
        x-go-name: "InfraImage"
      labels:
        type: "object"
        description: "Labels are key-value pairs that are used to add metadata to\
          \ pods.\nOptional."
        additionalProperties:
          type: "string"
        x-go-name: "Labels"
      name:
        type: "string"
        description: "Name is the name of the pod.\nIf not provided, a name will be\
          \ generated when the pod is created.\nOptional."
        x-go-name: "Name"
      no_infra:
        type: "boolean"
        description: "NoInfra tells the pod not to create an infra container. If this\
          \ is\ndone, many networking-related options will become unavailable.\nConflicts\
          \ with setting any options in PodNetworkConfig, and the\nInfraCommand and\
          \ InfraImages in this struct.\nOptional."
        x-go-name: "NoInfra"
      pod_create_command:
        type: "array"
        description: "PodCreateCommand is the command used to create this pod.\nThis\
          \ will be shown in the output of Inspect() on the pod, and may\nalso be\
          \ used by some tools that wish to recreate the pod\n(e.g. `podman generate\
          \ systemd --new`).\nOptional."
        items:
          type: "string"
        x-go-name: "PodCreateCommand"
      shared_namespaces:
        type: "array"
        description: "SharedNamespaces instructs the pod to share a set of namespaces.\n\
          Shared namespaces will be joined (by default) by every container\nwhich\
          \ joins the pod.\nIf not set and NoInfra is false, the pod will set a default\
          \ set of\nnamespaces to share.\nConflicts with NoInfra=true.\nOptional."
        items:
          type: "string"
        x-go-name: "SharedNamespaces"
    title: "PodBasicConfig contains basic configuration options for pods."
    x-go-package: "github.com/containers/podman/pkg/specgen"
  PodCgroupConfig:
    type: "object"
    properties:
      cgroup_parent:
        type: "string"
        description: "CgroupParent is the parent for the CGroup that the pod will\
          \ create.\nThis pod cgroup will, in turn, be the default cgroup parent for\
          \ all\ncontainers in the pod.\nOptional."
        x-go-name: "CgroupParent"
    title: "PodCgroupConfig contains configuration options about a pod's cgroups."
    description: "This will be expanded in future updates to pods."
    x-go-package: "github.com/containers/podman/pkg/specgen"
  PodCreateConfig:
    type: "object"
    properties:
      cgroup-parent:
        type: "string"
        x-go-name: "CGroupParent"
      hostname:
        type: "string"
        x-go-name: "Hostname"
      infra:
        type: "boolean"
        x-go-name: "Infra"
      infra-command:
        type: "string"
        x-go-name: "InfraCommand"
      infra-image:
        type: "string"
        x-go-name: "InfraImage"
      labels:
        type: "array"
        items:
          type: "string"
        x-go-name: "Labels"
      name:
        type: "string"
        x-go-name: "Name"
      publish:
        type: "array"
        items:
          type: "string"
        x-go-name: "Publish"
      share:
        type: "string"
        x-go-name: "Share"
    x-go-package: "github.com/containers/podman/pkg/api/handlers"
  PodKillReport:
    type: "object"
    properties:
      Errs:
        type: "array"
        items:
          type: "string"
      Id:
        type: "string"
    example:
      Id: "Id"
      Errs:
      - "Errs"
      - "Errs"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  PodNetworkConfig:
    type: "object"
    properties:
      cni_networks:
        type: "array"
        description: "CNINetworks is a list of CNI networks that the infra container\
          \ will\njoin. As, by default, containers share their network with the infra\n\
          container, these networks will effectively be joined by the\nentire pod.\n\
          Only available when NetNS is set to Bridge, the default for root.\nOptional."
        items:
          type: "string"
        x-go-name: "CNINetworks"
      dns_option:
        type: "array"
        description: "DNSOption is a set of DNS options that will be used in the infra\n\
          container's resolv.conf, which will, by default, be shared with all\ncontainers\
          \ in the pod.\nConflicts with NoInfra=true.\nOptional."
        items:
          type: "string"
        x-go-name: "DNSOption"
      dns_search:
        type: "array"
        description: "DNSSearch is a set of DNS search domains that will be used in\
          \ the\ninfra container's resolv.conf, which will, by default, be shared\
          \ with\nall containers in the pod.\nIf not provided, DNS search domains\
          \ from the host's resolv.conf will\nbe used.\nConflicts with NoInfra=true.\n\
          Optional."
        items:
          type: "string"
        x-go-name: "DNSSearch"
      dns_server:
        type: "array"
        description: "DNSServer is a set of DNS servers that will be used in the infra\n\
          container's resolv.conf, which will, by default, be shared with all\ncontainers\
          \ in the pod.\nIf not provided, the host's DNS servers will be used, unless\
          \ the only\nserver set is a localhost address. As the container cannot connect\
          \ to\nthe host's localhost, a default server will instead be set.\nConflicts\
          \ with NoInfra=true.\nOptional."
        items:
          $ref: "#/definitions/IP"
        x-go-name: "DNSServer"
      hostadd:
        type: "array"
        description: "HostAdd is a set of hosts that will be added to the infra container's\n\
          etc/hosts that will, by default, be shared with all containers in\nthe pod.\n\
          Conflicts with NoInfra=true and NoManageHosts.\nOptional."
        items:
          type: "string"
        x-go-name: "HostAdd"
      netns:
        $ref: "#/definitions/Namespace"
      network_options:
        type: "object"
        description: "NetworkOptions are additional options for each network\nOptional."
        additionalProperties:
          type: "array"
          items:
            type: "string"
        x-go-name: "NetworkOptions"
      no_manage_hosts:
        type: "boolean"
        description: "NoManageHosts indicates that /etc/hosts should not be managed\
          \ by the\npod. Instead, each container will create a separate /etc/hosts\
          \ as\nthey would if not in a pod.\nConflicts with HostAdd."
        x-go-name: "NoManageHosts"
      no_manage_resolv_conf:
        type: "boolean"
        description: "NoManageResolvConf indicates that /etc/resolv.conf should not\
          \ be\nmanaged by the pod. Instead, each container will create and manage\
          \ a\nseparate resolv.conf as if they had not joined a pod.\nConflicts with\
          \ NoInfra=true and DNSServer, DNSSearch, DNSOption.\nOptional."
        x-go-name: "NoManageResolvConf"
      portmappings:
        type: "array"
        description: "PortMappings is a set of ports to map into the infra container.\n\
          As, by default, containers share their network with the infra\ncontainer,\
          \ this will forward the ports to the entire pod.\nOnly available if NetNS\
          \ is set to Bridge or Slirp.\nOptional."
        items:
          $ref: "#/definitions/PortMapping"
        x-go-name: "PortMappings"
      static_ip:
        $ref: "#/definitions/IP"
      static_mac:
        $ref: "#/definitions/HardwareAddr"
    title: "PodNetworkConfig contains networking configuration for a pod."
    x-go-package: "github.com/containers/podman/pkg/specgen"
  PodPauseReport:
    type: "object"
    properties:
      Errs:
        type: "array"
        items:
          type: "string"
      Id:
        type: "string"
    example:
      Id: "Id"
      Errs:
      - "Errs"
      - "Errs"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  PodPruneReport:
    type: "object"
    properties:
      Err:
        type: "string"
      Id:
        type: "string"
    example:
      Err: "Err"
      Id: "Id"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  PodRestartReport:
    type: "object"
    properties:
      Errs:
        type: "array"
        items:
          type: "string"
      Id:
        type: "string"
    example:
      Id: "Id"
      Errs:
      - "Errs"
      - "Errs"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  PodRmReport:
    type: "object"
    properties:
      Err:
        type: "string"
      Id:
        type: "string"
    example:
      Err: "Err"
      Id: "Id"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  PodSpecGenerator:
    type: "object"
    properties:
      cgroup_parent:
        type: "string"
        description: "CgroupParent is the parent for the CGroup that the pod will\
          \ create.\nThis pod cgroup will, in turn, be the default cgroup parent for\
          \ all\ncontainers in the pod.\nOptional."
        x-go-name: "CgroupParent"
      cni_networks:
        type: "array"
        description: "CNINetworks is a list of CNI networks that the infra container\
          \ will\njoin. As, by default, containers share their network with the infra\n\
          container, these networks will effectively be joined by the\nentire pod.\n\
          Only available when NetNS is set to Bridge, the default for root.\nOptional."
        items:
          type: "string"
        x-go-name: "CNINetworks"
      dns_option:
        type: "array"
        description: "DNSOption is a set of DNS options that will be used in the infra\n\
          container's resolv.conf, which will, by default, be shared with all\ncontainers\
          \ in the pod.\nConflicts with NoInfra=true.\nOptional."
        items:
          type: "string"
        x-go-name: "DNSOption"
      dns_search:
        type: "array"
        description: "DNSSearch is a set of DNS search domains that will be used in\
          \ the\ninfra container's resolv.conf, which will, by default, be shared\
          \ with\nall containers in the pod.\nIf not provided, DNS search domains\
          \ from the host's resolv.conf will\nbe used.\nConflicts with NoInfra=true.\n\
          Optional."
        items:
          type: "string"
        x-go-name: "DNSSearch"
      dns_server:
        type: "array"
        description: "DNSServer is a set of DNS servers that will be used in the infra\n\
          container's resolv.conf, which will, by default, be shared with all\ncontainers\
          \ in the pod.\nIf not provided, the host's DNS servers will be used, unless\
          \ the only\nserver set is a localhost address. As the container cannot connect\
          \ to\nthe host's localhost, a default server will instead be set.\nConflicts\
          \ with NoInfra=true.\nOptional."
        items:
          $ref: "#/definitions/IP"
        x-go-name: "DNSServer"
      hostadd:
        type: "array"
        description: "HostAdd is a set of hosts that will be added to the infra container's\n\
          etc/hosts that will, by default, be shared with all containers in\nthe pod.\n\
          Conflicts with NoInfra=true and NoManageHosts.\nOptional."
        items:
          type: "string"
        x-go-name: "HostAdd"
      hostname:
        type: "string"
        description: "Hostname is the pod's hostname. If not set, the name of the\
          \ pod will\nbe used (if a name was not provided here, the name auto-generated\
          \ for\nthe pod will be used). This will be used by the infra container and\n\
          all containers in the pod as long as the UTS namespace is shared.\nOptional."
        x-go-name: "Hostname"
      infra_command:
        type: "array"
        description: "InfraCommand sets the command that will be used to start the\
          \ infra\ncontainer.\nIf not set, the default set in the Libpod configuration\
          \ file will be\nused.\nConflicts with NoInfra=true.\nOptional."
        items:
          type: "string"
        x-go-name: "InfraCommand"
      infra_conmon_pid_file:
        type: "string"
        description: "InfraConmonPidFile is a custom path to store the infra container's\n\
          conmon PID."
        x-go-name: "InfraConmonPidFile"
      infra_image:
        type: "string"
        description: "InfraImage is the image that will be used for the infra container.\n\
          If not set, the default set in the Libpod configuration file will be\nused.\n\
          Conflicts with NoInfra=true.\nOptional."
        x-go-name: "InfraImage"
      labels:
        type: "object"
        description: "Labels are key-value pairs that are used to add metadata to\
          \ pods.\nOptional."
        additionalProperties:
          type: "string"
        x-go-name: "Labels"
      name:
        type: "string"
        description: "Name is the name of the pod.\nIf not provided, a name will be\
          \ generated when the pod is created.\nOptional."
        x-go-name: "Name"
      netns:
        $ref: "#/definitions/Namespace"
      network_options:
        type: "object"
        description: "NetworkOptions are additional options for each network\nOptional."
        additionalProperties:
          type: "array"
          items:
            type: "string"
        x-go-name: "NetworkOptions"
      no_infra:
        type: "boolean"
        description: "NoInfra tells the pod not to create an infra container. If this\
          \ is\ndone, many networking-related options will become unavailable.\nConflicts\
          \ with setting any options in PodNetworkConfig, and the\nInfraCommand and\
          \ InfraImages in this struct.\nOptional."
        x-go-name: "NoInfra"
      no_manage_hosts:
        type: "boolean"
        description: "NoManageHosts indicates that /etc/hosts should not be managed\
          \ by the\npod. Instead, each container will create a separate /etc/hosts\
          \ as\nthey would if not in a pod.\nConflicts with HostAdd."
        x-go-name: "NoManageHosts"
      no_manage_resolv_conf:
        type: "boolean"
        description: "NoManageResolvConf indicates that /etc/resolv.conf should not\
          \ be\nmanaged by the pod. Instead, each container will create and manage\
          \ a\nseparate resolv.conf as if they had not joined a pod.\nConflicts with\
          \ NoInfra=true and DNSServer, DNSSearch, DNSOption.\nOptional."
        x-go-name: "NoManageResolvConf"
      pod_create_command:
        type: "array"
        description: "PodCreateCommand is the command used to create this pod.\nThis\
          \ will be shown in the output of Inspect() on the pod, and may\nalso be\
          \ used by some tools that wish to recreate the pod\n(e.g. `podman generate\
          \ systemd --new`).\nOptional."
        items:
          type: "string"
        x-go-name: "PodCreateCommand"
      portmappings:
        type: "array"
        description: "PortMappings is a set of ports to map into the infra container.\n\
          As, by default, containers share their network with the infra\ncontainer,\
          \ this will forward the ports to the entire pod.\nOnly available if NetNS\
          \ is set to Bridge or Slirp.\nOptional."
        items:
          $ref: "#/definitions/PortMapping"
        x-go-name: "PortMappings"
      shared_namespaces:
        type: "array"
        description: "SharedNamespaces instructs the pod to share a set of namespaces.\n\
          Shared namespaces will be joined (by default) by every container\nwhich\
          \ joins the pod.\nIf not set and NoInfra is false, the pod will set a default\
          \ set of\nnamespaces to share.\nConflicts with NoInfra=true.\nOptional."
        items:
          type: "string"
        x-go-name: "SharedNamespaces"
      static_ip:
        $ref: "#/definitions/IP"
      static_mac:
        $ref: "#/definitions/HardwareAddr"
    description: "PodSpecGenerator describes options to create a pod"
    example:
      cni_networks:
      - "cni_networks"
      - "cni_networks"
      shared_namespaces:
      - "shared_namespaces"
      - "shared_namespaces"
      infra_conmon_pid_file: "infra_conmon_pid_file"
      network_options:
        key:
        - "network_options"
        - "network_options"
      hostadd:
      - "hostadd"
      - "hostadd"
      dns_server:
      - ""
      - ""
      portmappings:
      - container_port: 4
        host_ip: "host_ip"
        protocol: "protocol"
        host_port: 7
        range: 1
      - container_port: 4
        host_ip: "host_ip"
        protocol: "protocol"
        host_port: 7
        range: 1
      labels:
        key: "labels"
      static_mac: ""
      dns_option:
      - "dns_option"
      - "dns_option"
      hostname: "hostname"
      no_manage_resolv_conf: true
      static_ip: ""
      infra_command:
      - "infra_command"
      - "infra_command"
      infra_image: "infra_image"
      cgroup_parent: "cgroup_parent"
      dns_search:
      - "dns_search"
      - "dns_search"
      name: "name"
      pod_create_command:
      - "pod_create_command"
      - "pod_create_command"
      no_infra: true
      no_manage_hosts: true
      netns:
        nsmode: {}
        string: "string"
    x-go-package: "github.com/containers/podman/pkg/specgen"
  PodStartReport:
    type: "object"
    properties:
      Errs:
        type: "array"
        items:
          type: "string"
      Id:
        type: "string"
    example:
      Id: "Id"
      Errs:
      - "Errs"
      - "Errs"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  PodStatsReport:
    type: "object"
    properties:
      BlockIO:
        type: "string"
      CID:
        type: "string"
      CPU:
        type: "string"
      Mem:
        type: "string"
      MemUsage:
        type: "string"
      Name:
        type: "string"
      NetIO:
        type: "string"
      PIDS:
        type: "string"
      Pod:
        type: "string"
    title: "PodStatsReport includes pod-resource statistics data."
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  PodStopReport:
    type: "object"
    properties:
      Errs:
        type: "array"
        items:
          type: "string"
      Id:
        type: "string"
    example:
      Id: "Id"
      Errs:
      - "Errs"
      - "Errs"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  PodUnpauseReport:
    type: "object"
    properties:
      Errs:
        type: "array"
        items:
          type: "string"
      Id:
        type: "string"
    example:
      Id: "Id"
      Errs:
      - "Errs"
      - "Errs"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  Policy:
    type: "integer"
    title: "Policy denotes a seccomp policy."
    format: "int64"
    x-go-package: "github.com/containers/podman/pkg/seccomp"
  Port:
    type: "object"
    required:
    - "PrivatePort"
    - "Type"
    properties:
      IP:
        type: "string"
        description: "Host IP address that the container's port is mapped to"
      PrivatePort:
        type: "integer"
        format: "uint16"
        description: "Port on the container"
      PublicPort:
        type: "integer"
        format: "uint16"
        description: "Port exposed on the host"
      Type:
        type: "string"
        description: "type"
    description: "Port An open port on a container"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  PortBinding:
    type: "object"
    properties:
      HostIp:
        type: "string"
        description: "HostIP is the host IP Address"
        x-go-name: "HostIP"
      HostPort:
        type: "string"
        description: "HostPort is the host port number"
    description: "PortBinding represents a binding between a Host IP address and a\
      \ Host Port"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/go-connections/nat"
  PortMap:
    type: "object"
    description: "PortMap is a collection of PortBinding indexed by Port"
    additionalProperties:
      type: "array"
      items:
        $ref: "#/definitions/PortBinding"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/go-connections/nat"
  PortMapping:
    type: "object"
    properties:
      container_port:
        type: "integer"
        format: "uint16"
        description: "ContainerPort is the port number that will be exposed from the\n\
          container.\nMandatory."
        x-go-name: "ContainerPort"
      host_ip:
        type: "string"
        description: "HostIP is the IP that we will bind to on the host.\nIf unset,\
          \ assumed to be 0.0.0.0 (all interfaces)."
        x-go-name: "HostIP"
      host_port:
        type: "integer"
        format: "uint16"
        description: "HostPort is the port number that will be forwarded from the\
          \ host into\nthe container.\nIf omitted, a random port on the host (guaranteed\
          \ to be over 1024)\nwill be assigned."
        x-go-name: "HostPort"
      protocol:
        type: "string"
        description: "Protocol is the protocol forward.\nMust be either \"tcp\", \"\
          udp\", and \"sctp\", or some combination of these\nseparated by commas.\n\
          If unset, assumed to be TCP."
        x-go-name: "Protocol"
      range:
        type: "integer"
        format: "uint16"
        description: "Range is the number of ports that will be forwarded, starting\
          \ at\nHostPort and ContainerPort and counting up.\nThis is 1-indexed, so\
          \ 1 is assumed to be a single port (only the\nHostport:Containerport mapping\
          \ will be added), 2 is two ports (both\nHostport:Containerport and Hostport+1:Containerport+1),\
          \ etc.\nIf unset, assumed to be 1 (a single port).\nBoth hostport + range\
          \ and containerport + range must be less than\n65536."
        x-go-name: "Range"
    title: "PortMapping is one or more ports that will be mapped into the container."
    example:
      container_port: 4
      host_ip: "host_ip"
      protocol: "protocol"
      host_port: 7
      range: 1
    x-go-package: "github.com/containers/podman/pkg/specgen"
  PortSet:
    type: "object"
    description: "PortSet is a collection of structs indexed by Port"
    additionalProperties:
      type: "object"
      properties: {}
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/go-connections/nat"
  Propagation:
    type: "string"
    title: "Propagation represents the propagation of a mount."
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/mount"
  RemoteSocket:
    type: "object"
    properties:
      exists:
        type: "boolean"
        x-go-name: "Exists"
      path:
        type: "string"
        x-go-name: "Path"
    description: "RemoteSocket describes information about the API socket"
    example:
      path: "path"
      exists: true
    x-go-package: "github.com/containers/podman/libpod/define"
  Report:
    type: "object"
    properties:
      Err:
        type: "object"
        additionalProperties:
          type: "string"
      Id:
        type: "array"
        items:
          type: "string"
    example:
      Err:
        key: "Err"
      Id:
      - "Id"
      - "Id"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  RestartPolicy:
    type: "object"
    properties:
      MaximumRetryCount:
        type: "integer"
        format: "int64"
      Name:
        type: "string"
    title: "RestartPolicy represents the restart policies of the container."
    example:
      MaximumRetryCount: 6
      Name: "Name"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/container"
  RootFS:
    type: "object"
    properties:
      Layers:
        type: "array"
        items:
          $ref: "#/definitions/Digest"
      Type:
        type: "string"
    description: "RootFS holds the root fs information of an image"
    example:
      Type: "Type"
      Layers:
      - {}
      - {}
    x-go-package: "github.com/containers/podman/pkg/inspect"
  Schema2HealthConfig:
    type: "object"
    properties:
      Interval:
        $ref: "#/definitions/Duration"
      Retries:
        type: "integer"
        format: "int64"
        description: "Retries is the number of consecutive failures needed to consider\
          \ a container as unhealthy.\nZero means inherit."
      StartPeriod:
        $ref: "#/definitions/Duration"
      Test:
        type: "array"
        description: "Test is the test to perform to check that the container is healthy.\n\
          An empty slice means to inherit the default.\nThe options are:\n{} : inherit\
          \ healthcheck\n{\"NONE\"} : disable healthcheck\n{\"CMD\", args...} : exec\
          \ arguments directly\n{\"CMD-SHELL\", command} : run command with system's\
          \ default shell"
        items:
          type: "string"
      Timeout:
        $ref: "#/definitions/Duration"
    description: "Schema2HealthConfig is a HealthConfig, which holds configuration\
      \ settings\nfor the HEALTHCHECK feature, from docker/docker/api/types/container."
    example:
      Test:
      - "Test"
      - "Test"
      Retries: 0
      Interval: {}
    x-go-package: "github.com/containers/podman/vendor/github.com/containers/image/v5/manifest"
  SecurityConfig:
    type: "object"
    properties:
      ApparmorProfile:
        type: "string"
      CapAdd:
        type: "array"
        items:
          type: "string"
      CapDrop:
        type: "array"
        items:
          type: "string"
      CapRequired:
        type: "array"
        items:
          type: "string"
      LabelOpts:
        type: "array"
        items:
          type: "string"
      NoNewPrivs:
        type: "boolean"
      Privileged:
        type: "boolean"
      ProcOpts:
        type: "array"
        items:
          type: "string"
      ReadOnlyRootfs:
        type: "boolean"
      ReadOnlyTmpfs:
        type: "boolean"
      SeccompPolicy:
        $ref: "#/definitions/Policy"
      SeccompProfileFromImage:
        type: "string"
      SeccompProfilePath:
        type: "string"
      SecurityOpts:
        type: "array"
        items:
          type: "string"
      Sysctl:
        type: "object"
        additionalProperties:
          type: "string"
    description: "SecurityConfig configures the security features for the container"
    x-go-package: "github.com/containers/podman/pkg/spec"
  ServiceInfo:
    type: "object"
    properties:
      LocalLBIndex:
        type: "integer"
        format: "int64"
      Ports:
        type: "array"
        items:
          type: "string"
      Tasks:
        type: "array"
        items:
          $ref: "#/definitions/Task"
      VIP:
        type: "string"
    description: "ServiceInfo represents service parameters with the list of service's\
      \ tasks"
    example:
      Tasks:
      - EndpointID: "EndpointID"
        EndpointIP: "EndpointIP"
        Info:
          key: "Info"
        Name: "Name"
      - EndpointID: "EndpointID"
        EndpointIP: "EndpointIP"
        Info:
          key: "Info"
        Name: "Name"
      Ports:
      - "Ports"
      - "Ports"
      LocalLBIndex: 0
      VIP: "VIP"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/network"
  ServiceUpdateResponse:
    type: "object"
    properties:
      Warnings:
        type: "array"
        description: "Optional warning messages"
        items:
          type: "string"
    description: "ServiceUpdateResponse service update response"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  Signal:
    type: "integer"
    title: "A Signal is a number describing a process signal."
    format: "int64"
    description: "It implements the os.Signal interface."
    x-go-package: "syscall"
  SlirpInfo:
    type: "object"
    properties:
      executable:
        type: "string"
        x-go-name: "Executable"
      package:
        type: "string"
        x-go-name: "Package"
      version:
        type: "string"
        x-go-name: "Version"
    description: "SlirpInfo describes the slirp executable that\nis being being used."
    example:
      package: "package"
      version: "version"
      executable: "executable"
    x-go-package: "github.com/containers/podman/libpod/define"
  SpecGenerator:
    type: "object"
    properties:
      annotations:
        type: "object"
        description: "Annotations are key-value options passed into the container\
          \ runtime\nthat can be used to trigger special behavior.\nOptional."
        additionalProperties:
          type: "string"
        x-go-name: "Annotations"
      apparmor_profile:
        type: "string"
        description: "ApparmorProfile is the name of the Apparmor profile the container\n\
          will use.\nOptional."
        x-go-name: "ApparmorProfile"
      cap_add:
        type: "array"
        description: "CapAdd are capabilities which will be added to the container.\n\
          Conflicts with Privileged.\nOptional."
        items:
          type: "string"
        x-go-name: "CapAdd"
      cap_drop:
        type: "array"
        description: "CapDrop are capabilities which will be removed from the container.\n\
          Conflicts with Privileged.\nOptional."
        items:
          type: "string"
        x-go-name: "CapDrop"
      cgroup_parent:
        type: "string"
        description: "CgroupParent is the container's CGroup parent.\nIf not set,\
          \ the default for the current cgroup driver will be used.\nOptional."
        x-go-name: "CgroupParent"
      cgroupns:
        $ref: "#/definitions/Namespace"
      cgroups_mode:
        type: "string"
        description: "CgroupsMode sets a policy for how cgroups will be created in\
          \ the\ncontainer, including the ability to disable creation entirely."
        x-go-name: "CgroupsMode"
      cni_networks:
        type: "array"
        description: "CNINetworks is a list of CNI networks to join the container\
          \ to.\nIf this list is empty, the default CNI network will be joined\ninstead.\
          \ If at least one entry is present, we will not join the\ndefault network\
          \ (unless it is part of this list).\nOnly available if NetNS is set to bridge.\n\
          Optional."
        items:
          type: "string"
        x-go-name: "CNINetworks"
      command:
        type: "array"
        description: "Command is the container's command.\nIf not given and Image\
          \ is specified, this will be populated by the\nimage's configuration.\n\
          Optional."
        items:
          type: "string"
        x-go-name: "Command"
      conmon_pid_file:
        type: "string"
        description: "ConmonPidFile is a path at which a PID file for Conmon will\
          \ be\nplaced.\nIf not given, a default location will be used.\nOptional."
        x-go-name: "ConmonPidFile"
      containerCreateCommand:
        type: "array"
        description: "ContainerCreateCommand is the command that was used to create\
          \ this\ncontainer.\nThis will be shown in the output of Inspect() on the\
          \ container, and\nmay also be used by some tools that wish to recreate the\
          \ container\n(e.g. `podman generate systemd --new`).\nOptional."
        items:
          type: "string"
        x-go-name: "ContainerCreateCommand"
      devices:
        type: "array"
        description: "Devices are devices that will be added to the container.\nOptional."
        items:
          $ref: "#/definitions/LinuxDevice"
        x-go-name: "Devices"
      dns_option:
        type: "array"
        description: "DNSOptions is a set of DNS options that will be used in the\n\
          container's resolv.conf, replacing the host's DNS options which are\nused\
          \ by default.\nConflicts with UseImageResolvConf.\nOptional."
        items:
          type: "string"
        x-go-name: "DNSOptions"
      dns_search:
        type: "array"
        description: "DNSSearch is a set of DNS search domains that will be used in\
          \ the\ncontainer's resolv.conf, replacing the host's DNS search domains\n\
          which are used by default.\nConflicts with UseImageResolvConf.\nOptional."
        items:
          type: "string"
        x-go-name: "DNSSearch"
      dns_server:
        type: "array"
        description: "DNSServers is a set of DNS servers that will be used in the\n\
          container's resolv.conf, replacing the host's DNS Servers which are\nused\
          \ by default.\nConflicts with UseImageResolvConf.\nOptional."
        items:
          $ref: "#/definitions/IP"
        x-go-name: "DNSServers"
      entrypoint:
        type: "array"
        description: "Entrypoint is the container's entrypoint.\nIf not given and\
          \ Image is specified, this will be populated by the\nimage's configuration.\n\
          Optional."
        items:
          type: "string"
        x-go-name: "Entrypoint"
      env:
        type: "object"
        description: "Env is a set of environment variables that will be set in the\n\
          container.\nOptional."
        additionalProperties:
          type: "string"
        x-go-name: "Env"
      env_host:
        type: "boolean"
        description: "EnvHost indicates that the host environment should be added\
          \ to container\nOptional."
        x-go-name: "EnvHost"
      expose:
        description: "Expose is a number of ports that will be forwarded to the container\n\
          if PublishExposedPorts is set.\nExpose is a map of uint16 (port number)\
          \ to a string representing\nprotocol. Allowed protocols are \"tcp\", \"\
          udp\", and \"sctp\", or some\ncombination of the three separated by commas.\n\
          If protocol is set to \"\" we will assume TCP.\nOnly available if NetNS\
          \ is set to Bridge or Slirp, and\nPublishExposedPorts is set.\nOptional."
        x-go-name: "Expose"
      groups:
        type: "array"
        description: "Groups are a list of supplemental groups the container's user\
          \ will\nbe granted access to.\nOptional."
        items:
          type: "string"
        x-go-name: "Groups"
      healthconfig:
        $ref: "#/definitions/Schema2HealthConfig"
      hostadd:
        type: "array"
        description: "HostAdd is a set of hosts which will be added to the container's\n\
          etc/hosts file.\nConflicts with UseImageHosts.\nOptional."
        items:
          type: "string"
        x-go-name: "HostAdd"
      hostname:
        type: "string"
        description: "Hostname is the container's hostname. If not set, the hostname\
          \ will\nnot be modified (if UtsNS is not private) or will be set to the\n\
          container ID (if UtsNS is private).\nConflicts with UtsNS if UtsNS is not\
          \ set to private.\nOptional."
        x-go-name: "Hostname"
      httpproxy:
        type: "boolean"
        description: "EnvHTTPProxy indicates that the http host proxy environment\
          \ variables\nshould be added to container\nOptional."
        x-go-name: "HTTPProxy"
      idmappings:
        $ref: "#/definitions/IDMappingOptions"
      image:
        type: "string"
        description: "Image is the image the container will be based on. The image\
          \ will be\nused as the container's root filesystem, and its environment\
          \ vars,\nvolumes, and other configuration will be applied to the container.\n\
          Conflicts with Rootfs.\nAt least one of Image or Rootfs must be specified."
        x-go-name: "Image"
      image_volume_mode:
        type: "string"
        description: "ImageVolumeMode indicates how image volumes will be created.\n\
          Supported modes are \"ignore\" (do not create), \"tmpfs\" (create as\ntmpfs),\
          \ and \"anonymous\" (create as anonymous volumes).\nThe default if unset\
          \ is anonymous.\nOptional."
        x-go-name: "ImageVolumeMode"
      init:
        type: "boolean"
        description: "Init specifies that an init binary will be mounted into the\n\
          container, and will be used as PID1."
        x-go-name: "Init"
      init_path:
        type: "string"
        description: "InitPath specifies the path to the init binary that will be\
          \ added if\nInit is specified above. If not specified, the default set in\
          \ the\nLibpod config will be used. Ignored if Init above is not set.\nOptional."
        x-go-name: "InitPath"
      ipcns:
        $ref: "#/definitions/Namespace"
      labels:
        type: "object"
        description: "Labels are key-value pairs that are used to add metadata to\n\
          containers.\nOptional."
        additionalProperties:
          type: "string"
        x-go-name: "Labels"
      log_configuration:
        $ref: "#/definitions/LogConfig"
      mounts:
        type: "array"
        description: "Mounts are mounts that will be added to the container.\nThese\
          \ will supersede Image Volumes and VolumesFrom volumes where\nthere are\
          \ conflicts.\nOptional."
        items:
          $ref: "#/definitions/Mount"
        x-go-name: "Mounts"
      name:
        type: "string"
        description: "Name is the name the container will be given.\nIf no name is\
          \ provided, one will be randomly generated.\nOptional."
        x-go-name: "Name"
      namespace:
        type: "string"
        description: "Namespace is the libpod namespace the container will be placed\
          \ in.\nOptional."
        x-go-name: "Namespace"
      netns:
        $ref: "#/definitions/Namespace"
      network_options:
        type: "object"
        description: "NetworkOptions are additional options for each network\nOptional."
        additionalProperties:
          type: "array"
          items:
            type: "string"
        x-go-name: "NetworkOptions"
      no_new_privileges:
        type: "boolean"
        description: "NoNewPrivileges is whether the container will set the no new\n\
          privileges flag on create, which disables gaining additional\nprivileges\
          \ (e.g. via setuid) in the container."
        x-go-name: "NoNewPrivileges"
      oci_runtime:
        type: "string"
        description: "OCIRuntime is the name of the OCI runtime that will be used\
          \ to create\nthe container.\nIf not specified, the default will be used.\n\
          Optional."
        x-go-name: "OCIRuntime"
      oom_score_adj:
        type: "integer"
        format: "int64"
        description: "OOMScoreAdj adjusts the score used by the OOM killer to determine\n\
          processes to kill for the container's process.\nOptional."
        x-go-name: "OOMScoreAdj"
      overlay_volumes:
        type: "array"
        description: "Overlay volumes are named volumes that will be added to the\
          \ container.\nOptional."
        items:
          $ref: "#/definitions/OverlayVolume"
        x-go-name: "OverlayVolumes"
      pidns:
        $ref: "#/definitions/Namespace"
      pod:
        type: "string"
        description: "Pod is the ID of the pod the container will join.\nOptional."
        x-go-name: "Pod"
      portmappings:
        type: "array"
        description: "PortBindings is a set of ports to map into the container.\n\
          Only available if NetNS is set to bridge or slirp.\nOptional."
        items:
          $ref: "#/definitions/PortMapping"
        x-go-name: "PortMappings"
      privileged:
        type: "boolean"
        description: "Privileged is whether the container is privileged.\nPrivileged\
          \ does the following:\nAdds all devices on the system to the container.\n\
          Adds all capabilities to the container.\nDisables Seccomp, SELinux, and\
          \ Apparmor confinement.\n(Though SELinux can be manually re-enabled).\n\
          TODO: this conflicts with things.\nTODO: this does more."
        x-go-name: "Privileged"
      procfs_opts:
        type: "array"
        description: "ProcOpts are the options used for the proc mount."
        items:
          type: "string"
        x-go-name: "ProcOpts"
      publish_image_ports:
        type: "boolean"
        description: "PublishExposedPorts will publish ports specified in the image\
          \ to\nrandom unused ports (guaranteed to be above 1024) on the host.\nThis\
          \ is based on ports set in Expose below, and any ports specified\nby the\
          \ Image (if one is given).\nOnly available if NetNS is set to Bridge or\
          \ Slirp."
        x-go-name: "PublishExposedPorts"
      r_limits:
        type: "array"
        description: "Rlimits are POSIX rlimits to apply to the container.\nOptional."
        items:
          $ref: "#/definitions/POSIXRlimit"
        x-go-name: "Rlimits"
      raw_image_name:
        type: "string"
        description: "RawImageName is the user-specified and unprocessed input referring\n\
          to a local or a remote image."
        x-go-name: "RawImageName"
      read_only_filesystem:
        type: "boolean"
        description: "ReadOnlyFilesystem indicates that everything will be mounted\n\
          as read-only"
        x-go-name: "ReadOnlyFilesystem"
      remove:
        type: "boolean"
        description: "Remove indicates if the container should be removed once it\
          \ has been started\nand exits"
        x-go-name: "Remove"
      resource_limits:
        $ref: "#/definitions/LinuxResources"
      restart_policy:
        type: "string"
        description: "RestartPolicy is the container's restart policy - an action\
          \ which\nwill be taken when the container exits.\nIf not given, the default\
          \ policy, which does nothing, will be used.\nOptional."
        x-go-name: "RestartPolicy"
      restart_tries:
        type: "integer"
        format: "uint64"
        description: "RestartRetries is the number of attempts that will be made to\
          \ restart\nthe container.\nOnly available when RestartPolicy is set to \"\
          on-failure\".\nOptional."
        x-go-name: "RestartRetries"
      rootfs:
        type: "string"
        description: "Rootfs is the path to a directory that will be used as the\n\
          container's root filesystem. No modification will be made to the\ndirectory,\
          \ it will be directly mounted into the container as root.\nConflicts with\
          \ Image.\nAt least one of Image or Rootfs must be specified."
        x-go-name: "Rootfs"
      rootfs_propagation:
        type: "string"
        description: "RootfsPropagation is the rootfs propagation mode for the container.\n\
          If not set, the default of rslave will be used.\nOptional."
        x-go-name: "RootfsPropagation"
      sdnotifyMode:
        type: "string"
        description: "Determine how to handle the NOTIFY_SOCKET - do we participate\
          \ or pass it through\n\"container\" - let the OCI runtime deal with it,\
          \ advertise conmon's MAINPID\n\"conmon-only\" - advertise conmon's MAINPID,\
          \ send READY when started, don't pass to OCI\n\"ignore\" - unset NOTIFY_SOCKET"
        x-go-name: "SdNotifyMode"
      seccomp_policy:
        type: "string"
        description: "SeccompPolicy determines which seccomp profile gets applied\n\
          the container. valid values: empty,default,image"
        x-go-name: "SeccompPolicy"
      seccomp_profile_path:
        type: "string"
        description: "SeccompProfilePath is the path to a JSON file containing the\n\
          container's Seccomp profile.\nIf not specified, no Seccomp profile will\
          \ be used.\nOptional."
        x-go-name: "SeccompProfilePath"
      selinux_opts:
        type: "array"
        description: "SelinuxProcessLabel is the process label the container will\
          \ use.\nIf SELinux is enabled and this is not specified, a label will be\n\
          automatically generated if not specified.\nOptional."
        items:
          type: "string"
        x-go-name: "SelinuxOpts"
      shm_size:
        type: "integer"
        format: "int64"
        description: "ShmSize is the size of the tmpfs to mount in at /dev/shm, in\
          \ bytes.\nConflicts with ShmSize if IpcNS is not private.\nOptional."
        x-go-name: "ShmSize"
      static_ip:
        $ref: "#/definitions/IP"
      static_ipv6:
        $ref: "#/definitions/IP"
      static_mac:
        $ref: "#/definitions/HardwareAddr"
      stdin:
        type: "boolean"
        description: "Stdin is whether the container will keep its STDIN open."
        x-go-name: "Stdin"
      stop_signal:
        $ref: "#/definitions/Signal"
      stop_timeout:
        type: "integer"
        format: "uint64"
        description: "StopTimeout is a timeout between the container's stop signal\
          \ being\nsent and SIGKILL being sent.\nIf not provided, the default will\
          \ be used.\nIf 0 is used, stop signal will not be sent, and SIGKILL will\
          \ be sent\ninstead.\nOptional."
        x-go-name: "StopTimeout"
      sysctl:
        type: "object"
        description: "Sysctl sets kernel parameters for the container"
        additionalProperties:
          type: "string"
        x-go-name: "Sysctl"
      systemd:
        type: "string"
        description: "Systemd is whether the container will be started in systemd\
          \ mode.\nValid options are \"true\", \"false\", and \"always\".\n\"true\"\
          \ enables this mode only if the binary run in the container is\nsbin/init\
          \ or systemd. \"always\" unconditionally enables systemd mode.\n\"false\"\
          \ unconditionally disables systemd mode.\nIf enabled, mounts and stop signal\
          \ will be modified.\nIf set to \"always\" or set to \"true\" and conditionally\
          \ triggered,\nconflicts with StopSignal.\nIf not specified, \"false\" will\
          \ be assumed.\nOptional."
        x-go-name: "Systemd"
      terminal:
        type: "boolean"
        description: "Terminal is whether the container will create a PTY.\nOptional."
        x-go-name: "Terminal"
      throttleReadBpsDevice:
        type: "object"
        description: "IO read rate limit per cgroup per device, bytes per second"
        additionalProperties:
          $ref: "#/definitions/LinuxThrottleDevice"
        x-go-name: "ThrottleReadBpsDevice"
      throttleReadIOPSDevice:
        type: "object"
        description: "IO read rate limit per cgroup per device, IO per second"
        additionalProperties:
          $ref: "#/definitions/LinuxThrottleDevice"
        x-go-name: "ThrottleReadIOPSDevice"
      throttleWriteBpsDevice:
        type: "object"
        description: "IO write rate limit per cgroup per device, bytes per second"
        additionalProperties:
          $ref: "#/definitions/LinuxThrottleDevice"
        x-go-name: "ThrottleWriteBpsDevice"
      throttleWriteIOPSDevice:
        type: "object"
        description: "IO write rate limit per cgroup per device, IO per second"
        additionalProperties:
          $ref: "#/definitions/LinuxThrottleDevice"
        x-go-name: "ThrottleWriteIOPSDevice"
      timezone:
        type: "string"
        description: "Timezone is the timezone inside the container.\nLocal means\
          \ it has the same timezone as the host machine"
        x-go-name: "Timezone"
      umask:
        type: "string"
        description: "Umask is the umask the init process of the container will be\
          \ run with."
        x-go-name: "Umask"
      unified:
        type: "object"
        description: "CgroupConf are key-value options passed into the container runtime\n\
          that are used to configure cgroup v2.\nOptional."
        additionalProperties:
          type: "string"
        x-go-name: "CgroupConf"
      use_image_hosts:
        type: "boolean"
        description: "UseImageHosts indicates that /etc/hosts should not be managed\
          \ by\nPodman, and instead sourced from the image.\nConflicts with HostAdd."
        x-go-name: "UseImageHosts"
      use_image_resolve_conf:
        type: "boolean"
        description: "UseImageResolvConf indicates that resolv.conf should not be\
          \ managed\nby Podman, but instead sourced from the image.\nConflicts with\
          \ DNSServer, DNSSearch, DNSOption."
        x-go-name: "UseImageResolvConf"
      user:
        type: "string"
        description: "User is the user the container will be run as.\nCan be given\
          \ as a UID or a username; if a username, it will be\nresolved within the\
          \ container, using the container's /etc/passwd.\nIf unset, the container\
          \ will be run as root.\nOptional."
        x-go-name: "User"
      userns:
        $ref: "#/definitions/Namespace"
      utsns:
        $ref: "#/definitions/Namespace"
      volumes:
        type: "array"
        description: "Volumes are named volumes that will be added to the container.\n\
          These will supersede Image Volumes and VolumesFrom volumes where\nthere\
          \ are conflicts.\nOptional."
        items:
          $ref: "#/definitions/NamedVolume"
        x-go-name: "Volumes"
      volumes_from:
        type: "array"
        description: "VolumesFrom is a set of containers whose volumes will be added\
          \ to\nthis container. The name or ID of the container must be provided,\
          \ and\nmay optionally be followed by a : and then one or more\ncomma-separated\
          \ options. Valid options are 'ro', 'rw', and 'z'.\nOptions will be used\
          \ for all volumes sourced from the container."
        items:
          type: "string"
        x-go-name: "VolumesFrom"
      weightDevice:
        type: "object"
        description: "Weight per cgroup per device, can override BlkioWeight"
        additionalProperties:
          $ref: "#/definitions/LinuxWeightDevice"
        x-go-name: "WeightDevice"
      work_dir:
        type: "string"
        description: "WorkDir is the container's working directory.\nIf unset, the\
          \ default, /, will be used.\nOptional."
        x-go-name: "WorkDir"
    description: "SpecGenerator creates an OCI spec and Libpod configuration options\
      \ to create\na container based on the given configuration."
    example:
      cni_networks:
      - "cni_networks"
      - "cni_networks"
      stdin: true
      hostadd:
      - "hostadd"
      - "hostadd"
      publish_image_ports: true
      throttleReadBpsDevice:
        key:
          major: 7
          minor: 1
          rate: 4
      shm_size: 3
      annotations:
        key: "annotations"
      log_configuration:
        path: "path"
        driver: "driver"
        options:
          key: "options"
      cgroups_mode: "cgroups_mode"
      oci_runtime: "oci_runtime"
      static_mac: ""
      hostname: "hostname"
      conmon_pid_file: "conmon_pid_file"
      entrypoint:
      - "entrypoint"
      - "entrypoint"
      ipcns:
        nsmode: {}
        string: "string"
      selinux_opts:
      - "selinux_opts"
      - "selinux_opts"
      netns:
        nsmode: {}
        string: "string"
      throttleReadIOPSDevice:
        key:
          major: 7
          minor: 1
          rate: 4
      image: "image"
      init: true
      seccomp_policy: "seccomp_policy"
      devices:
      - path: "path"
        uid: 5
        gid: 0
        major: 6
        minor: 1
        fileMode: {}
        type: "type"
      - path: "path"
        uid: 5
        gid: 0
        major: 6
        minor: 1
        fileMode: {}
        type: "type"
      dns_server:
      - ""
      - ""
      volumes:
      - Options:
        - "Options"
        - "Options"
        Dest: "Dest"
        Name: "Name"
      - Options:
        - "Options"
        - "Options"
        Dest: "Dest"
        Name: "Name"
      mounts:
      - destination: "destination"
        options:
        - "options"
        - "options"
        source: "source"
        type: "type"
      - destination: "destination"
        options:
        - "options"
        - "options"
        source: "source"
        type: "type"
      oom_score_adj: 2
      read_only_filesystem: true
      use_image_resolve_conf: true
      sdnotifyMode: "sdnotifyMode"
      labels:
        key: "labels"
      use_image_hosts: true
      privileged: true
      env_host: true
      seccomp_profile_path: "seccomp_profile_path"
      dns_option:
      - "dns_option"
      - "dns_option"
      sysctl:
        key: "sysctl"
      throttleWriteBpsDevice:
        key:
          major: 7
          minor: 1
          rate: 4
      name: "name"
      volumes_from:
      - "volumes_from"
      - "volumes_from"
      overlay_volumes:
      - destination: "destination"
        source: "source"
      - destination: "destination"
        source: "source"
      throttleWriteIOPSDevice:
        key:
          major: 7
          minor: 1
          rate: 4
      raw_image_name: "raw_image_name"
      resource_limits:
        memory:
          swappiness: 0
          swap: 7
          useHierarchy: true
          kernel: 5
          disableOOMKiller: true
          limit: 3
          reservation: 3
          kernelTCP: 6
        rdma:
          key:
            hcaObjects: 8
            hcaHandles: 4
        devices:
        - allow: true
          access: "access"
          major: 2
          minor: 6
          type: "type"
        - allow: true
          access: "access"
          major: 2
          minor: 6
          type: "type"
        unified:
          key: "unified"
        cpu:
          shares: 1
          period: 9
          cpus: "cpus"
          quota: 6
          realtimePeriod: 3
          realtimeRuntime: 6
          mems: "mems"
        blockIO:
          throttleWriteBpsDevice:
          - major: 7
            minor: 1
            rate: 4
          - major: 7
            minor: 1
            rate: 4
          throttleReadBpsDevice:
          - major: 7
            minor: 1
            rate: 4
          - major: 7
            minor: 1
            rate: 4
          leafWeight: 6
          weight: 5
          weightDevice:
          - major: 9
            minor: 6
            leafWeight: 9
            weight: 8
          - major: 9
            minor: 6
            leafWeight: 9
            weight: 8
          throttleWriteIOPSDevice:
          - major: 7
            minor: 1
            rate: 4
          - major: 7
            minor: 1
            rate: 4
          throttleReadIOPSDevice:
          - major: 7
            minor: 1
            rate: 4
          - major: 7
            minor: 1
            rate: 4
        hugepageLimits:
        - limit: 6
          pageSize: "pageSize"
        - limit: 6
          pageSize: "pageSize"
        pids:
          limit: 0
        network:
          classID: 7
          priorities:
          - name: "name"
            priority: 6
          - name: "name"
            priority: 6
      httpproxy: true
      umask: "umask"
      network_options:
        key:
        - "network_options"
        - "network_options"
      pod: "pod"
      containerCreateCommand:
      - "containerCreateCommand"
      - "containerCreateCommand"
      timezone: "timezone"
      restart_tries: 7
      work_dir: "work_dir"
      portmappings:
      - container_port: 4
        host_ip: "host_ip"
        protocol: "protocol"
        host_port: 7
        range: 1
      - container_port: 4
        host_ip: "host_ip"
        protocol: "protocol"
        host_port: 7
        range: 1
      pidns:
        nsmode: {}
        string: "string"
      remove: true
      cgroupns:
        nsmode: {}
        string: "string"
      cap_add:
      - "cap_add"
      - "cap_add"
      stop_timeout: 3
      rootfs_propagation: "rootfs_propagation"
      init_path: "init_path"
      procfs_opts:
      - "procfs_opts"
      - "procfs_opts"
      dns_search:
      - "dns_search"
      - "dns_search"
      image_volume_mode: "image_volume_mode"
      static_ipv6: ""
      stop_signal: {}
      utsns:
        nsmode: {}
        string: "string"
      no_new_privileges: true
      systemd: "systemd"
      cap_drop:
      - "cap_drop"
      - "cap_drop"
      groups:
      - "groups"
      - "groups"
      terminal: true
      env:
        key: "env"
      expose: ""
      command:
      - "command"
      - "command"
      idmappings:
        HostGIDMapping: true
        AutoUserNsOpts:
          PasswdFile: "PasswdFile"
          AdditionalGIDMappings:
          - size: 7
            container_id: 5
            host_id: 2
          - size: 7
            container_id: 5
            host_id: 2
          Size: 3
          InitialSize: 9
          AdditionalUIDMappings:
          - size: 7
            container_id: 5
            host_id: 2
          - size: 7
            container_id: 5
            host_id: 2
          GroupFile: "GroupFile"
        GIDMap:
        - size: 7
          container_id: 5
          host_id: 2
        - size: 7
          container_id: 5
          host_id: 2
        AutoUserNs: true
        UIDMap:
        - size: 7
          container_id: 5
          host_id: 2
        - size: 7
          container_id: 5
          host_id: 2
        HostUIDMapping: true
      static_ip: ""
      apparmor_profile: "apparmor_profile"
      restart_policy: "restart_policy"
      healthconfig:
        Test:
        - "Test"
        - "Test"
        Retries: 0
        Interval: {}
      cgroup_parent: "cgroup_parent"
      rootfs: "rootfs"
      unified:
        key: "unified"
      namespace: "namespace"
      r_limits:
      - hard: 1
        type: "type"
        soft: 1
      - hard: 1
        type: "type"
        soft: 1
      userns:
        nsmode: {}
        string: "string"
      user: "user"
      weightDevice:
        key:
          major: 9
          minor: 6
          leafWeight: 9
          weight: 8
    x-go-package: "github.com/containers/podman/pkg/specgen"
  StoreInfo:
    type: "object"
    properties:
      configFile:
        type: "string"
        x-go-name: "ConfigFile"
      containerStore:
        $ref: "#/definitions/ContainerStore"
      graphDriverName:
        type: "string"
        x-go-name: "GraphDriverName"
      graphOptions:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
        x-go-name: "GraphOptions"
      graphRoot:
        type: "string"
        x-go-name: "GraphRoot"
      graphStatus:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "GraphStatus"
      imageStore:
        $ref: "#/definitions/ImageStore"
      runRoot:
        type: "string"
        x-go-name: "RunRoot"
      volumePath:
        type: "string"
        x-go-name: "VolumePath"
    description: "StoreInfo describes the container storage and its\nattributes"
    example:
      graphStatus:
        key: "graphStatus"
      configFile: "configFile"
      containerStore:
        running: 9
        number: 2
        paused: 7
        stopped: 3
      graphRoot: "graphRoot"
      graphDriverName: "graphDriverName"
      volumePath: "volumePath"
      graphOptions:
        key: "{}"
      imageStore:
        number: 2
      runRoot: "runRoot"
    x-go-package: "github.com/containers/podman/libpod/define"
  StrSlice:
    title: "StrSlice represents a string or an array of strings."
    type: "array"
    description: "We need to override the json decoder to accept both options."
    items:
      type: "string"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/strslice"
  SystemDfContainerReport:
    type: "object"
    properties:
      Command:
        type: "array"
        items:
          type: "string"
      ContainerID:
        type: "string"
      Created:
        type: "string"
        format: "date-time"
      Image:
        type: "string"
      LocalVolumes:
        type: "integer"
        format: "int64"
      Names:
        type: "string"
      RWSize:
        type: "integer"
        format: "int64"
      Size:
        type: "integer"
        format: "int64"
      Status:
        type: "string"
    description: "SystemDfContainerReport describes a container for use with df"
    example:
      Names: "Names"
      Status: "Status"
      Command:
      - "Command"
      - "Command"
      ContainerID: "ContainerID"
      Size: 1
      RWSize: 6
      LocalVolumes: 0
      Image: "Image"
      Created: "2000-01-23T04:56:07.000+00:00"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  SystemDfImageReport:
    type: "object"
    properties:
      Containers:
        type: "integer"
        format: "int64"
      Created:
        type: "string"
        format: "date-time"
      ImageID:
        type: "string"
      Repository:
        type: "string"
      SharedSize:
        type: "integer"
        format: "int64"
      Size:
        type: "integer"
        format: "int64"
      Tag:
        type: "string"
      UniqueSize:
        type: "integer"
        format: "int64"
    description: "SystemDfImageReport describes an image for use with df"
    example:
      SharedSize: 5
      UniqueSize: 7
      Repository: "Repository"
      Size: 2
      Containers: 5
      ImageID: "ImageID"
      Tag: "Tag"
      Created: "2000-01-23T04:56:07.000+00:00"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  SystemDfVolumeReport:
    type: "object"
    properties:
      Links:
        type: "integer"
        format: "int64"
      ReclaimableSize:
        type: "integer"
        format: "int64"
      Size:
        type: "integer"
        format: "int64"
      VolumeName:
        type: "string"
    description: "SystemDfVolumeReport describes a volume and its size"
    example:
      VolumeName: "VolumeName"
      ReclaimableSize: 3
      Size: 2
      Links: 9
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  Task:
    type: "object"
    properties:
      EndpointID:
        type: "string"
      EndpointIP:
        type: "string"
      Info:
        type: "object"
        additionalProperties:
          type: "string"
      Name:
        type: "string"
    description: "Task carries the information about one backend task"
    example:
      EndpointID: "EndpointID"
      EndpointIP: "EndpointIP"
      Info:
        key: "Info"
      Name: "Name"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/network"
  ThrottleDevice:
    type: "object"
    properties:
      Path:
        type: "string"
      Rate:
        type: "integer"
        format: "uint64"
    description: "ThrottleDevice is a structure that holds device:rate_per_second\
      \ pair"
    example:
      Path: "Path"
      Rate: 1
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/blkiodev"
  Type:
    type: "string"
    title: "Type represents the type of a mount."
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/mount"
  UTSMode:
    type: "string"
    title: "UTSMode represents the UTS namespace of the container."
    x-go-package: "github.com/containers/podman/pkg/namespaces"
  Ulimit:
    type: "object"
    properties:
      Hard:
        type: "integer"
        format: "int64"
      Name:
        type: "string"
      Soft:
        type: "integer"
        format: "int64"
    title: "Ulimit is a human friendly version of Rlimit."
    example:
      Hard: 6
      Soft: 1
      Name: "Name"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/go-units"
  UserConfig:
    type: "object"
    properties:
      GroupAdd:
        type: "array"
        items:
          type: "string"
      IDMappings:
        $ref: "#/definitions/IDMappingOptions"
      User:
        type: "string"
      UsernsMode:
        $ref: "#/definitions/UsernsMode"
    description: "UserConfig configures the user namespace for the container"
    x-go-package: "github.com/containers/podman/pkg/spec"
  UsernsMode:
    type: "string"
    title: "UsernsMode represents userns mode in the container."
    x-go-package: "github.com/containers/podman/pkg/namespaces"
  UtsConfig:
    type: "object"
    properties:
      HostAdd:
        type: "array"
        items:
          type: "string"
      Hostname:
        type: "string"
      NoHosts:
        type: "boolean"
      UtsMode:
        $ref: "#/definitions/UTSMode"
    description: "UtsConfig configures the uts namespace for the container"
    x-go-package: "github.com/containers/podman/pkg/spec"
  Version:
    type: "object"
    properties:
      APIVersion:
        type: "string"
      Built:
        type: "integer"
        format: "int64"
      BuiltTime:
        type: "string"
      GitCommit:
        type: "string"
      GoVersion:
        type: "string"
      OsArch:
        type: "string"
      Version:
        type: "string"
    description: "Version is an output struct for API"
    example:
      GitCommit: "GitCommit"
      APIVersion: "APIVersion"
      Version: "Version"
      Built: 4
      OsArch: "OsArch"
      BuiltTime: "BuiltTime"
      GoVersion: "GoVersion"
    x-go-package: "github.com/containers/podman/libpod/define"
  Volume:
    type: "object"
    required:
    - "Driver"
    - "Labels"
    - "Mountpoint"
    - "Name"
    - "Options"
    - "Scope"
    properties:
      CreatedAt:
        type: "string"
        description: "Date/Time the volume was created."
      Driver:
        type: "string"
        description: "Name of the volume driver used by the volume."
      Labels:
        type: "object"
        description: "User-defined key/value metadata."
        additionalProperties:
          type: "string"
      Mountpoint:
        type: "string"
        description: "Mount path of the volume on the host."
      Name:
        type: "string"
        description: "Name of the volume."
      Options:
        type: "object"
        description: "The driver specific options used when creating the volume."
        additionalProperties:
          type: "string"
      Scope:
        type: "string"
        description: "The level at which the volume exists. Either `global` for cluster-wide,\n\
          or `local` for machine level."
      Status:
        type: "object"
        description: "Low-level details about the volume, provided by the volume driver.\n\
          Details are returned as a map with key/value pairs:\n`{\"key\":\"value\"\
          ,\"key2\":\"value2\"}`.\n\nThe `Status` field is optional, and is omitted\
          \ if the volume driver\ndoes not support this feature."
        additionalProperties:
          type: "object"
          properties: {}
      UsageData:
        $ref: "#/definitions/VolumeUsageData"
    description: "Volume volume"
    example:
      Status:
        key: "{}"
      Options:
        key: "Options"
      Scope: "Scope"
      UsageData:
        RefCount: 0
        Size: 6
      CreatedAt: "CreatedAt"
      Driver: "Driver"
      Labels:
        key: "Labels"
      Mountpoint: "Mountpoint"
      Name: "Name"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  VolumeCreate:
    type: "object"
    properties:
      Driver:
        type: "string"
        description: "Volume driver to use"
      Label:
        type: "object"
        description: "User-defined key/value metadata."
        additionalProperties:
          type: "string"
      Name:
        type: "string"
        description: "New volume's name. Can be left blank"
      Options:
        type: "object"
        description: "Mapping of driver options and values."
        additionalProperties:
          type: "string"
    example:
      Options:
        key: "Options"
      Label:
        key: "Label"
      Driver: "Driver"
      Name: "Name"
    x-go-name: "VolumeCreateOptions"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  VolumeCreateBody:
    type: "object"
    required:
    - "Driver"
    - "DriverOpts"
    - "Labels"
    - "Name"
    properties:
      Driver:
        type: "string"
        description: "Name of the volume driver to use."
      DriverOpts:
        type: "object"
        description: "A mapping of driver options and values. These options are\n\
          passed directly to the driver and are driver specific."
        additionalProperties:
          type: "string"
      Labels:
        type: "object"
        description: "User-defined key/value metadata."
        additionalProperties:
          type: "string"
      Name:
        type: "string"
        description: "The new volume's name. If not specified, Docker generates a\
          \ name."
    description: "VolumeCreateBody Volume configuration"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/volume"
  VolumeInfo:
    type: "object"
    required:
    - "Driver"
    - "Mountpoint"
    - "Name"
    - "Options"
    - "Scope"
    properties:
      CreatedAt:
        type: "string"
        description: "Date/Time the volume was created."
      Driver:
        type: "string"
        description: "Name of the volume driver used by the volume. Only supports\
          \ local driver"
      Labels:
        type: "object"
        description: "User-defined key/value metadata.\nAlways included"
        additionalProperties:
          type: "string"
      Mountpoint:
        type: "string"
        description: "Mount path of the volume on the host."
      Name:
        type: "string"
        description: "Name of the volume."
      Options:
        type: "object"
        description: "The driver specific options used when creating the volume."
        additionalProperties:
          type: "string"
      Scope:
        type: "string"
        description: "The level at which the volume exists.\nLibpod does not implement\
          \ volume scoping, and this is provided solely for\nDocker compatibility.\
          \ The value is only \"local\"."
    description: "VolumeInfo Volume list response"
    example:
      Options:
        key: "Options"
      Scope: "Scope"
      CreatedAt: "CreatedAt"
      Driver: "Driver"
      Labels:
        key: "Labels"
      Mountpoint: "Mountpoint"
      Name: "Name"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  VolumeListBody:
    type: "object"
    properties:
      Volumes:
        type: "array"
        items:
          $ref: "#/definitions/VolumeInfo"
    description: "VolumeListBody Volume list response"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  VolumeListOKBody:
    type: "object"
    required:
    - "Volumes"
    - "Warnings"
    properties:
      Volumes:
        type: "array"
        description: "List of volumes"
        items:
          $ref: "#/definitions/Volume"
      Warnings:
        type: "array"
        description: "Warnings that occurred when fetching the list of volumes."
        items:
          type: "string"
    description: "VolumeListOKBody Volume list response"
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/volume"
  VolumePruneReport:
    type: "object"
    properties:
      Err:
        type: "string"
      Id:
        type: "string"
    example:
      Err: "Err"
      Id: "Id"
    x-go-package: "github.com/containers/podman/pkg/domain/entities"
  VolumeUsageData:
    type: "object"
    required:
    - "RefCount"
    - "Size"
    properties:
      RefCount:
        type: "integer"
        format: "int64"
        description: "The number of containers referencing this volume. This field\n\
          is set to `-1` if the reference-count is not available."
      Size:
        type: "integer"
        format: "int64"
        description: "Amount of disk space used by the volume (in bytes). This information\n\
          is only available for volumes created with the `\"local\"` volume\ndriver.\
          \ For volumes created with other volume drivers, this field\nis set to `-1`\
          \ (\"not available\")"
    description: "VolumeUsageData Usage details about the volume. This information\
      \ is used by the\n`GET /system/df` endpoint, and omitted in other endpoints."
    example:
      RefCount: 0
      Size: 6
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types"
  WeightDevice:
    type: "object"
    properties:
      Path:
        type: "string"
      Weight:
        type: "integer"
        format: "uint16"
    description: "WeightDevice is a structure that holds device:weight pair"
    example:
      Path: "Path"
      Weight: 5
    x-go-package: "github.com/containers/podman/vendor/github.com/docker/docker/api/types/blkiodev"
  linuxBlockIODevice:
    type: "object"
    properties:
      major:
        type: "integer"
        format: "int64"
        description: "Major is the device's major number."
        x-go-name: "Major"
      minor:
        type: "integer"
        format: "int64"
        description: "Minor is the device's minor number."
        x-go-name: "Minor"
    description: "linuxBlockIODevice holds major:minor format supported in blkio cgroup"
    x-go-package: "github.com/containers/podman/vendor/github.com/opencontainers/runtime-spec/specs-go"
  inline_response_200:
    type: "object"
    required:
    - "stream"
    properties:
      stream:
        type: "string"
        example: "(build details...)\nSuccessfully built 8ba084515c724cbf90d447a63600c0a6\n"
        description: "output from build process"
    example:
      stream: "(build details...)\nSuccessfully built 8ba084515c724cbf90d447a63600c0a6\n"
  inline_response_400:
    type: "object"
    properties:
      cause:
        type: "string"
        example: "API root cause"
        description: "API root cause formatted for automated parsing"
        x-go-name: "Because"
      message:
        type: "string"
        example: "human error message"
        description: "human error message, formatted for a human to read"
        x-go-name: "Message"
      response:
        type: "integer"
        format: "int64"
        description: "http response code"
        x-go-name: "ResponseCode"
  control:
    type: "object"
    properties:
      AttachStderr:
        type: "boolean"
        description: "Attach to stderr of the exec command"
      AttachStdin:
        type: "boolean"
        description: "Attach to stdin of the exec command"
      AttachStdout:
        type: "boolean"
        description: "Attach to stdout of the exec command"
      Cmd:
        type: "array"
        description: "Command to run, as a string or array of strings."
        items:
          type: "string"
      DetachKeys:
        type: "string"
        description: "\"Override the key sequence for detaching a container. Format\
          \ is a single character [a-Z] or ctrl-<value> where <value> is one of: a-z,\
          \ @, ^, [, , or _.\"\n"
      Env:
        type: "array"
        description: "A list of environment variables in the form [\"VAR=value\",\
          \ ...]"
        items:
          type: "string"
      Privileged:
        type: "boolean"
        description: "Runs the exec process with extended privileges"
        default: false
      Tty:
        type: "boolean"
        description: "Allocate a pseudo-TTY"
      User:
        type: "string"
        description: "\"The user, and optionally, group to run the exec process inside\
          \ the container. Format is one of: user, user:group, uid, or uid:gid.\"\n"
      WorkingDir:
        type: "string"
        description: "The working directory for the exec process inside the container."
  inline_response_200_1:
    type: "object"
    properties:
      AppArmorProfile:
        type: "string"
      Args:
        type: "array"
        items:
          type: "string"
      Config:
        $ref: "#/definitions/Config"
      Created:
        type: "string"
      Driver:
        type: "string"
      ExecIDs:
        type: "array"
        items:
          type: "string"
      GraphDriver:
        $ref: "#/definitions/GraphDriverData"
      HostConfig:
        $ref: "#/definitions/HostConfig"
      HostnamePath:
        type: "string"
      HostsPath:
        type: "string"
      Id:
        type: "string"
        x-go-name: "ID"
      Image:
        type: "string"
      LogPath:
        type: "string"
      MountLabel:
        type: "string"
      Mounts:
        type: "array"
        items:
          $ref: "#/definitions/MountPoint"
      Name:
        type: "string"
      NetworkSettings:
        $ref: "#/definitions/NetworkSettings"
      Node:
        $ref: "#/definitions/ContainerNode"
      Path:
        type: "string"
      Platform:
        type: "string"
      ProcessLabel:
        type: "string"
      ResolvConfPath:
        type: "string"
      RestartCount:
        type: "integer"
        format: "int64"
      SizeRootFs:
        type: "integer"
        format: "int64"
      SizeRw:
        type: "integer"
        format: "int64"
      State:
        $ref: "#/definitions/ContainerState"
    example:
      Platform: "Platform"
      Config:
        User: "User"
        OpenStdin: true
        Env:
        - "Env"
        - "Env"
        Image: "Image"
        StdinOnce: true
        AttachStdout: true
        Shell: ""
        Volumes:
          key: "{}"
        AttachStdin: true
        Domainname: "Domainname"
        Tty: true
        Cmd: ""
        StopTimeout: 6
        StopSignal: "StopSignal"
        Entrypoint: ""
        AttachStderr: true
        ArgsEscaped: true
        Hostname: "Hostname"
        Labels:
          key: "Labels"
        Healthcheck:
          Test:
          - "Test"
          - "Test"
          Retries: 0
          Interval: {}
        MacAddress: "MacAddress"
        NetworkDisabled: true
        ExposedPorts: {}
        WorkingDir: "WorkingDir"
        OnBuild:
        - "OnBuild"
        - "OnBuild"
      Node:
        Memory: 7
        IP: "IP"
        Labels:
          key: "Labels"
        Cpus: 3
        ID: "ID"
        Addr: "Addr"
        Name: "Name"
      AppArmorProfile: "AppArmorProfile"
      Driver: "Driver"
      HostsPath: "HostsPath"
      HostnamePath: "HostnamePath"
      Image: "Image"
      Created: "Created"
      Name: "Name"
      MountLabel: "MountLabel"
      SizeRootFs: 7
      HostConfig:
        ReadonlyRootfs: true
        StorageOpt:
          key: "StorageOpt"
        BlkioWeightDevice:
        - Path: "Path"
          Weight: 5
        - Path: "Path"
          Weight: 5
        DnsOptions:
        - "DnsOptions"
        - "DnsOptions"
        Memory: 4
        CpuPeriod: 3
        Dns:
        - "Dns"
        - "Dns"
        PortBindings: {}
        VolumesFrom:
        - "VolumesFrom"
        - "VolumesFrom"
        MaskedPaths:
        - "MaskedPaths"
        - "MaskedPaths"
        Devices:
        - CgroupPermissions: "CgroupPermissions"
          PathInContainer: "PathInContainer"
          PathOnHost: "PathOnHost"
        - CgroupPermissions: "CgroupPermissions"
          PathInContainer: "PathInContainer"
          PathOnHost: "PathOnHost"
        MemorySwappiness: 9
        BlkioWeight: 5
        CgroupnsMode: {}
        Init: true
        Runtime: "Runtime"
        DeviceCgroupRules:
        - "DeviceCgroupRules"
        - "DeviceCgroupRules"
        UsernsMode: {}
        Ulimits:
        - Hard: 6
          Soft: 1
          Name: "Name"
        - Hard: 6
          Soft: 1
          Name: "Name"
        CpusetCpus: "CpusetCpus"
        MemoryReservation: 5
        Mounts:
        - destination: "destination"
          options:
          - "options"
          - "options"
          source: "source"
          type: "type"
        - destination: "destination"
          options:
          - "options"
          - "options"
          source: "source"
          type: "type"
        ExtraHosts:
        - "ExtraHosts"
        - "ExtraHosts"
        BlkioDeviceWriteIOps:
        - Path: "Path"
          Rate: 1
        - Path: "Path"
          Rate: 1
        ReadonlyPaths:
        - "ReadonlyPaths"
        - "ReadonlyPaths"
        UTSMode: {}
        Cgroup: {}
        CpuQuota: 2
        CpuRealtimeRuntime: 7
        DnsSearch:
        - "DnsSearch"
        - "DnsSearch"
        CpuShares: 1
        ContainerIDFile: "ContainerIDFile"
        OomScoreAdj: 8
        KernelMemory: 7
        LogConfig:
          path: "path"
          driver: "driver"
          options:
            key: "options"
        DeviceRequests:
        - DeviceIDs:
          - "DeviceIDs"
          - "DeviceIDs"
          Options:
            key: "Options"
          Capabilities:
          - - "Capabilities"
            - "Capabilities"
          - - "Capabilities"
            - "Capabilities"
          Driver: "Driver"
          Count: 1
        - DeviceIDs:
          - "DeviceIDs"
          - "DeviceIDs"
          Options:
            key: "Options"
          Capabilities:
          - - "Capabilities"
            - "Capabilities"
          - - "Capabilities"
            - "Capabilities"
          Driver: "Driver"
          Count: 1
        OomKillDisable: true
        IOMaximumBandwidth: 1
        Privileged: true
        Sysctls:
          key: "Sysctls"
        GroupAdd:
        - "GroupAdd"
        - "GroupAdd"
        AutoRemove: true
        KernelMemoryTCP: 1
        CpuPercent: 9
        ConsoleSize:
        - 2
        - 2
        IOMaximumIOps: 6
        CapAdd: ""
        VolumeDriver: "VolumeDriver"
        CapDrop: ""
        CpuCount: 7
        PublishAllPorts: true
        Tmpfs:
          key: "Tmpfs"
        CpuRealtimePeriod: 4
        IpcMode: {}
        Binds:
        - "Binds"
        - "Binds"
        CpusetMems: "CpusetMems"
        BlkioDeviceWriteBps:
        - Path: "Path"
          Rate: 1
        - Path: "Path"
          Rate: 1
        RestartPolicy:
          MaximumRetryCount: 6
          Name: "Name"
        NetworkMode: {}
        PidMode: {}
        BlkioDeviceReadBps:
        - Path: "Path"
          Rate: 1
        - Path: "Path"
          Rate: 1
        CgroupParent: "CgroupParent"
        NanoCpus: 6
        MemorySwap: 9
        Isolation: {}
        Links:
        - "Links"
        - "Links"
        PidsLimit: 9
        BlkioDeviceReadIOps:
        - Path: "Path"
          Rate: 1
        - Path: "Path"
          Rate: 1
        SecurityOpt:
        - "SecurityOpt"
        - "SecurityOpt"
        ShmSize: 3
      Path: "Path"
      Args:
      - "Args"
      - "Args"
      Mounts:
      - Destination: "Destination"
        Type: {}
        Propagation: {}
        RW: true
        Mode: "Mode"
        Driver: "Driver"
        Source: "Source"
        Name: "Name"
      - Destination: "Destination"
        Type: {}
        Propagation: {}
        RW: true
        Mode: "Mode"
        Driver: "Driver"
        Source: "Source"
        Name: "Name"
      ProcessLabel: "ProcessLabel"
      SizeRw: 6
      GraphDriver:
        Data:
          key: "Data"
        Name: "Name"
      RestartCount: 0
      NetworkSettings:
        HairpinMode: true
        Networks:
          key:
            GlobalIPv6Address: "GlobalIPv6Address"
            GlobalIPv6PrefixLen: 5
            IPPrefixLen: 6
            Aliases:
            - "Aliases"
            - "Aliases"
            MacAddress: "MacAddress"
            NetworkID: "NetworkID"
            IPAMConfig:
              LinkLocalIPs:
              - "LinkLocalIPs"
              - "LinkLocalIPs"
              IPv6Address: "IPv6Address"
              IPv4Address: "IPv4Address"
            DriverOpts:
              key: "DriverOpts"
            Gateway: "Gateway"
            EndpointID: "EndpointID"
            Links:
            - "Links"
            - "Links"
            IPv6Gateway: "IPv6Gateway"
            IPAddress: "IPAddress"
        SandboxKey: "SandboxKey"
        GlobalIPv6Address: "GlobalIPv6Address"
        GlobalIPv6PrefixLen: 2
        IPPrefixLen: 6
        MacAddress: "MacAddress"
        SandboxID: "SandboxID"
        LinkLocalIPv6Address: "LinkLocalIPv6Address"
        LinkLocalIPv6PrefixLen: 6
        Gateway: "Gateway"
        EndpointID: "EndpointID"
        SecondaryIPv6Addresses:
        - PrefixLen: 3
          Addr: "Addr"
        - PrefixLen: 3
          Addr: "Addr"
        IPv6Gateway: "IPv6Gateway"
        SecondaryIPAddresses:
        - PrefixLen: 3
          Addr: "Addr"
        - PrefixLen: 3
          Addr: "Addr"
        IPAddress: "IPAddress"
        Bridge: "Bridge"
      ResolvConfPath: "ResolvConfPath"
      State:
        Status: "Status"
        Restarting: true
        Dead: true
        Health:
          Status: "Status"
          Log:
          - Start: "2000-01-23T04:56:07.000+00:00"
            ExitCode: 8
            Output: "Output"
            End: "2000-01-23T04:56:07.000+00:00"
          - Start: "2000-01-23T04:56:07.000+00:00"
            ExitCode: 8
            Output: "Output"
            End: "2000-01-23T04:56:07.000+00:00"
          FailingStreak: 4
        ExitCode: 0
        Running: true
        Error: "Error"
        FinishedAt: "FinishedAt"
        OOMKilled: true
        Pid: 7
        StartedAt: "StartedAt"
        Paused: true
      ExecIDs:
      - "ExecIDs"
      - "ExecIDs"
      Id: "Id"
      LogPath: "LogPath"
  inline_response_200_2:
    type: "object"
    required:
    - "Processes"
    - "Titles"
    properties:
      Processes:
        type: "array"
        description: "Each process running in the container, where each is process\n\
          is an array of values corresponding to the titles."
        items:
          type: "array"
          items:
            type: "string"
      Titles:
        type: "array"
        description: "The ps column titles"
        items:
          type: "string"
    example:
      Processes:
      - - "Processes"
        - "Processes"
      - - "Processes"
        - "Processes"
      Titles:
      - "Titles"
      - "Titles"
  inline_response_200_3_Error:
    type: "object"
    properties:
      Message:
        type: "string"
    example:
      Message: "Message"
  inline_response_200_3:
    type: "object"
    properties:
      Error:
        $ref: "#/definitions/inline_response_200_3_Error"
      StatusCode:
        type: "integer"
        format: "int64"
        description: "container exit code"
    example:
      Error:
        Message: "Message"
      StatusCode: 0
  inline_response_201:
    type: "object"
    properties:
      Id:
        type: "string"
        description: "ID of the container created"
        x-go-name: "ID"
      Warnings:
        type: "array"
        description: "Warnings during container creation"
        items:
          type: "string"
    example:
      Id: "Id"
      Warnings:
      - "Warnings"
      - "Warnings"
  control_1:
    type: "object"
    properties:
      Detach:
        type: "boolean"
        description: "Detach from the command. Not presently supported."
      Tty:
        type: "boolean"
        description: "Allocate a pseudo-TTY. Presently ignored."
  inline_response_200_4:
    type: "object"
    properties:
      Comment:
        type: "string"
      Created:
        type: "integer"
        format: "int64"
      CreatedBy:
        type: "string"
      Id:
        type: "string"
        x-go-name: "ID"
      Size:
        type: "integer"
        format: "int64"
      Tags:
        type: "array"
        items:
          type: "string"
    example:
      Comment: "Comment"
      CreatedBy: "CreatedBy"
      Size: 6
      Id: "Id"
      Tags:
      - "Tags"
      - "Tags"
      Created: 0
  inline_response_200_5:
    type: "object"
    properties:
      Architecture:
        type: "string"
      Author:
        type: "string"
      Comment:
        type: "string"
      Config:
        $ref: "#/definitions/Config"
      Container:
        type: "string"
      ContainerConfig:
        $ref: "#/definitions/Config"
      Created:
        type: "string"
      DockerVersion:
        type: "string"
      GraphDriver:
        $ref: "#/definitions/GraphDriverData"
      Id:
        type: "string"
        x-go-name: "ID"
      Metadata:
        $ref: "#/definitions/ImageMetadata"
      Os:
        type: "string"
      OsVersion:
        type: "string"
      Parent:
        type: "string"
      RepoDigests:
        type: "array"
        items:
          type: "string"
      RepoTags:
        type: "array"
        items:
          type: "string"
      RootFS:
        $ref: "#/definitions/RootFS"
      Size:
        type: "integer"
        format: "int64"
      Variant:
        type: "string"
      VirtualSize:
        type: "integer"
        format: "int64"
    example:
      RepoDigests:
      - "RepoDigests"
      - "RepoDigests"
      Comment: "Comment"
      VirtualSize: 6
      Architecture: "Architecture"
      Os: "Os"
      Parent: "Parent"
      Config:
        User: "User"
        OpenStdin: true
        Env:
        - "Env"
        - "Env"
        Image: "Image"
        StdinOnce: true
        AttachStdout: true
        Shell: ""
        Volumes:
          key: "{}"
        AttachStdin: true
        Domainname: "Domainname"
        Tty: true
        Cmd: ""
        StopTimeout: 6
        StopSignal: "StopSignal"
        Entrypoint: ""
        AttachStderr: true
        ArgsEscaped: true
        Hostname: "Hostname"
        Labels:
          key: "Labels"
        Healthcheck:
          Test:
          - "Test"
          - "Test"
          Retries: 0
          Interval: {}
        MacAddress: "MacAddress"
        NetworkDisabled: true
        ExposedPorts: {}
        WorkingDir: "WorkingDir"
        OnBuild:
        - "OnBuild"
        - "OnBuild"
      Size: 0
      OsVersion: "OsVersion"
      Metadata:
        LastTagTime: "2000-01-23T04:56:07.000+00:00"
      GraphDriver:
        Data:
          key: "Data"
        Name: "Name"
      Created: "Created"
      ContainerConfig:
        User: "User"
        OpenStdin: true
        Env:
        - "Env"
        - "Env"
        Image: "Image"
        StdinOnce: true
        AttachStdout: true
        Shell: ""
        Volumes:
          key: "{}"
        AttachStdin: true
        Domainname: "Domainname"
        Tty: true
        Cmd: ""
        StopTimeout: 6
        StopSignal: "StopSignal"
        Entrypoint: ""
        AttachStderr: true
        ArgsEscaped: true
        Hostname: "Hostname"
        Labels:
          key: "Labels"
        Healthcheck:
          Test:
          - "Test"
          - "Test"
          Retries: 0
          Interval: {}
        MacAddress: "MacAddress"
        NetworkDisabled: true
        ExposedPorts: {}
        WorkingDir: "WorkingDir"
        OnBuild:
        - "OnBuild"
        - "OnBuild"
      Variant: "Variant"
      Container: "Container"
      RootFS:
        Type: "Type"
        Layers:
        - {}
        - {}
      DockerVersion: "DockerVersion"
      RepoTags:
      - "RepoTags"
      - "RepoTags"
      Author: "Author"
      Id: "Id"
  inline_response_200_6:
    type: "object"
    properties:
      Automated:
        type: "string"
        description: "Automated indicates if the image was created by an automated\
          \ build."
      Description:
        type: "string"
        description: "Description of the image."
      Index:
        type: "string"
        description: "Index is the image index (e.g., \"docker.io\" or \"quay.io\"\
          )"
      Name:
        type: "string"
        description: "Name is the canoncical name of the image (e.g., \"docker.io/library/alpine\"\
          )."
      Official:
        type: "string"
        description: "Official indicates if it's an official image."
      Stars:
        type: "integer"
        format: "int64"
        description: "Stars is the number of stars of the image."
    example:
      Description: "Description"
      Automated: "Automated"
      Stars: 0
      Official: "Official"
      Index: "Index"
      Name: "Name"
  inline_response_200_7:
    type: "object"
    properties:
      FailingStreak:
        type: "integer"
        format: "int64"
        description: "FailingStreak is the number of consecutive failed healthchecks"
      Log:
        type: "array"
        description: "Log describes healthcheck attempts and results"
        items:
          $ref: "#/definitions/HealthCheckLog"
      Status:
        type: "string"
        description: "Status healthy or unhealthy"
    example:
      Status: "Status"
      Log:
      - Start: "Start"
        ExitCode: 6
        Output: "Output"
        End: "End"
      - Start: "Start"
        ExitCode: 6
        Output: "Output"
        End: "End"
      FailingStreak: 0
  control_2:
    type: "object"
    properties:
      AttachStderr:
        type: "boolean"
        description: "Attach to stderr of the exec command"
      AttachStdin:
        type: "boolean"
        description: "Attach to stdin of the exec command"
      AttachStdout:
        type: "boolean"
        description: "Attach to stdout of the exec command"
      Cmd:
        type: "array"
        description: "Command to run, as a string or array of strings."
        items:
          type: "string"
      DetachKeys:
        type: "string"
        description: "\"Override the key sequence for detaching a container. Format\
          \ is a single character [a-Z] or ctrl-<value> where <value> is one of: a-z,\
          \ @, ^, [, , or _.\"\n"
      Env:
        type: "array"
        description: "A list of environment variables in the form [\"VAR=value\",\
          \ ...]"
        items:
          type: "string"
      Privileged:
        type: "boolean"
        description: "Runs the exec process with extended privileges"
        default: false
      Tty:
        type: "boolean"
        description: "Allocate a pseudo-TTY"
      User:
        type: "string"
        description: "\"The user, and optionally, group to run the exec process inside\
          \ the container. Format is one of: user, user:group, uid, or uid:gid.\"\n"
      WorkingDir:
        type: "string"
        description: "The working directory for the exec process inside the container."
  inline_response_200_8:
    type: "object"
    properties:
      AppArmorProfile:
        type: "string"
      Args:
        type: "array"
        items:
          type: "string"
      BoundingCaps:
        type: "array"
        items:
          type: "string"
      Config:
        $ref: "#/definitions/InspectContainerConfig"
      ConmonPidFile:
        type: "string"
      Created:
        type: "string"
        format: "date-time"
      Dependencies:
        type: "array"
        items:
          type: "string"
      Driver:
        type: "string"
      EffectiveCaps:
        type: "array"
        items:
          type: "string"
      ExecIDs:
        type: "array"
        items:
          type: "string"
      ExitCommand:
        type: "array"
        items:
          type: "string"
      GraphDriver:
        $ref: "#/definitions/Data"
      HostConfig:
        $ref: "#/definitions/InspectContainerHostConfig"
      HostnamePath:
        type: "string"
      HostsPath:
        type: "string"
      Id:
        type: "string"
        x-go-name: "ID"
      Image:
        type: "string"
      ImageName:
        type: "string"
      IsInfra:
        type: "boolean"
      LogPath:
        type: "string"
      LogTag:
        type: "string"
      MountLabel:
        type: "string"
      Mounts:
        type: "array"
        items:
          $ref: "#/definitions/InspectMount"
      Name:
        type: "string"
      Namespace:
        type: "string"
      NetworkSettings:
        $ref: "#/definitions/InspectNetworkSettings"
      OCIConfigPath:
        type: "string"
      OCIRuntime:
        type: "string"
      Path:
        type: "string"
      Pod:
        type: "string"
      ProcessLabel:
        type: "string"
      ResolvConfPath:
        type: "string"
      RestartCount:
        type: "integer"
        format: "int32"
      Rootfs:
        type: "string"
      SizeRootFs:
        type: "integer"
        format: "int64"
      SizeRw:
        type: "integer"
        format: "int64"
      State:
        $ref: "#/definitions/InspectContainerState"
      StaticDir:
        type: "string"
    example:
      StaticDir: "StaticDir"
      Config:
        Timezone: "Timezone"
        Umask: "Umask"
        StopSignal: 6
        CreateCommand:
        - "CreateCommand"
        - "CreateCommand"
        User: "User"
        Entrypoint: "Entrypoint"
        AttachStderr: true
        SystemdMode: true
        Hostname: "Hostname"
        Labels:
          key: "Labels"
        OpenStdin: true
        Healthcheck:
          Test:
          - "Test"
          - "Test"
          Retries: 0
          Interval: {}
        Env:
        - "Env"
        - "Env"
        Image: "Image"
        StdinOnce: true
        AttachStdout: true
        WorkingDir: "WorkingDir"
        Annotations:
          key: "Annotations"
        Volumes:
          key: "{}"
        OnBuild: "OnBuild"
        AttachStdin: true
        Domainname: "Domainname"
        Tty: true
        Cmd:
        - "Cmd"
        - "Cmd"
      AppArmorProfile: "AppArmorProfile"
      Driver: "Driver"
      HostsPath: "HostsPath"
      HostnamePath: "HostnamePath"
      Image: "Image"
      Created: "2000-01-23T04:56:07.000+00:00"
      Name: "Name"
      OCIRuntime: "OCIRuntime"
      MountLabel: "MountLabel"
      SizeRootFs: 3
      BoundingCaps:
      - "BoundingCaps"
      - "BoundingCaps"
      ConmonPidFile: "ConmonPidFile"
      HostConfig:
        ReadonlyRootfs: true
        DiskQuota: 1
        BlkioWeightDevice:
        - Path: "Path"
          Weight: 5
        - Path: "Path"
          Weight: 5
        DnsOptions:
        - "DnsOptions"
        - "DnsOptions"
        Memory: 1
        CpuPeriod: 3
        Dns:
        - "Dns"
        - "Dns"
        PortBindings:
          key:
          - HostIp: "HostIp"
            HostPort: "HostPort"
          - HostIp: "HostIp"
            HostPort: "HostPort"
        VolumesFrom:
        - "VolumesFrom"
        - "VolumesFrom"
        Devices:
        - CgroupPermissions: "CgroupPermissions"
          PathInContainer: "PathInContainer"
          PathOnHost: "PathOnHost"
        - CgroupPermissions: "CgroupPermissions"
          PathInContainer: "PathInContainer"
          PathOnHost: "PathOnHost"
        MemorySwappiness: 9
        BlkioWeight: 5
        CgroupMode: "CgroupMode"
        Init: true
        Runtime: "Runtime"
        UsernsMode: "UsernsMode"
        Ulimits:
        - Hard: 3
          Soft: 6
          Name: "Name"
        - Hard: 3
          Soft: 6
          Name: "Name"
        CpusetCpus: "CpusetCpus"
        MemoryReservation: 4
        ExtraHosts:
        - "ExtraHosts"
        - "ExtraHosts"
        BlkioDeviceWriteIOps:
        - Path: "Path"
          Rate: 1
        - Path: "Path"
          Rate: 1
        Cgroups: "Cgroups"
        UTSMode: "UTSMode"
        Cgroup: "Cgroup"
        CpuQuota: 2
        CpuRealtimeRuntime: 7
        DnsSearch:
        - "DnsSearch"
        - "DnsSearch"
        CgroupConf:
          key: "CgroupConf"
        CpuShares: 1
        ContainerIDFile: "ContainerIDFile"
        OomScoreAdj: 6
        KernelMemory: 7
        LogConfig:
          Type: "Type"
          Config:
            key: "Config"
        OomKillDisable: true
        IOMaximumBandwidth: 1
        Privileged: true
        GroupAdd:
        - "GroupAdd"
        - "GroupAdd"
        AutoRemove: true
        CpuPercent: 9
        ConsoleSize:
        - 2
        - 2
        IOMaximumIOps: 6
        CapAdd:
        - "CapAdd"
        - "CapAdd"
        VolumeDriver: "VolumeDriver"
        CapDrop:
        - "CapDrop"
        - "CapDrop"
        CpuCount: 7
        PublishAllPorts: true
        Tmpfs:
          key: "Tmpfs"
        CpuRealtimePeriod: 4
        IpcMode: "IpcMode"
        Binds:
        - "Binds"
        - "Binds"
        CpusetMems: "CpusetMems"
        BlkioDeviceWriteBps:
        - Path: "Path"
          Rate: 1
        - Path: "Path"
          Rate: 1
        RestartPolicy:
          MaximumRetryCount: 9
          Name: "Name"
        NetworkMode: "NetworkMode"
        PidMode: "PidMode"
        BlkioDeviceReadBps:
        - Path: "Path"
          Rate: 1
        - Path: "Path"
          Rate: 1
        CgroupParent: "CgroupParent"
        NanoCpus: 9
        MemorySwap: 5
        Isolation: "Isolation"
        Links:
        - "Links"
        - "Links"
        PidsLimit: 8
        BlkioDeviceReadIOps:
        - Path: "Path"
          Rate: 1
        - Path: "Path"
          Rate: 1
        SecurityOpt:
        - "SecurityOpt"
        - "SecurityOpt"
        ShmSize: 6
      OCIConfigPath: "OCIConfigPath"
      Dependencies:
      - "Dependencies"
      - "Dependencies"
      Path: "Path"
      Args:
      - "Args"
      - "Args"
      EffectiveCaps:
      - "EffectiveCaps"
      - "EffectiveCaps"
      Mounts:
      - Destination: "Destination"
        Options:
        - "Options"
        - "Options"
        Type: "Type"
        Propagation: "Propagation"
        RW: true
        Mode: "Mode"
        Driver: "Driver"
        Source: "Source"
        Name: "Name"
      - Destination: "Destination"
        Options:
        - "Options"
        - "Options"
        Type: "Type"
        Propagation: "Propagation"
        RW: true
        Mode: "Mode"
        Driver: "Driver"
        Source: "Source"
        Name: "Name"
      ProcessLabel: "ProcessLabel"
      ExitCommand:
      - "ExitCommand"
      - "ExitCommand"
      Pod: "Pod"
      SizeRw: 3
      LogTag: "LogTag"
      GraphDriver:
        Data:
          key: "Data"
        Name: "Name"
      Namespace: "Namespace"
      RestartCount: 6
      ImageName: "ImageName"
      NetworkSettings:
        HairpinMode: true
        Networks:
          key:
            GlobalIPv6Address: "GlobalIPv6Address"
            GlobalIPv6PrefixLen: 6
            IPPrefixLen: 5
            AdditionalMACAddresses:
            - "AdditionalMACAddresses"
            - "AdditionalMACAddresses"
            MacAddress: "MacAddress"
            NetworkID: "NetworkID"
            IPAMConfig:
              key: "IPAMConfig"
            DriverOpts:
              key: "DriverOpts"
            Gateway: "Gateway"
            EndpointID: "EndpointID"
            Links:
            - "Links"
            - "Links"
            SecondaryIPv6Addresses:
            - "SecondaryIPv6Addresses"
            - "SecondaryIPv6Addresses"
            IPv6Gateway: "IPv6Gateway"
            SecondaryIPAddresses:
            - "SecondaryIPAddresses"
            - "SecondaryIPAddresses"
            IPAddress: "IPAddress"
        SandboxKey: "SandboxKey"
        GlobalIPv6Address: "GlobalIPv6Address"
        Ports:
          key:
          - HostIp: "HostIp"
            HostPort: "HostPort"
          - HostIp: "HostIp"
            HostPort: "HostPort"
        GlobalIPv6PrefixLen: 1
        IPPrefixLen: 2
        AdditionalMACAddresses:
        - "AdditionalMACAddresses"
        - "AdditionalMACAddresses"
        MacAddress: "MacAddress"
        SandboxID: "SandboxID"
        LinkLocalIPv6Address: "LinkLocalIPv6Address"
        LinkLocalIPv6PrefixLen: 6
        Gateway: "Gateway"
        EndpointID: "EndpointID"
        SecondaryIPv6Addresses:
        - "SecondaryIPv6Addresses"
        - "SecondaryIPv6Addresses"
        IPv6Gateway: "IPv6Gateway"
        SecondaryIPAddresses:
        - "SecondaryIPAddresses"
        - "SecondaryIPAddresses"
        IPAddress: "IPAddress"
        Bridge: "Bridge"
      Rootfs: "Rootfs"
      ResolvConfPath: "ResolvConfPath"
      State:
        Status: "Status"
        Dead: true
        ExitCode: 0
        ConmonPid: 7
        Error: "Error"
        OciVersion: "OciVersion"
        Pid: 6
        Healthcheck:
          Status: "Status"
          Log:
          - Start: "Start"
            ExitCode: 6
            Output: "Output"
            End: "End"
          - Start: "Start"
            ExitCode: 6
            Output: "Output"
            End: "End"
          FailingStreak: 7
        Restarting: true
        Running: true
        FinishedAt: "2000-01-23T04:56:07.000+00:00"
        OOMKilled: true
        StartedAt: "2000-01-23T04:56:07.000+00:00"
        Paused: true
      ExecIDs:
      - "ExecIDs"
      - "ExecIDs"
      IsInfra: true
      Id: "Id"
      LogPath: "LogPath"
  control_3:
    type: "object"
    properties:
      Detach:
        type: "boolean"
        description: "Detach from the command. Not presently supported."
      Tty:
        type: "boolean"
        description: "Allocate a pseudo-TTY. Presently ignored."
  inline_response_200_9:
    type: "object"
    properties:
      Annotations:
        type: "object"
        additionalProperties:
          type: "string"
      Architecture:
        type: "string"
      Author:
        type: "string"
      Comment:
        type: "string"
      Config:
        $ref: "#/definitions/ImageConfig"
      Created:
        type: "string"
        format: "date-time"
      Digest:
        $ref: "#/definitions/Digest"
      GraphDriver:
        $ref: "#/definitions/Data"
      Healthcheck:
        $ref: "#/definitions/Schema2HealthConfig"
      History:
        type: "array"
        items:
          $ref: "#/definitions/History"
      Id:
        type: "string"
        x-go-name: "ID"
      Labels:
        type: "object"
        additionalProperties:
          type: "string"
      ManifestType:
        type: "string"
      NamesHistory:
        type: "array"
        items:
          type: "string"
      Os:
        type: "string"
      Parent:
        type: "string"
      RepoDigests:
        type: "array"
        items:
          type: "string"
      RepoTags:
        type: "array"
        items:
          type: "string"
      RootFS:
        $ref: "#/definitions/RootFS"
      Size:
        type: "integer"
        format: "int64"
      User:
        type: "string"
      Version:
        type: "string"
      VirtualSize:
        type: "integer"
        format: "int64"
    example:
      NamesHistory:
      - "NamesHistory"
      - "NamesHistory"
      RepoDigests:
      - "RepoDigests"
      - "RepoDigests"
      Comment: "Comment"
      VirtualSize: 6
      ManifestType: "ManifestType"
      User: "User"
      Architecture: "Architecture"
      Os: "Os"
      Digest: {}
      Parent: "Parent"
      Config:
        WorkingDir: "WorkingDir"
        StopSignal: "StopSignal"
        User: "User"
        Volumes:
          key: "{}"
        Entrypoint:
        - "Entrypoint"
        - "Entrypoint"
        Labels:
          key: "Labels"
        Cmd:
        - "Cmd"
        - "Cmd"
        Env:
        - "Env"
        - "Env"
        ExposedPorts:
          key: "{}"
      Size: 0
      Labels:
        key: "Labels"
      GraphDriver:
        Data:
          key: "Data"
        Name: "Name"
      Healthcheck:
        Test:
        - "Test"
        - "Test"
        Retries: 0
        Interval: {}
      History:
      - author: "author"
        created: "2000-01-23T04:56:07.000+00:00"
        empty_layer: true
        comment: "comment"
        created_by: "created_by"
      - author: "author"
        created: "2000-01-23T04:56:07.000+00:00"
        empty_layer: true
        comment: "comment"
        created_by: "created_by"
      Created: "2000-01-23T04:56:07.000+00:00"
      RootFS:
        Type: "Type"
        Layers:
        - {}
        - {}
      Annotations:
        key: "Annotations"
      RepoTags:
      - "RepoTags"
      - "RepoTags"
      Version: "Version"
      Author: "Author"
      Id: "Id"
  inline_response_200_10:
    type: "object"
    properties:
      id:
        type: "string"
        x-go-name: "ID"
      layers:
        type: "array"
        items:
          $ref: "#/definitions/ImageLayer"
        x-go-name: "Layers"
      size:
        type: "string"
        x-go-name: "Size"
      tags:
        type: "array"
        items:
          type: "string"
        x-go-name: "Tags"
    example:
      size: "size"
      layers:
      - {}
      - {}
      id: "id"
      tags:
      - "tags"
      - "tags"
  inline_response_200_11:
    type: "object"
    properties:
      CgroupParent:
        type: "string"
        description: "CgroupParent is the parent of the pod's CGroup."
      CgroupPath:
        type: "string"
        description: "CgroupPath is the path to the pod's CGroup."
      Containers:
        type: "array"
        description: "Containers gives a brief summary of all containers in the pod\
          \ and\ntheir current status."
        items:
          $ref: "#/definitions/InspectPodContainerInfo"
      CreateCgroup:
        type: "boolean"
        description: "CreateCgroup is whether this pod will create its own CGroup\
          \ to group\ncontainers under."
      CreateCommand:
        type: "array"
        description: "CreateCommand is the full command plus arguments of the process\
          \ the\ncontainer has been created with."
        items:
          type: "string"
      CreateInfra:
        type: "boolean"
        description: "CreateInfra is whether this pod will create an infra container\
          \ to\nshare namespaces."
      Created:
        type: "string"
        format: "date-time"
        description: "Created is the time when the pod was created."
      Hostname:
        type: "string"
        description: "Hostname is the hostname that the pod will set."
      Id:
        type: "string"
        description: "ID is the ID of the pod."
        x-go-name: "ID"
      InfraConfig:
        $ref: "#/definitions/InspectPodInfraConfig"
      InfraContainerID:
        type: "string"
        description: "InfraContainerID is the ID of the pod's infra container, if\
          \ one is\npresent."
      Labels:
        type: "object"
        description: "Labels is a set of key-value labels that have been applied to\
          \ the\npod."
        additionalProperties:
          type: "string"
      Name:
        type: "string"
        description: "Name is the name of the pod."
      Namespace:
        type: "string"
        description: "Namespace is the Libpod namespace the pod is placed in."
      NumContainers:
        type: "integer"
        format: "uint64"
        description: "NumContainers is the number of containers in the pod, including\
          \ the\ninfra container."
      SharedNamespaces:
        type: "array"
        description: "SharedNamespaces contains a list of namespaces that will be\
          \ shared by\ncontainers within the pod. Can only be set if CreateInfra is\
          \ true."
        items:
          type: "string"
      State:
        type: "string"
        description: "State represents the current state of the pod."
    example:
      InfraConfig:
        NetworkOptions:
          key:
          - "NetworkOptions"
          - "NetworkOptions"
        Networks:
        - "Networks"
        - "Networks"
        DNSOption:
        - "DNSOption"
        - "DNSOption"
        NoManageHosts: true
        PortBindings:
          key:
          - HostIp: "HostIp"
            HostPort: "HostPort"
          - HostIp: "HostIp"
            HostPort: "HostPort"
        DNSServer:
        - "DNSServer"
        - "DNSServer"
        StaticIP: ""
        DNSSearch:
        - "DNSSearch"
        - "DNSSearch"
        HostNetwork: true
        HostAdd:
        - "HostAdd"
        - "HostAdd"
        NoManageResolvConf: true
        StaticMAC: ""
      CreateCommand:
      - "CreateCommand"
      - "CreateCommand"
      Containers:
      - State: "State"
        Id: "Id"
        Name: "Name"
      - State: "State"
        Id: "Id"
        Name: "Name"
      CreateCgroup: true
      Hostname: "Hostname"
      SharedNamespaces:
      - "SharedNamespaces"
      - "SharedNamespaces"
      Labels:
        key: "Labels"
      Namespace: "Namespace"
      NumContainers: 0
      Created: "2000-01-23T04:56:07.000+00:00"
      Name: "Name"
      CgroupParent: "CgroupParent"
      CreateInfra: true
      CgroupPath: "CgroupPath"
      State: "State"
      Id: "Id"
      InfraContainerID: "InfraContainerID"
  inline_response_200_12:
    type: "object"
    properties:
      Containers:
        type: "array"
        items:
          $ref: "#/definitions/SystemDfContainerReport"
      Images:
        type: "array"
        items:
          $ref: "#/definitions/SystemDfImageReport"
      Volumes:
        type: "array"
        items:
          $ref: "#/definitions/SystemDfVolumeReport"
    example:
      Volumes:
      - VolumeName: "VolumeName"
        ReclaimableSize: 3
        Size: 2
        Links: 9
      - VolumeName: "VolumeName"
        ReclaimableSize: 3
        Size: 2
        Links: 9
      Images:
      - SharedSize: 5
        UniqueSize: 7
        Repository: "Repository"
        Size: 2
        Containers: 5
        ImageID: "ImageID"
        Tag: "Tag"
        Created: "2000-01-23T04:56:07.000+00:00"
      - SharedSize: 5
        UniqueSize: 7
        Repository: "Repository"
        Size: 2
        Containers: 5
        ImageID: "ImageID"
        Tag: "Tag"
        Created: "2000-01-23T04:56:07.000+00:00"
      Containers:
      - Names: "Names"
        Status: "Status"
        Command:
        - "Command"
        - "Command"
        ContainerID: "ContainerID"
        Size: 1
        RWSize: 6
        LocalVolumes: 0
        Image: "Image"
        Created: "2000-01-23T04:56:07.000+00:00"
      - Names: "Names"
        Status: "Status"
        Command:
        - "Command"
        - "Command"
        ContainerID: "ContainerID"
        Size: 1
        RWSize: 6
        LocalVolumes: 0
        Image: "Image"
        Created: "2000-01-23T04:56:07.000+00:00"
  inline_response_200_13:
    type: "object"
    properties:
      Err:
        type: "object"
        additionalProperties:
          type: "string"
      ID:
        type: "object"
        additionalProperties:
          type: "integer"
          format: "int64"
      PodPruneReport:
        type: "array"
        items:
          $ref: "#/definitions/PodPruneReport"
      Report:
        $ref: "#/definitions/Report"
      Size:
        type: "integer"
        format: "int64"
      VolumePruneReport:
        type: "array"
        items:
          $ref: "#/definitions/VolumePruneReport"
    example:
      Err:
        key: "Err"
      Report:
        Err:
          key: "Err"
        Id:
        - "Id"
        - "Id"
      Size: 6
      PodPruneReport:
      - Err: "Err"
        Id: "Id"
      - Err: "Err"
        Id: "Id"
      ID:
        key: 0
      VolumePruneReport:
      - Err: "Err"
        Id: "Id"
      - Err: "Err"
        Id: "Id"
  inline_response_200_14:
    type: "object"
    properties:
      Client:
        $ref: "#/definitions/Version"
      Server:
        $ref: "#/definitions/Version"
    example:
      Server:
        GitCommit: "GitCommit"
        APIVersion: "APIVersion"
        Version: "Version"
        Built: 4
        OsArch: "OsArch"
        BuiltTime: "BuiltTime"
        GoVersion: "GoVersion"
      Client:
        GitCommit: "GitCommit"
        APIVersion: "APIVersion"
        Version: "Version"
        Built: 4
        OsArch: "OsArch"
        BuiltTime: "BuiltTime"
        GoVersion: "GoVersion"
  inline_response_200_15:
    type: "object"
    properties:
      Anonymous:
        type: "boolean"
        description: "Anonymous indicates that the volume was created as an anonymous\n\
          volume for a specific container, and will be be removed when any\ncontainer\
          \ using it is removed."
      CreatedAt:
        type: "string"
        format: "date-time"
        description: "CreatedAt is the date and time the volume was created at. This\
          \ is not\nstored for older Libpod volumes; if so, it will be omitted."
      Driver:
        type: "string"
        description: "Driver is the driver used to create the volume.\nThis will be\
          \ properly implemented in a future version."
      GID:
        type: "integer"
        format: "int64"
        description: "GID is the GID that the volume was created with."
      Labels:
        type: "object"
        description: "Labels includes the volume's configured labels, key:value pairs\
          \ that\ncan be passed during volume creation to provide information for\
          \ third\nparty tools."
        additionalProperties:
          type: "string"
      Mountpoint:
        type: "string"
        description: "Mountpoint is the path on the host where the volume is mounted."
      Name:
        type: "string"
        description: "Name is the name of the volume."
      Options:
        type: "object"
        description: "Options is a set of options that were used when creating the\
          \ volume.\nIt is presently not used."
        additionalProperties:
          type: "string"
      Scope:
        type: "string"
        description: "Scope is unused and provided solely for Docker compatibility.\
          \ It is\nunconditionally set to \"local\"."
      Status:
        type: "object"
        description: "Status is presently unused and provided only for Docker compatibility.\n\
          In the future it will be used to return information on the volume's\ncurrent\
          \ state."
        additionalProperties:
          type: "string"
      UID:
        type: "integer"
        format: "int64"
        description: "UID is the UID that the volume was created with."
    example:
      Status:
        key: "Status"
      Options:
        key: "Options"
      UID: 6
      GID: 0
      Scope: "Scope"
      CreatedAt: "2000-01-23T04:56:07.000+00:00"
      Driver: "Driver"
      Labels:
        key: "Labels"
      Anonymous: true
      Mountpoint: "Mountpoint"
      Name: "Name"
  inline_response_200_16:
    type: "object"
    properties:
      Attachable:
        type: "boolean"
      CheckDuplicate:
        type: "boolean"
        description: "Check for networks with duplicate names.\nNetwork is primarily\
          \ keyed based on a random ID and not on the name.\nNetwork name is strictly\
          \ a user-friendly alias to the network\nwhich is uniquely identified using\
          \ ID.\nAnd there is no guaranteed way to check for duplicates.\nOption CheckDuplicate\
          \ is there to provide a best effort checking of any networks\nwhich has\
          \ the same name but it is not guaranteed to catch all name collisions."
      ConfigFrom:
        $ref: "#/definitions/ConfigReference"
      ConfigOnly:
        type: "boolean"
      Driver:
        type: "string"
      EnableIPv6:
        type: "boolean"
      IPAM:
        $ref: "#/definitions/IPAM"
      Ingress:
        type: "boolean"
      Internal:
        type: "boolean"
      Labels:
        type: "object"
        additionalProperties:
          type: "string"
      Options:
        type: "object"
        additionalProperties:
          type: "string"
      Scope:
        type: "string"
    example:
      CheckDuplicate: true
      ConfigOnly: true
      IPAM:
        Options:
          key: "Options"
        Config:
        - AuxiliaryAddresses:
            key: "AuxiliaryAddresses"
          Gateway: "Gateway"
          Subnet: "Subnet"
          IPRange: "IPRange"
        - AuxiliaryAddresses:
            key: "AuxiliaryAddresses"
          Gateway: "Gateway"
          Subnet: "Subnet"
          IPRange: "IPRange"
        Driver: "Driver"
      Options:
        key: "Options"
      Scope: "Scope"
      ConfigFrom:
        Network: "Network"
      Internal: true
      Driver: "Driver"
      Ingress: true
      Labels:
        key: "Labels"
      Attachable: true
      EnableIPv6: true
  inline_response_200_17:
    type: "object"
    properties:
      Volumes:
        type: "array"
        items:
          $ref: "#/definitions/VolumeInfo"
    example:
      Volumes:
      - Options:
          key: "Options"
        Scope: "Scope"
        CreatedAt: "CreatedAt"
        Driver: "Driver"
        Labels:
          key: "Labels"
        Mountpoint: "Mountpoint"
        Name: "Name"
      - Options:
          key: "Options"
        Scope: "Scope"
        CreatedAt: "CreatedAt"
        Driver: "Driver"
        Labels:
          key: "Labels"
        Mountpoint: "Mountpoint"
        Name: "Name"
  inline_response_200_18:
    type: "object"
    required:
    - "Driver"
    - "Labels"
    - "Mountpoint"
    - "Name"
    - "Options"
    - "Scope"
    properties:
      CreatedAt:
        type: "string"
        description: "Date/Time the volume was created."
      Driver:
        type: "string"
        description: "Name of the volume driver used by the volume."
      Labels:
        type: "object"
        description: "User-defined key/value metadata."
        additionalProperties:
          type: "string"
      Mountpoint:
        type: "string"
        description: "Mount path of the volume on the host."
      Name:
        type: "string"
        description: "Name of the volume."
      Options:
        type: "object"
        description: "The driver specific options used when creating the volume."
        additionalProperties:
          type: "string"
      Scope:
        type: "string"
        description: "The level at which the volume exists. Either `global` for cluster-wide,\n\
          or `local` for machine level."
      Status:
        type: "object"
        description: "Low-level details about the volume, provided by the volume driver.\n\
          Details are returned as a map with key/value pairs:\n`{\"key\":\"value\"\
          ,\"key2\":\"value2\"}`.\n\nThe `Status` field is optional, and is omitted\
          \ if the volume driver\ndoes not support this feature."
        additionalProperties:
          type: "object"
          properties: {}
      UsageData:
        $ref: "#/definitions/VolumeUsageData"
    example:
      Status:
        key: "{}"
      Options:
        key: "Options"
      Scope: "Scope"
      UsageData:
        RefCount: 0
        Size: 6
      CreatedAt: "CreatedAt"
      Driver: "Driver"
      Labels:
        key: "Labels"
      Mountpoint: "Mountpoint"
      Name: "Name"
  inline_response_200_19:
    type: "object"
    properties:
      SpaceReclaimed:
        type: "integer"
        format: "uint64"
      VolumesDeleted:
        type: "array"
        items:
          type: "string"
    example:
      SpaceReclaimed: 0
      VolumesDeleted:
      - "VolumesDeleted"
      - "VolumesDeleted"
responses:
  BadParamError:
    description: "Bad parameter in request"
    schema:
      $ref: "#/definitions/inline_response_400"
  Changes:
    description: "Object Changes"
    schema:
      type: "object"
      properties:
        Changes:
          type: "array"
          items:
            $ref: "#/definitions/Change"
  CompatNetworkCreate:
    description: "Network create"
    schema:
      $ref: "#/definitions/inline_response_200_16"
  CompatNetworkInspect:
    description: "Network inspect"
    schema:
      $ref: "#/definitions/NetworkResource"
  CompatNetworkList:
    description: "Network list"
    schema:
      type: "array"
      items:
        $ref: "#/definitions/NetworkResource"
  ConflictError:
    description: "Conflict error in operation"
    schema:
      $ref: "#/definitions/inline_response_400"
  ContainerAlreadyStartedError:
    description: "Container already started"
    schema:
      $ref: "#/definitions/inline_response_400"
  ContainerAlreadyStoppedError:
    description: "Container already stopped"
    schema:
      $ref: "#/definitions/inline_response_400"
  ContainerCreateResponse:
    description: "Create container"
    schema:
      $ref: "#/definitions/inline_response_201"
  ContainerWaitResponse:
    description: "Wait container"
    schema:
      $ref: "#/definitions/inline_response_200_3"
  DockerImageSummary:
    description: "Image summary"
    schema:
      type: "array"
      items:
        $ref: "#/definitions/ImageSummary"
  DockerVolumeInfoResponse:
    description: "This response definition is used for both the create and inspect\
      \ endpoints"
    schema:
      $ref: "#/definitions/inline_response_200_18"
  DockerVolumePruneResponse:
    description: "Volume prune response"
    schema:
      $ref: "#/definitions/inline_response_200_19"
  DocsContainerInspectResponse:
    description: "Inspect container"
    schema:
      $ref: "#/definitions/inline_response_200_1"
  DocsContainerPruneReport:
    description: "Prune containers"
    schema:
      type: "array"
      items:
        $ref: "#/definitions/ContainersPruneReport"
  DocsContainerTopResponse:
    description: "List processes in container"
    schema:
      $ref: "#/definitions/inline_response_200_2"
  DocsHistory:
    description: "History response"
    schema:
      $ref: "#/definitions/inline_response_200_4"
  DocsImageDeleteResponse:
    description: "Delete response"
    schema:
      type: "array"
      items:
        $ref: "#/definitions/ImageDeleteResponse"
  DocsImageInspect:
    description: "Inspect response"
    schema:
      $ref: "#/definitions/inline_response_200_5"
  DocsLibpodImagesImportResponse:
    description: "Import response"
    schema:
      $ref: "#/definitions/ImageImportReport"
  DocsLibpodImagesLoadResponse:
    description: "Load response"
    schema:
      $ref: "#/definitions/ImageLoadReport"
  DocsLibpodImagesPullResponse:
    description: "Pull response"
    schema:
      $ref: "#/definitions/LibpodImagesPullReport"
  DocsLibpodImagesRemoveResponse:
    description: "Remove response"
    schema:
      $ref: "#/definitions/LibpodImagesRemoveReport"
  DocsLibpodInspectImageResponse:
    description: "Inspect image"
    schema:
      $ref: "#/definitions/inline_response_200_9"
  DocsLibpodPlayKubeResponse:
    description: "PlayKube response"
    schema:
      $ref: "#/definitions/PlayKubeReport"
  DocsLibpodPruneResponse:
    description: "Prune containers"
    schema:
      type: "array"
      items:
        $ref: "#/definitions/LibpodContainersPruneReport"
  DocsListContainer:
    description: "List Containers"
    schema:
      type: "object"
  DocsPodStatsResponse:
    description: "List processes in pod"
    schema:
      type: "array"
      items:
        $ref: "#/definitions/PodStatsReport"
  DocsPodTopResponse:
    description: "List processes in pod"
    schema:
      $ref: "#/definitions/inline_response_200_2"
  DocsRegistriesList:
    description: "Registries summary"
    schema:
      $ref: "#/definitions/ListRegistriesReport"
  DocsSearchResponse:
    description: "Search results"
    schema:
      $ref: "#/definitions/inline_response_200_6"
  HealthcheckRun:
    description: "Healthcheck"
    schema:
      $ref: "#/definitions/inline_response_200_7"
  InfoResponse:
    description: "Info"
    schema:
      $ref: "#/definitions/Info"
  InspectManifest:
    description: "Inspect Manifest"
    schema:
      $ref: "#/definitions/List"
  InspectPodResponse:
    description: "Inspect pod"
    schema:
      $ref: "#/definitions/inline_response_200_11"
  InspectVolumeResponse:
    description: "Inspect volume"
    schema:
      type: "object"
      properties:
        Anonymous:
          type: "boolean"
          description: "Anonymous indicates that the volume was created as an anonymous\n\
            volume for a specific container, and will be be removed when any\ncontainer\
            \ using it is removed."
        CreatedAt:
          type: "string"
          format: "date-time"
          description: "CreatedAt is the date and time the volume was created at.\
            \ This is not\nstored for older Libpod volumes; if so, it will be omitted."
        Driver:
          type: "string"
          description: "Driver is the driver used to create the volume.\nThis will\
            \ be properly implemented in a future version."
        GID:
          type: "integer"
          format: "int64"
          description: "GID is the GID that the volume was created with."
        Labels:
          type: "object"
          description: "Labels includes the volume's configured labels, key:value\
            \ pairs that\ncan be passed during volume creation to provide information\
            \ for third\nparty tools."
          additionalProperties:
            type: "string"
        Mountpoint:
          type: "string"
          description: "Mountpoint is the path on the host where the volume is mounted."
        Name:
          type: "string"
          description: "Name is the name of the volume."
        Options:
          type: "object"
          description: "Options is a set of options that were used when creating the\
            \ volume.\nIt is presently not used."
          additionalProperties:
            type: "string"
        Scope:
          type: "string"
          description: "Scope is unused and provided solely for Docker compatibility.\
            \ It is\nunconditionally set to \"local\"."
        Status:
          type: "object"
          description: "Status is presently unused and provided only for Docker compatibility.\n\
            In the future it will be used to return information on the volume's\n\
            current state."
          additionalProperties:
            type: "string"
        UID:
          type: "integer"
          format: "int64"
          description: "UID is the UID that the volume was created with."
  InternalError:
    description: "Internal server error"
    schema:
      $ref: "#/definitions/inline_response_400"
  LibpodImageTreeResponse:
    description: "Image tree response"
    schema:
      $ref: "#/definitions/inline_response_200_10"
  LibpodInspectContainerResponse:
    description: "Inspect container"
    schema:
      $ref: "#/definitions/inline_response_200_8"
  ListContainers:
    description: "List Containers"
    schema:
      type: "array"
      items:
        $ref: "#/definitions/ListContainer"
  ListPodsResponse:
    description: "List pods"
    schema:
      type: "array"
      items:
        $ref: "#/definitions/ListPodsReport"
  NetworkCreateReport:
    description: "Network create"
    schema:
      $ref: "#/definitions/NetworkCreateReport"
  NetworkInspectReport:
    description: "Network inspect"
    schema:
      type: "array"
      items:
        $ref: "#/definitions/NetworkInspectReport"
  NetworkListReport:
    description: "Network list"
    schema:
      type: "array"
      items:
        $ref: "#/definitions/NetworkListReport"
  NetworkRmReport:
    description: "Network rm"
    schema:
      $ref: "#/definitions/NetworkRmReport"
  NoSuchContainer:
    description: "No such container"
    schema:
      $ref: "#/definitions/inline_response_400"
  NoSuchExecInstance:
    description: "No such exec instance"
    schema:
      $ref: "#/definitions/inline_response_400"
  NoSuchImage:
    description: "No such image"
    schema:
      $ref: "#/definitions/inline_response_400"
  NoSuchManifest:
    description: "No such manifest"
    schema:
      $ref: "#/definitions/inline_response_400"
  NoSuchNetwork:
    description: "No such network"
    schema:
      $ref: "#/definitions/inline_response_400"
  NoSuchPod:
    description: "No such pod"
    schema:
      $ref: "#/definitions/inline_response_400"
  NoSuchVolume:
    description: "No such volume"
    schema:
      $ref: "#/definitions/inline_response_400"
  PodAlreadyStartedError:
    description: "Pod already started"
    schema:
      $ref: "#/definitions/inline_response_400"
  PodAlreadyStoppedError:
    description: "Pod already stopped"
    schema:
      $ref: "#/definitions/inline_response_400"
  PodKillReport:
    description: "Kill Pod"
    schema:
      $ref: "#/definitions/PodKillReport"
  PodPauseReport:
    description: "Pause pod"
    schema:
      $ref: "#/definitions/PodPauseReport"
  PodPruneReport:
    description: "Prune pod"
    schema:
      $ref: "#/definitions/PodPruneReport"
  PodRestartReport:
    description: "Restart pod"
    schema:
      $ref: "#/definitions/PodRestartReport"
  PodRmReport:
    description: "Rm pod"
    schema:
      $ref: "#/definitions/PodRmReport"
  PodStartReport:
    description: "Start pod"
    schema:
      $ref: "#/definitions/PodStartReport"
  PodStopReport:
    description: "Stop pod"
    schema:
      $ref: "#/definitions/PodStopReport"
  PodUnpauseReport:
    description: "Unpause pod"
    schema:
      $ref: "#/definitions/PodUnpauseReport"
  SystemDiskUse:
    description: "Disk usage"
    schema:
      $ref: "#/definitions/inline_response_200_12"
  SystemPruneReport:
    description: "Prune report"
    schema:
      $ref: "#/definitions/inline_response_200_13"
  Version:
    description: "Version"
    schema:
      $ref: "#/definitions/inline_response_200_14"
  VolumeCreateResponse:
    description: "Volume create response"
    schema:
      $ref: "#/definitions/inline_response_200_15"
  VolumeList:
    description: "Volume list"
    schema:
      type: "array"
      items:
        $ref: "#/definitions/Volume"
  VolumeListResponse:
    description: "Volume list response"
    schema:
      $ref: "#/definitions/inline_response_200_17"
  VolumePruneResponse:
    description: "Volume prune response"
    schema:
      type: "array"
      items:
        $ref: "#/definitions/VolumePruneReport"
  ok:
    description: "Success"
    schema:
      type: "object"
