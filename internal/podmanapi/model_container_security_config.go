/*
 * Provides a container compatible interface.
 *
 * This documentation describes the Podman v2.0 RESTful API. It replaces the Podman v1.0 API and was initially delivered along with Podman v2.0.  It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /var/run/docker.sock to /run/podman/podman.sock  See podman-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v1.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v1.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v1.0.0/libpod/images/json' | jq
 *
 * API version: 0.0.1
 * Contact: podman@lists.podman.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

// ContainerSecurityConfig is a container's security features, including SELinux, Apparmor, and Seccomp.
type ContainerSecurityConfig struct {
	// ApparmorProfile is the name of the Apparmor profile the container will use. Optional.
	ApparmorProfile string `json:"apparmor_profile,omitempty"`
	// CapAdd are capabilities which will be added to the container. Conflicts with Privileged. Optional.
	CapAdd []string `json:"cap_add,omitempty"`
	// CapDrop are capabilities which will be removed from the container. Conflicts with Privileged. Optional.
	CapDrop []string `json:"cap_drop,omitempty"`
	// Groups are a list of supplemental groups the container's user will be granted access to. Optional.
	Groups []string `json:"groups,omitempty"`
	Idmappings *IdMappingOptions `json:"idmappings,omitempty"`
	// NoNewPrivileges is whether the container will set the no new privileges flag on create, which disables gaining additional privileges (e.g. via setuid) in the container.
	NoNewPrivileges bool `json:"no_new_privileges,omitempty"`
	// Privileged is whether the container is privileged. Privileged does the following: Adds all devices on the system to the container. Adds all capabilities to the container. Disables Seccomp, SELinux, and Apparmor confinement. (Though SELinux can be manually re-enabled). TODO: this conflicts with things. TODO: this does more.
	Privileged bool `json:"privileged,omitempty"`
	// ProcOpts are the options used for the proc mount.
	ProcfsOpts []string `json:"procfs_opts,omitempty"`
	// ReadOnlyFilesystem indicates that everything will be mounted as read-only
	ReadOnlyFilesystem bool `json:"read_only_filesystem,omitempty"`
	// SeccompPolicy determines which seccomp profile gets applied the container. valid values: empty,default,image
	SeccompPolicy string `json:"seccomp_policy,omitempty"`
	// SeccompProfilePath is the path to a JSON file containing the container's Seccomp profile. If not specified, no Seccomp profile will be used. Optional.
	SeccompProfilePath string `json:"seccomp_profile_path,omitempty"`
	// SelinuxProcessLabel is the process label the container will use. If SELinux is enabled and this is not specified, a label will be automatically generated if not specified. Optional.
	SelinuxOpts []string `json:"selinux_opts,omitempty"`
	// Umask is the umask the init process of the container will be run with.
	Umask string `json:"umask,omitempty"`
	// User is the user the container will be run as. Can be given as a UID or a username; if a username, it will be resolved within the container, using the container's /etc/passwd. If unset, the container will be run as root. Optional.
	User string `json:"user,omitempty"`
	Userns *Namespace `json:"userns,omitempty"`
}
