/*
 * Provides a container compatible interface.
 *
 * This documentation describes the Podman v2.0 RESTful API. It replaces the Podman v1.0 API and was initially delivered along with Podman v2.0.  It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /var/run/docker.sock to /run/podman/podman.sock  See podman-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v1.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v1.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v1.0.0/libpod/images/json' | jq
 *
 * API version: 0.0.1
 * Contact: podman@lists.podman.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

// InspectContainerConfig holds further data about how a container was initially configured.
type InspectContainerConfig struct {
	// Container annotations
	Annotations map[string]string `json:"Annotations,omitempty"`
	// Unused, at present
	AttachStderr bool `json:"AttachStderr,omitempty"`
	// Unused, at present
	AttachStdin bool `json:"AttachStdin,omitempty"`
	// Unused, at present
	AttachStdout bool `json:"AttachStdout,omitempty"`
	// Container command
	Cmd []string `json:"Cmd,omitempty"`
	// CreateCommand is the full command plus arguments of the process the container has been created with.
	CreateCommand []string `json:"CreateCommand,omitempty"`
	// Container domain name - unused at present
	Domainname string `json:"Domainname,omitempty"`
	// Container entrypoint
	Entrypoint string `json:"Entrypoint,omitempty"`
	// Container environment variables
	Env []string `json:"Env,omitempty"`
	Healthcheck *Schema2HealthConfig `json:"Healthcheck,omitempty"`
	// Container hostname
	Hostname string `json:"Hostname,omitempty"`
	// Container image
	Image string `json:"Image,omitempty"`
	// Container labels
	Labels map[string]string `json:"Labels,omitempty"`
	// On-build arguments - presently unused. More of Buildah's domain.
	OnBuild string `json:"OnBuild,omitempty"`
	// Whether the container leaves STDIN open
	OpenStdin bool `json:"OpenStdin,omitempty"`
	// Whether STDIN is only left open once. Presently not supported by Podman, unused.
	StdinOnce bool `json:"StdinOnce,omitempty"`
	// Container stop signal
	StopSignal int32 `json:"StopSignal,omitempty"`
	// SystemdMode is whether the container is running in systemd mode. In systemd mode, the container configuration is customized to optimize running systemd in the container.
	SystemdMode bool `json:"SystemdMode,omitempty"`
	// Timezone is the timezone inside the container. Local means it has the same timezone as the host machine
	Timezone string `json:"Timezone,omitempty"`
	// Whether the container creates a TTY
	Tty bool `json:"Tty,omitempty"`
	// Umask is the umask inside the container.
	Umask string `json:"Umask,omitempty"`
	// User the container was launched with
	User string `json:"User,omitempty"`
	// Unused, at present. I've never seen this field populated.
	Volumes map[string]interface{} `json:"Volumes,omitempty"`
	// Container working directory
	WorkingDir string `json:"WorkingDir,omitempty"`
}
