/*
 * Provides a container compatible interface.
 *
 * This documentation describes the Podman v2.0 RESTful API. It replaces the Podman v1.0 API and was initially delivered along with Podman v2.0.  It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /var/run/docker.sock to /run/podman/podman.sock  See podman-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v1.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v1.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v1.0.0/libpod/images/json' | jq
 *
 * API version: 0.0.1
 * Contact: podman@lists.podman.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

// InspectNetworkSettings holds information about the network settings of the container. Many fields are maintained only for compatibility with `docker inspect` and are unused within Libpod.
type InspectNetworkSettings struct {
	// AdditionalMacAddresses is a set of additional MAC Addresses beyond the first. CNI may configure more than one interface for a single network, which can cause this.
	AdditionalMACAddresses []string `json:"AdditionalMACAddresses,omitempty"`
	Bridge string `json:"Bridge,omitempty"`
	// EndpointID is unused, maintained exclusively for compatibility.
	EndpointID string `json:"EndpointID,omitempty"`
	// Gateway is the IP address of the gateway this network will use.
	Gateway string `json:"Gateway,omitempty"`
	// GlobalIPv6Address is the global-scope IPv6 Address for this network.
	GlobalIPv6Address string `json:"GlobalIPv6Address,omitempty"`
	// GlobalIPv6PrefixLen is the length of the subnet mask of this network.
	GlobalIPv6PrefixLen int64 `json:"GlobalIPv6PrefixLen,omitempty"`
	HairpinMode bool `json:"HairpinMode,omitempty"`
	// IPAddress is the IP address for this network.
	IPAddress string `json:"IPAddress,omitempty"`
	// IPPrefixLen is the length of the subnet mask of this network.
	IPPrefixLen int64 `json:"IPPrefixLen,omitempty"`
	// IPv6Gateway is the IPv6 gateway this network will use.
	IPv6Gateway string `json:"IPv6Gateway,omitempty"`
	LinkLocalIPv6Address string `json:"LinkLocalIPv6Address,omitempty"`
	LinkLocalIPv6PrefixLen int64 `json:"LinkLocalIPv6PrefixLen,omitempty"`
	// MacAddress is the MAC address for the interface in this network.
	MacAddress string `json:"MacAddress,omitempty"`
	// Networks contains information on non-default CNI networks this container has joined. It is a map of network name to network information.
	Networks map[string]InspectAdditionalNetwork `json:"Networks,omitempty"`
	Ports map[string][]InspectHostPort `json:"Ports,omitempty"`
	SandboxID string `json:"SandboxID,omitempty"`
	SandboxKey string `json:"SandboxKey,omitempty"`
	// SecondaryIPAddresses is a list of extra IP Addresses that the container has been assigned in this network.
	SecondaryIPAddresses []string `json:"SecondaryIPAddresses,omitempty"`
	// SecondaryIPv6Addresses is a list of extra IPv6 Addresses that the container has been assigned in this networ.
	SecondaryIPv6Addresses []string `json:"SecondaryIPv6Addresses,omitempty"`
}
