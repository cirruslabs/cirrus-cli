/*
 * Provides a container compatible interface.
 *
 * This documentation describes the Podman v2.0 RESTful API. It replaces the Podman v1.0 API and was initially delivered along with Podman v2.0.  It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /var/run/docker.sock to /run/podman/podman.sock  See podman-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v1.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v1.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v1.0.0/libpod/images/json' | jq
 *
 * API version: 0.0.1
 * Contact: podman@lists.podman.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

// CreateConfig is a pre OCI spec structure.  It represents user input from varlink or the CLI
type CreateConfig struct {
	Annotations map[string]string `json:"Annotations,omitempty"`
	Args []string `json:"Args,omitempty"`
	BuiltinImgVolumes map[string]interface{} `json:"BuiltinImgVolumes,omitempty"`
	Cgroup *CgroupConfig `json:"Cgroup,omitempty"`
	CidFile string `json:"CidFile,omitempty"`
	Command []string `json:"Command,omitempty"`
	ConmonPidFile string `json:"ConmonPidFile,omitempty"`
	Detach bool `json:"Detach,omitempty"`
	Devices []string `json:"Devices,omitempty"`
	Entrypoint []string `json:"Entrypoint,omitempty"`
	Env map[string]string `json:"Env,omitempty"`
	HealthCheck *Schema2HealthConfig `json:"HealthCheck,omitempty"`
	Image string `json:"Image,omitempty"`
	ImageID string `json:"ImageID,omitempty"`
	ImageVolumeType string `json:"ImageVolumeType,omitempty"`
	Init bool `json:"Init,omitempty"`
	InitPath string `json:"InitPath,omitempty"`
	Interactive bool `json:"Interactive,omitempty"`
	Ipc *IpcConfig `json:"Ipc,omitempty"`
	Labels map[string]string `json:"Labels,omitempty"`
	LogDriver string `json:"LogDriver,omitempty"`
	LogDriverOpt []string `json:"LogDriverOpt,omitempty"`
	Mounts []Mount `json:"Mounts,omitempty"`
	MountsFlag []string `json:"MountsFlag,omitempty"`
	Name string `json:"Name,omitempty"`
	NamedVolumes []ContainerNamedVolume `json:"NamedVolumes,omitempty"`
	Network *NetworkConfig `json:"Network,omitempty"`
	Pid *PidConfig `json:"Pid,omitempty"`
	Pod string `json:"Pod,omitempty"`
	PodmanPath string `json:"PodmanPath,omitempty"`
	Quiet bool `json:"Quiet,omitempty"`
	RawImageName string `json:"RawImageName,omitempty"`
	Resources *CreateResourceConfig `json:"Resources,omitempty"`
	RestartPolicy string `json:"RestartPolicy,omitempty"`
	Rm bool `json:"Rm,omitempty"`
	Rmi bool `json:"Rmi,omitempty"`
	Rootfs string `json:"Rootfs,omitempty"`
	Security *SecurityConfig `json:"Security,omitempty"`
	StopSignal int64 `json:"StopSignal,omitempty"`
	StopTimeout int32 `json:"StopTimeout,omitempty"`
	Syslog bool `json:"Syslog,omitempty"`
	Systemd bool `json:"Systemd,omitempty"`
	Tmpfs []string `json:"Tmpfs,omitempty"`
	Tty bool `json:"Tty,omitempty"`
	User *UserConfig `json:"User,omitempty"`
	UserCommand []string `json:"UserCommand,omitempty"`
	Uts *UtsConfig `json:"Uts,omitempty"`
	Volumes []string `json:"Volumes,omitempty"`
	VolumesFrom []string `json:"VolumesFrom,omitempty"`
	WorkDir string `json:"WorkDir,omitempty"`
}
