syntax = "proto3";

package github.actions.results.api.v1;

option go_package = "github.com/cirruslabs/cirrus-cli/pkg/api/gharesults";

service CacheService {
  rpc CreateCacheEntry (CreateCacheEntryRequest) returns (CreateCacheEntryResponse);
  rpc FinalizeCacheEntryUpload (FinalizeCacheEntryUploadRequest) returns (FinalizeCacheEntryUploadResponse);
  rpc GetCacheEntryDownloadURL (GetCacheEntryDownloadURLRequest) returns (GetCacheEntryDownloadURLResponse);
}

message CreateCacheEntryRequest {
  CacheMetadata metadata = 1;
  string key = 2;
  string version = 3;
}

message CacheMetadata {
  string repository_id = 1;
  repeated CacheScope scope = 2;
}

message CacheScope {
  string scope = 1;
  string permission = 2;
}

message CreateCacheEntryResponse {
  bool ok = 1;
  string signed_upload_url = 2;
}

message FinalizeCacheEntryUploadRequest {
  CacheMetadata metadata = 1;
  string key = 2;
  int64 size_bytes = 3;
  string version = 4;
}

message FinalizeCacheEntryUploadResponse {
  bool ok = 1;
  int64 entry_id = 2;
}

message GetCacheEntryDownloadURLRequest {
  CacheMetadata metadata = 1;
  string key = 2;
  repeated string restore_keys = 3;
  string version = 4;
}

message GetCacheEntryDownloadURLResponse {
  bool ok = 1;
  string signed_download_url = 2;
  string matched_key = 3;
}
